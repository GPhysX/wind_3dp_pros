;+
;;----------------------------------------------------------------------------------------
;
;  FUNCTION :   dummy_pesa_struct.pro
;  PURPOSE  :   Returns either a Pesa Low or Pesa High dummy structure appropriate for 
;                 replicating.
;
;  CALLED BY:   
;               dummy_3dp_str.pro
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               dat_3dp_str_names.pro
;               is_a_number.pro
;               get_??.pro (?? = eh,elb,pl,plb,ph,phb...)
;               get_ph_mapcode.pro
;               get_phb_mapcode.pro
;               pesa_high_dummy_str.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;               2)  Wind 3DP lz files to be loaded by load_3dp_data.pro
;
;  INPUT:
;               NAME   :  Scalar [string] specifying the type of 3DP structure you wish
;                           to get the data for [i.e. 'el','eh','elb',etc.]
;
;  EXAMPLES:    
;               [calling sequence]
;               dumb = dummy_pesa_struct(name [,INDEX=index])
;
;  KEYWORDS:    
;               INDEX  :  Array [long] of indicies associated w/ data structs
;
;   CHANGED:  1)  Added keyword: INDEX
;                                                                   [08/18/2008   v1.0.5]
;             2)  Updated man page
;                                                                   [03/19/2009   v1.0.6]
;             3)  Changed program my_str_names.pro to dat_3dp_str_names.pro
;                   and renamed
;                                                                   [08/10/2009   v2.0.0]
;             4)  Updated Man. page and
;                   routine now calls is_a_number.pro and
;                   now returns the actual indices for each mapcode, not the range
;                   in case mapcode changes in the middle of one of the ranges
;                                                                   [06/12/2020   v2.0.1]
;
;   NOTES:      
;               1)  Make sure load_3dp_data.pro is called before running this routine
;
;  REFERENCES:  
;               NA
;
;   CREATED:  06/16/2008
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  06/12/2020   v2.0.1
;    MODIFIED BY: Lynn B. Wilson III
;
;;----------------------------------------------------------------------------------------
;-

FUNCTION dummy_pesa_struct,name,INDEX=indx

;;----------------------------------------------------------------------------------------
;;  Determine which detector we're interested in
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 1) THEN RETURN,0b
IF (SIZE(name,/TYPE) NE 7) THEN RETURN,0b
;;  Get pre-formatted 3DP IDL structure names
gn             = dat_3dp_str_names(name[0])
IF (SIZE(gn,/TYPE) NE 8) THEN RETURN,0b
name           = gn.LC[0]
chnn           = STRCOMPRESS(STRLOWCASE(name[0]),/REMOVE_ALL)
check          = [STRPOS(chnn[0],'pesa'),STRPOS(chnn[0],'low'),STRPOS(chnn[0],'high')]
gche           = WHERE(check NE -1,gch)
myn1           = name[0]
IF (gche[0] LT 0) THEN BEGIN
  MESSAGE,'Incorrect input format:  '+name[0],/INFORMATIONAL,/CONTINUE
  RETURN,name[0]
ENDIF ELSE BEGIN
  ;;  Shouldn't happen, but okay...
  IF (gch[0] LT 2) THEN BEGIN
    MESSAGE,'Incomplete structure name:  '+name[0],/INFORMATIONAL,/CONTINUE
    READ,tn,PROMPT='Enter Low or High to specify detector: '
    tn = STRCOMPRESS(STRLOWCASE(tn[0]),/REMOVE_ALL)
    ;;  Determine low or high
    CASE tn[0] OF
      'low'  : myn2 = 'pesa low'
      'high' : myn2 = 'pesa high'
      ELSE   : BEGIN
        PRINT,'Seriously?...'
        RETURN,0b
      END
    ENDCASE
    ;;  Determine burst or survey
    READ,bur,PROMPT='Enter 1 if you want Burst data, else 0: '
    CASE bur[0] OF
      1    : nyn1 = ' Burst'
      ELSE : nyn1 = ''
    ENDCASE
    ;;  Redefine proper string name
    myn2 = myn2[0]+STRLOWCASE(nyn1[0])
  ENDIF ELSE BEGIN
    ;;  Determine low or high
    CASE gche[1] OF
      1 : myn2 = 'pesa low'
      2 : myn2 = 'pesa high'
    ENDCASE
    ;;  Determine burst or survey
    check2 = STRPOS(chnn[0],'burst')
    IF (check2 LT 0) THEN nyn1 = '' ELSE nyn1 = ' Burst'
    myn2 = myn2[0]+STRLOWCASE(nyn1[0])
  ENDELSE
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Define which structure indices to get
;;----------------------------------------------------------------------------------------
IF (is_a_number(indx,/NOMSSG))[0] THEN BEGIN
  ;;  Get user defined indices
  fn1    = 'get_'+gn.SN
  idx    = indx                          ;;  indices of desired pesa structures
  myto   = CALL_FUNCTION(fn1,/TIMES)     ;;  Str. moment times
  gmto   = WHERE(FINITE(myto[idx]),gmt)
  myto   = myto[idx]
  IF (gmt GT 0) THEN BEGIN
    myto = myto[gmto]
  ENDIF ELSE BEGIN
    myto = !VALUES.F_NAN
    MESSAGE,"No data was loaded...",/INFORMATIONAL,/CONTINUE
    RETURN,0b
  ENDELSE
  myopt  = LONG([2,47,0])
  istart = idx[0]
  irange = [istart[0],idx[N_ELEMENTS(idx) - 1L]]
ENDIF ELSE BEGIN
  ;;  Get all indices
  fn1    = 'get_'+gn.SN
  myto   = CALL_FUNCTION(fn1,/TIMES)     ;;  Str. moment times
  gmto   = WHERE(FINITE(myto),gmt)
  istart = 0L
  irange = [istart[0],N_ELEMENTS(myto) - 1L]
  idx    = LINDGEN(gmt) + istart[0]
  myopt  = LONG([2,-1,0])
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Define mapcodes of Pesa High detector
;;----------------------------------------------------------------------------------------
mapcode        = LONARR(gmt)
gyn            = gn.SN[0]
IF (gyn[0] EQ 'ph' OR gyn[0] EQ 'phb') THEN BEGIN
  adv        = 0
  ;;--------------------------------------------------------------------------------------
  ;;  Retrieve mapcodes
  ;;--------------------------------------------------------------------------------------
  CASE gyn[0] OF
    'ph' : BEGIN
      ;;  PESA High Survey
      FOR i=0L, gmt[0] - 1L DO BEGIN
        IF (myopt[1] EQ 47L) THEN myopt[1] = idx[i]
        mapcode[i] = get_ph_mapcode(myto[i],INDEX=idx[i],OPTIONS=myopt,ADVANCE=adv)
      ENDFOR
    END
    'phb' : BEGIN
      ;;  PESA High Burst
      myopt[0] = 15L
      FOR i=0L, gmt[0] - 1L DO BEGIN
        IF (myopt[1] EQ 47L) THEN myopt[1] = idx[i]
        mapcode[i] = get_phb_mapcode(myto[i],INDEX=idx[i],OPTIONS=options,ADVANCE=adv)
      ENDFOR
    END
  ENDCASE
  ;;--------------------------------------------------------------------------------------
  ;;  Convert mapcodes to hex-string name and then define number of bins
  ;;--------------------------------------------------------------------------------------
  mapcode2 = mapcode[0]
  badmap   = WHERE(mapcode NE mapcode2,bdmp,COMPLEMENT=goodmap)
  IF (bdmp[0] GT 0) THEN BEGIN
    MESSAGE,"Mapcode is not a single value throughout!",/INFORMATIONAL,/CONTINUE
    nbins = INTARR(gmt[0])
    FOR i=0L, gmt[0] - 1L DO BEGIN
      mapstr = STRUPCASE(STRING(mapcode[i],format='(z4.4)'))
      CASE mapstr[0] OF
        'D4A4' : nbins[i] = 121
        'D4FE' : nbins[i] = 97
        'D5EC' : nbins[i] = 56
        'D6BB' : nbins[i] = 65
        'D65D' : nbins[i] = 88
        ELSE   : BEGIN
          nbins[i] = 88
        END
      ENDCASE
    ENDFOR
    mapcode2 = mapcode[0]
  ENDIF ELSE BEGIN
    mapcode2 = mapcode[0]
    mapstr = STRUPCASE(STRING(mapcode2,format='(z4.4)'))
    CASE mapstr OF
      'D4A4' : nbins = 121
      'D4FE' : nbins = 97
      'D5EC' : nbins = 56
      'D6BB' : nbins = 65
      'D65D' : nbins = 88
      ELSE   : BEGIN
        nbins = 88
      END
    ENDCASE
  ENDELSE
  ;;--------------------------------------------------------------------------------------
  ;;  Define arrays based upon unique NBINS values
  ;;--------------------------------------------------------------------------------------
  uncode = UNIQ(nbins,SORT(nbins))
  ncode  = N_ELEMENTS(uncode)
  IF (ncode[0] GT 1L) THEN BEGIN
    nstrs    = ncode[0]             ;;  # of different structures needed
    nubin    = LONARR(nstrs[0])
    mucode   = LONARR(nstrs[0])
    nubin    = nbins[uncode]
    mucode   = mapcode[uncode]
    PRINT,"Multiple mapcodes: "
    PRINT,mucode
    PRINT,"Multiple data bins: "
    PRINT,nubin
    PRINT,""
  ENDIF ELSE BEGIN
    nbins    = nbins[0]
    mapcode2 = mapcode[0]
  ENDELSE
ENDIF ELSE BEGIN
  mapcode2 = 54526L
  nbins    = 88
  ncode    = 1L
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Define PESA Low default structures
;;----------------------------------------------------------------------------------------
myn            = 'Pesa Low'
pl_str         = CREATE_STRUCT('PROJECT_NAME','Wind 3D Plasma','DATA_NAME',myn,  $
                     'UNITS_NAME','Counts','UNITS_PROCEDURE','convert_esa_units',$
                     'TIME',0d0,'END_TIME',0d0,'TRANGE',[0d0,0d0],'INTEG_T',0d0, $
                     'DELTA_T',0d0,'MASS',0d0,'GEOMFACTOR',0d0,'INDEX',0l,       $
                     'VALID',0,'SPIN',0l,'NBINS',25,'NENERGY',14,'DACCODES',     $
                     INTARR(4,14),'VOLTS',FLTARR(4,14),'DATA',FLTARR(14, 25),    $
                     'ENERGY',FLTARR(14, 25),'DENERGY',FLTARR(14, 25),'PHI',     $
                     FLTARR(14, 25),'DPHI',FLTARR(14, 25),'THETA',FLTARR(14, 25),$
                     'DTHETA',FLTARR(14, 25),'BINS',REPLICATE(1b,14,25),'DT',    $
                     FLTARR(14, 25),'GF',FLTARR(14, 25),'BKGRATE',FLTARR(14, 25),$
                     'DEADTIME',FLTARR(14, 25),'DVOLUME',FLTARR(14, 25),'DDATA', $
                     FLTARR(14, 25),'MAGF',REPLICATE(!VALUES.F_NAN,3),'SC_POT',  $
                     0.0,'P_SHIFT',0b,'T_SHIFT',0b,'E_SHIFT',0b,'DOMEGA',        $
                     FLTARR(25))

myn            = 'Pesa Low Burst'
plb_str        = CREATE_STRUCT('PROJECT_NAME','Wind 3D Plasma','DATA_NAME',myn,  $
                     'UNITS_NAME','Counts','UNITS_PROCEDURE','convert_esa_units',$
                     'TIME',0d0,'END_TIME',0d0,'TRANGE',[0d0,0d0],'INTEG_T',0d0, $
                     'DELTA_T',0d0,'MASS',0d0,'GEOMFACTOR',0d0,'INDEX',0l,       $
                     'VALID',0,'SPIN',0l,'NBINS',64,'NENERGY',14,'DACCODES',     $
                     INTARR(4,14),'VOLTS',FLTARR(4,14),'DATA',FLTARR(14, 64),    $
                     'ENERGY',FLTARR(14, 64),'DENERGY',FLTARR(14, 64),'PHI',     $
                     FLTARR(14, 64),'DPHI',FLTARR(14, 64),'THETA',FLTARR(14, 64),$
                     'DTHETA',FLTARR(14, 64),'BINS',REPLICATE(1b,14,64),'DT',    $
                     FLTARR(14, 64),'GF',FLTARR(14, 64),'BKGRATE',FLTARR(14, 64),$
                     'DEADTIME',FLTARR(14, 64),'DVOLUME',FLTARR(14, 64),'DDATA', $
                     FLTARR(14, 64),'MAGF',REPLICATE(!VALUES.F_NAN,3),'SC_POT',  $
                     0.0,'P_SHIFT',0b,'T_SHIFT',0b,'E_SHIFT',0b,'DOMEGA',        $
                     FLTARR(64))
;;----------------------------------------------------------------------------------------
;;  Define PESA High default structures
;;----------------------------------------------------------------------------------------
myn    = 'Pesa High'+nyn1[0]
IF (ncode[0] GT 1L) THEN BEGIN
  CASE ncode[0] OF
    2 : BEGIN
      ph_str1 = pesa_high_dummy_str(myn[0],nubin[0],mucode[0])
      ph_str2 = pesa_high_dummy_str(myn[0],nubin[1],mucode[1])
      ind_1   = WHERE(nbins EQ nubin[0],in1)
      ind_2   = WHERE(nbins EQ nubin[1],in2)
      in_mx   = (in1[0] > in2[0]) > 0L
      IF (in1[0] GT 0) THEN gind1 = idx[ind_1] ELSE gind1 = -1L
      IF (in2[0] GT 0) THEN gind2 = idx[ind_2] ELSE gind2 = -1L
      IF (in1[0] NE in2[0]) THEN BEGIN
        ;;  Unequal array lengths --> fill with -1
        deln  = LONG(ABS(in1[0] - in2[0]))
        ones  = REPLICATE(-1L,deln[0])
        IF (in1[0] GT in2[0]) THEN BEGIN
          ;;  Add -1's to 2nd
          gind2 = [gind2,ones]
        ENDIF ELSE BEGIN
          ;;  Add -1's to 1st
          gind1 = [gind1,ones]
        ENDELSE
        ;;  Merge
        my_inds   = [[gind1],[gind2]]
      ENDIF ELSE BEGIN
        ;;  Equal array lengths --> directly join
        my_inds   = [[gind1],[gind2]]
      ENDELSE
;      gind_r1 = [ind_1[0],ind_1[in1[0] - 1L]]  ;;  index range for 1st mapcode
;      gind_r2 = [ind_2[0],ind_2[in2[0] - 1L]]  ;;  index range for 2nd mapcode
;      my_inds = [[gind_r1],[gind_r2]] + irange[0]
      ph_str  = CREATE_STRUCT('PH1_B',ph_str1,'PH2_B',ph_str2,$
                              'INDX1',my_inds)
      phn     = STRLOWCASE(ph_str1.DATA_NAME)
    END
    3 : BEGIN
      ph_str1 = pesa_high_dummy_str(myn[0],nubin[0],mucode[0])
      ph_str2 = pesa_high_dummy_str(myn[0],nubin[1],mucode[1])
      ph_str3 = pesa_high_dummy_str(myn[0],nubin[2],mucode[2])
      ind_1   = WHERE(nbins EQ nubin[0],in1)
      ind_2   = WHERE(nbins EQ nubin[1],in2)
      ind_3   = WHERE(nbins EQ nubin[2],in3)
      in_mx   = ((in1[0] > in2[0]) > in3[0]) > 0L
      IF (in1[0] GT 0) THEN gind1 = idx[ind_1] ELSE gind1 = -1L
      IF (in2[0] GT 0) THEN gind2 = idx[ind_2] ELSE gind2 = -1L
      IF (in3[0] GT 0) THEN gind3 = idx[ind_3] ELSE gind3 = -1L
      IF (in1[0] NE in2[0] OR in1[0] NE in3[0]) THEN BEGIN
        ;;  At least one pair does not match
        IF (in1[0] NE in2[0] AND in1[0] NE in3[0] AND in2[0] NE in3[0]) THEN BEGIN
          ;;  All three are different
          deln1  = LONG(ABS(in1[0] - in_mx[0]))
          deln2  = LONG(ABS(in2[0] - in_mx[0]))
          deln3  = LONG(ABS(in3[0] - in_mx[0]))
          IF (deln1[0] GT 0) THEN gind1 = [gind1,REPLICATE(-1L,deln1[0])]
          IF (deln2[0] GT 0) THEN gind2 = [gind2,REPLICATE(-1L,deln2[0])]
          IF (deln3[0] GT 0) THEN gind3 = [gind3,REPLICATE(-1L,deln3[0])]
        ENDIF ELSE BEGIN
          ;;  Only 1 is different
          deln  = LONG(MAX(ABS([in1[0],in2[0],in3[0]] - in_mx[0])))
          ones  = REPLICATE(-1L,deln[0])
          IF (in1[0] NE in2[0]) THEN BEGIN
            ;;  2 is different (1 and 3 match)
            gind2 = [gind2,ones]
          ENDIF ELSE BEGIN
            IF (in1[0] NE in3[0]) THEN BEGIN
              ;;  3 is different (1 and 2 match)
              gind3 = [gind3,ones]
            ENDIF ELSE BEGIN
              ;;  1 is different (2 and 3 match)
              gind1 = [gind1,ones]
            ENDELSE
          ENDELSE
        ENDELSE
        ;;  Merge
        my_inds   = [[gind1],[gind2],[gind3]]
      ENDIF ELSE BEGIN
        ;;  Equal array lengths --> directly join
        my_inds   = [[gind1],[gind2],[gind3]]
      ENDELSE
;      gind_r1 = [ind_1[0],ind_1[in1[0] - 1L]]  ;;  index range for 1st mapcode
;      gind_r2 = [ind_2[0],ind_2[in2[0] - 1L]]  ;;  index range for 2nd mapcode
;      gind_r3 = [ind_3[0],ind_3[in3[0] - 1L]]  ;;  index range for 3rd mapcode
;      my_inds = [[gind_r1],[gind_r2],[gind_r3]] + irange[0]
      ph_str  = CREATE_STRUCT('PH1_B',ph_str1,'PH2_B',ph_str2,$
                              'PH3_B',ph_str3,'INDX1',my_inds)
      phn     = STRLOWCASE(ph_str1.DATA_NAME)
    END
    ELSE : BEGIN
      MESSAGE,"Too many mapcodes...load less data...",/INFORMATIONAL,/CONTINUE
      ph_str1 = pesa_high_dummy_str(myn,88,54526L)
      RETURN,ph_str1
    END
  ENDCASE
ENDIF ELSE BEGIN
  ph_str = pesa_high_dummy_str(myn,nbins[0],mapcode2)
  phn  = STRLOWCASE(ph_str.DATA_NAME)
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Determine which structure to get
;;----------------------------------------------------------------------------------------
pln            = STRLOWCASE(pl_str.DATA_NAME)
plbn           = STRLOWCASE(plb_str.DATA_NAME)
good           = WHERE(myn2[0] EQ [pln[0],plbn[0],phn[0]],gd)
IF (gd[0] GT 0) THEN BEGIN
  CASE good[0] OF
    0 : RETURN,pl_str
    1 : RETURN,plb_str
    2 : RETURN,ph_str
  ENDCASE
ENDIF ELSE BEGIN
  MESSAGE,'Bad structure names...',/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

END



