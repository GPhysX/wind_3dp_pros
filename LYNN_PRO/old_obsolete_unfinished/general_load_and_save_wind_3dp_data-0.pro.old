;;  .compile $HOME/Desktop/temp_idl/general_load_and_save_wind_3dp_data.pro

PRO general_load_and_save_wind_3dp_data,TDATE=tdate,DATE=date,LOAD_EESA=load_eesa,$
                                        LOAD_PESA=load_pesa,LOAD__SST=load__sst,  $
                                        SAVE_DIR=save_dir

;;  Requires:  TDATE      :  Scalar [string] defining the start date ['YYYY-MM-DD']
;;  Requires:  DATE       :  Scalar [string] defining the start date ['MMDDYY']
;;  Optional:  LOAD_????  :  If set, routine will load and save instrument-type VDFs
;;                             [Default = FALSE]
;;  Optional:  SAVE_DIR   :  Scalar [string] defining the directory where IDL save files
;;                             will be stored
;;                             [Default = current working directory]
;;----------------------------------------------------------------------------------------
;;  IDL system and OS stuff
;;----------------------------------------------------------------------------------------
vers           = !VERSION.OS_FAMILY   ;;  e.g., 'unix'
vern           = !VERSION.RELEASE     ;;  e.g., '7.1.1'
slash          = get_os_slash()       ;;  '/' for Unix, '\' for Windows
;;----------------------------------------------------------------------------------------
;;  Constants
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;  Fundamental
c              = 2.9979245800d+08         ;;  Speed of light in vacuum [m s^(-1), 2014 CODATA/NIST]
kB             = 1.3806485200d-23         ;;  Boltzmann Constant [J K^(-1), 2014 CODATA/NIST]
hh             = 6.6260700400d-34         ;;  Planck Constant [J s, 2014 CODATA/NIST]
;;  Electromagnetic
qq             = 1.6021766208d-19         ;;  Fundamental charge [C, 2014 CODATA/NIST]
epo            = 8.8541878170d-12         ;;  Permittivity of free space [F m^(-1), 2014 CODATA/NIST]
muo            = !DPI*4.00000d-07         ;;  Permeability of free space [N A^(-2) or H m^(-1), 2014 CODATA/NIST]
;;  Atomic
me             = 9.1093835600d-31         ;;  Electron mass [kg, 2014 CODATA/NIST]
mp             = 1.6726218980d-27         ;;  Proton mass [kg, 2014 CODATA/NIST]
mn             = 1.6749274710d-27         ;;  Neutron mass [kg, 2014 CODATA/NIST]
ma             = 6.6446572300d-27         ;;  Alpha particle mass [kg, 2014 CODATA/NIST]
;;  --> Define mass of particles in units of energy [eV]
ma_eV          = ma[0]*c[0]^2/qq[0]       ;;  ~3727.379378(23) [MeV, 2014 CODATA/NIST]
me_eV          = me[0]*c[0]^2/qq[0]       ;;  ~0.5109989461(31) [MeV, 2014 CODATA/NIST]
mn_eV          = mn[0]*c[0]^2/qq[0]       ;;  ~939.5654133(58) [MeV, 2014 CODATA/NIST]
mp_eV          = mp[0]*c[0]^2/qq[0]       ;;  ~938.2720813(58) [MeV, 2014 CODATA/NIST]
;;  Astronomical
R_S___m        = 6.9600000d08             ;;  Sun's Mean Equatorial Radius [m, 2015 AA values]
R_Ea__m        = 6.3781366d06             ;;  Earth's Mean Equatorial Radius [m, 2015 AA values]
M_E            = 5.9722000d24             ;;  Earth's mass [kg, 2015 AA values]
M_S__kg        = 1.9884000d30             ;;  Sun's mass [kg, 2015 AA values]
au             = 1.49597870700d+11        ;;  1 astronomical unit or AU [m, from Mathematica 10.1 on 2015-04-21]
R_E            = R_Ea__m[0]*1d-3          ;;  m --> km
;;----------------------------------------------------------------------------------------
;;  Conversion Factors
;;----------------------------------------------------------------------------------------
;;  Energy and Temperature
f_1eV          = qq[0]/hh[0]          ;;  Freq. associated with 1 eV of energy [ Hz --> f_1eV*energy{eV} = freq{Hz} ]
eV2J           = hh[0]*f_1eV[0]       ;;  Energy associated with 1 eV of energy [ J --> J_1eV*energy{eV} = energy{J} ]
eV2K           = qq[0]/kB[0]          ;;  Temp. associated with 1 eV of energy [11,604.5221 K/eV, 2014 CODATA/NIST --> K_eV*energy{eV} = Temp{K}]
K2eV           = kB[0]/qq[0]          ;;  Energy associated with 1 K Temp. [8.6173303 x 10^(-5) eV/K, 2014 CODATA/NIST --> eV_K*Temp{K} = energy{eV}]
;;----------------------------------------------------------------------------------------
;;  Coordinates and vectors
;;----------------------------------------------------------------------------------------
;;  Define some coordinate strings
coord_dsl      = 'dsl'
coord_gse      = 'gse'
coord_gsm      = 'gsm'
coord_fac      = 'fac'
coord_mag      = 'mag'
coord_gseu     = STRUPCASE(coord_gse[0])
vec_str        = ['x','y','z']
tensor_str     = ['x'+vec_str,'y'+vec_str[1:2],'zz']
fac_vec_str    = ['perp1','perp2','para']
fac_dir_str    = ['para','perp','anti']
vec_col        = [250,150, 50]
;;  Define dummy error messages
dummy_errmsg   = ['You have not defined the proper input!',                $
                  'This batch routine expects three inputs',               $
                  'with following EXACT variable names:',                  $
                  "date         ;; e.g., '072608' for July 26, 2008",      $
                  "tdate        ;; e.g., '2008-07-26' for July 26, 2008"   ]
nderrmsg       = N_ELEMENTS(dummy_errmsg) - 1L
;;  Define default TPLOT plot limits structures
def__lim       = {YSTYLE:1,PANEL_SIZE:2.,XMINOR:5,XTICKLEN:0.04,YTICKLEN:0.01}
def_dlim       = {SPEC:0,COLORS:50L,LABELS:'1',LABFLAG:2}
;;  Define spacecraft name
sc             = 'Wind'
scpref         = sc[0]+'_'
;;----------------------------------------------------------------------------------------
;;  Define and times/dates Probe from input
;;----------------------------------------------------------------------------------------
test           = ((N_ELEMENTS(date) EQ 0) OR (N_ELEMENTS(tdate) EQ 0)) OR $
                 ((SIZE(date,/TYPE) NE 7) OR (SIZE(tdate,/TYPE) NE 7))
IF (test[0]) THEN FOR pj=0L, nderrmsg[0] DO PRINT,dummy_errmsg[pj]
IF (test[0]) THEN STOP        ;;  Stop before user runs into issues
;;  Check TDATE format
test           = test_tdate_format(tdate)
IF (test[0] EQ 0) THEN STOP        ;;  Stop before user runs into issues
;;  Check LOAD_EESA
test           = (N_ELEMENTS(load_eesa) EQ 0) OR ~KEYWORD_SET(load_eesa)
IF (test[0]) THEN eesa_on = 0b ELSE eesa_on = 1b
;;  Check LOAD_PESA
test           = (N_ELEMENTS(load_pesa) EQ 0) OR ~KEYWORD_SET(load_pesa)
IF (test[0]) THEN pesa_on = 0b ELSE pesa_on = 1b
;;  Check LOAD__SST
test           = (N_ELEMENTS(load__sst) EQ 0) OR ~KEYWORD_SET(load__sst)
IF (test[0]) THEN sst__on = 0b ELSE sst__on = 1b
;;----------------------------------------------------------------------------------------
;;  Check TPLOT and keywords
;;----------------------------------------------------------------------------------------
nna            = tnames()
IF (nna[0] NE '') THEN store_data,DELETE=nna  ;;  Make sure nothing is already loaded
;;----------------------------------------------------------------------------------------
;;  Define date/time of interest
;;----------------------------------------------------------------------------------------
start_of_day_t = '00:00:00.000000000'
end___of_day_t = '23:59:59.999999999'
start_of_day   = '00:00:00.000000'
end___of_day   = '23:59:59.999999'
;;  Default to entire day
tr_00          = tdate[0]+'/'+[start_of_day[0],end___of_day[0]]
;;  Make sure valid time range
trange         = time_double(tr_00)
test           = get_valid_trange(TRANGE=trange,PRECISION=6)
IF (SIZE(test[0],/TYPE) NE 8) THEN STOP        ;;  Stop before user runs into issues
tran1d         = trange
;;----------------------------------------------------------------------------------------
;;  Load 3DP data
;;    -->  The following loads data from the level zero files found at:
;;           http://sprg.ssl.berkeley.edu/wind3dp/data/wi/3dp/lz/
;;    -->  load_3dp_data.pro requires the use of a shared object library, which are
;;           found in the ./wind_3dp_pros/WIND_PRO/ directory and are both operating
;;           system- (OS) and memory size-dependent (i.e., *_64.so files allow the use
;;           of 64 bit IDL, whereas others require 32 bit IDL)
;;----------------------------------------------------------------------------------------
;;  Define a start date and time
start_t        = tdate[0]+'/'+start_of_day[0]
;;  Define a duration of time to load [hours]
dur            = 200.
;;  Define the memory size to limit to [mostly for older systems]
memsz          = 200.
;;  Define the packet quality [2 allows "invalid" distributions through]
qual           = 2
;;  Load the level zero data files and store in pointer memory
load_3dp_data,start_t[0],dur[0],QUALITY=qual[0],MEMSIZE=memsz[0]
;;----------------------------------------------------------------------------------------
;;  Open window and plot
;;----------------------------------------------------------------------------------------
DEVICE,GET_SCREEN_SIZE=s_size
wsz            = s_size*7d-1
win_ttl        = 'Wind Plots ['+tdate[0]+']'
win_str        = {RETAIN:2,XSIZE:wsz[0],YSIZE:wsz[1],TITLE:win_ttl[0],XPOS:10,YPOS:10}
WINDOW,0,_EXTRA=win_str
;;  Plot MFI data for date of interest
tplot,[1,2],TRANGE=tran1d
;;----------------------------------------------------------------------------------------
;;  Load orbit data
;;----------------------------------------------------------------------------------------
Bgse_tpnm      = 'wi_B3(GSE)'        ;;  TPLOT handle associated with Bo [GSE, nT]
wind_orbit_to_tplot,BNAME=Bgse_tpnm[0],TRANGE=tran1d
;;  Change Y-Axis titles
options,'Wind_Radial_Distance','YTITLE','Radial Dist. (R!DE!N)'
options,'Wind_GSE_Latitude','YTITLE','GSE Lat. [deg]'
options,'Wind_GSE_Longitude','YTITLE','GSE Lon. [deg]'
;;  Add these variables as tick mark labels
gnames         = ['Wind_Radial_Distance','Wind_GSE_Latitude','Wind_GSE_Longitude','Wind_MLT']
tplot_options,VAR_LABEL=gnames
;;----------------------------------------------------------------------------------------
;;  Load PESA Low ion moments
;;----------------------------------------------------------------------------------------
Bgse_tpnm      = 'wi_B3(GSE)'        ;;  TPLOT handle associated with Bo [GSE, nT]
Vgse_tpnm      = 'V_sw2'             ;;  " " Vsw [GSE, km/s]
pesa_low_moment_calibrate,DATE=date,TRANGE=tran1d,BNAME=Bgse_tpnm[0]
;;  Determine which TPLOT handle to use for estimate of spacecraft potential [eV]
IF (tnames('sc_pot_3') EQ '') THEN scp_tpn = 'sc_pot_2' ELSE scp_tpn = 'sc_pot_3'
;;----------------------------------------------------------------------------------------
;;  Set some defaults for TPLOT
;;----------------------------------------------------------------------------------------
lbw_tplot_set_defaults
tplot_options,'XMARGIN',[ 20, 15]
tplot_options,'YMARGIN',[ 5, 5]
;;----------------------------------------------------------------------------------------
;;  Define time suffix for output files
;;----------------------------------------------------------------------------------------
fnm            = file_name_times(tran1d,PREC=0)
ftime0         = fnm.F_TIME          ; e.g. 1998-08-09_0801x09.494
ftimes         = STRMID(ftime0[*],0L,15L)
tsuffx         = ftimes[0]+'_'+ftimes[1]
;;----------------------------------------------------------------------------------------
;;  Get thermal [PESA Low] and suprathermal [PESA High]
;;    ion velocity distribution functions (VDFs)
;;
;;    Low   :  ~0.1-10.0 keV ions
;;    High  :  ~0.5-28.0 keV ions
;;----------------------------------------------------------------------------------------
fpref          = 'Pesa_3DP_Structures_'
fsuffx         = '_w-Vsw-Ni-SCPot.sav'
IF (pesa_on[0]) THEN BEGIN
  pl_dat         = get_3dp_structs('pl' ,TRANGE=tran1d)      ;;  PESA  Low
  plbdat         = get_3dp_structs('plb',TRANGE=tran1d)      ;;  PESA  Low Burst
  ph_dat         = get_3dp_structs('ph' ,TRANGE=tran1d)      ;;  PESA High
  phbdat         = get_3dp_structs('phb',TRANGE=tran1d)      ;;  PESA High Burst
ENDIF ELSE BEGIN
  pl_dat         = 0
  plbdat         = 0
  ph_dat         = 0
  phbdat         = 0
ENDELSE
;;  PESA Low
IF (SIZE(pl_dat,/TYPE) EQ 8) THEN BEGIN
  apl_ = pl_dat.DATA
  add_vsw2, apl_,Vgse_tpnm[0]
  add_magf2,apl_,Bgse_tpnm[0]
  add_scpot,apl_,  scp_tpn[0]
ENDIF ELSE BEGIN
  apl_ = 0
ENDELSE
;;  PESA Low Burst
IF (SIZE(plbdat,/TYPE) EQ 8) THEN BEGIN
  aplb = plbdat.DATA
  add_vsw2, aplb,Vgse_tpnm[0]
  add_magf2,aplb,Bgse_tpnm[0]
  add_scpot,aplb,  scp_tpn[0]
ENDIF ELSE BEGIN
  aplb = 0
ENDELSE
;;  PESA High
IF (SIZE(ph_dat,/TYPE) EQ 8) THEN BEGIN
  aph_ = ph_dat.DATA
  add_vsw2, aph_,Vgse_tpnm[0]
  add_magf2,aph_,Bgse_tpnm[0]
  add_scpot,aph_,  scp_tpn[0]
ENDIF ELSE BEGIN
  aph_ = 0
ENDELSE
;;  PESA High Burst
IF (SIZE(phbdat,/TYPE) EQ 8) THEN BEGIN
  aphb = phbdat.DATA
  add_vsw2, aphb,Vgse_tpnm[0]
  add_magf2,aphb,Bgse_tpnm[0]
  add_scpot,aphb,  scp_tpn[0]
ENDIF ELSE BEGIN
  aphb = 0
ENDELSE

fname          = fpref[0]+tsuffx[0]+fsuffx[0]
;;  Print out name as a check
IF (pesa_on[0]) THEN PRINT,';; ',fname[0]

;;  Create IDL save file
IF (pesa_on[0]) THEN SAVE,apl_,aplb,aph_,aphb,FILENAME=fname[0]
;;  Clean up
IF (pesa_on[0]) THEN BEGIN
  dumb = TEMPORARY(apl_) & dumb = TEMPORARY(aph_) & dumb = TEMPORARY(aplb) & dumb = TEMPORARY(aphb)
  dumb = TEMPORARY(pl_dat) & dumb = TEMPORARY(plbdat)
  dumb = TEMPORARY(ph_dat) & dumb = TEMPORARY(phbdat)
ENDIF
;;----------------------------------------------------------------------------------------
;;  Get thermal [EESA Low] and suprathermal [EESA High]
;;    electron velocity distribution functions (VDFs)
;;
;;    Low   :     ~5-1100  eV electrons
;;    High  :  ~0.14-28.0 keV electrons
;;----------------------------------------------------------------------------------------
fpref          = 'Eesa_3DP_Structures_'
fsuffx         = '_w-Vsw-Ni-SCPot.sav'
IF (eesa_on[0]) THEN BEGIN
  el_dat         = get_3dp_structs('el' ,TRANGE=tran1d)      ;;  EESA  Low
  elbdat         = get_3dp_structs('elb',TRANGE=tran1d)      ;;  EESA  Low Burst
  eh_dat         = get_3dp_structs('eh' ,TRANGE=tran1d)      ;;  EESA High
  ehbdat         = get_3dp_structs('ehb',TRANGE=tran1d)      ;;  EESA High Burst
ENDIF ELSE BEGIN
  el_dat         = 0
  elbdat         = 0
  eh_dat         = 0
  ehbdat         = 0
ENDELSE
;;  EESA Low
IF (SIZE(el_dat,/TYPE) EQ 8) THEN BEGIN
  ael_ = el_dat.DATA
  add_vsw2, ael_,Vgse_tpnm[0]
  add_magf2,ael_,Bgse_tpnm[0]
  add_scpot,ael_,  scp_tpn[0]
ENDIF ELSE BEGIN
  ael_ = 0
ENDELSE
;;  EESA Low Burst
IF (SIZE(elbdat,/TYPE) EQ 8) THEN BEGIN
  aelb = elbdat.DATA
  add_vsw2, aelb,Vgse_tpnm[0]
  add_magf2,aelb,Bgse_tpnm[0]
  add_scpot,aelb,  scp_tpn[0]
ENDIF ELSE BEGIN
  aelb = 0
ENDELSE
;;  EESA High
IF (SIZE(eh_dat,/TYPE) EQ 8) THEN BEGIN
  aeh_ = eh_dat.DATA
  add_vsw2, aeh_,Vgse_tpnm[0]
  add_magf2,aeh_,Bgse_tpnm[0]
  add_scpot,aeh_,  scp_tpn[0]
ENDIF ELSE BEGIN
  aeh_ = 0
ENDELSE
;;  EESA High Burst
IF (SIZE(ehbdat,/TYPE) EQ 8) THEN BEGIN
  aehb = ehbdat.DATA
  add_vsw2, aehb,Vgse_tpnm[0]
  add_magf2,aehb,Bgse_tpnm[0]
  add_scpot,aehb,  scp_tpn[0]
ENDIF ELSE BEGIN
  aehb = 0
ENDELSE

fname          = fpref[0]+tsuffx[0]+fsuffx[0]
;;  Print out name as a check
IF (eesa_on[0]) THEN PRINT,';; ',fname[0]

;;  Create IDL save file
IF (eesa_on[0]) THEN SAVE,ael_,aelb,aeh_,aehb,FILENAME=fname[0]
;;  Clean up
IF (eesa_on[0]) THEN BEGIN
  dumb = TEMPORARY(ael_) & dumb = TEMPORARY(aeh_) & dumb = TEMPORARY(aelb) & dumb = TEMPORARY(aehb)
  dumb = TEMPORARY(el_dat) & dumb = TEMPORARY(elbdat)
  dumb = TEMPORARY(eh_dat) & dumb = TEMPORARY(ehbdat)
ENDIF
;;----------------------------------------------------------------------------------------
;;  Get solid-state telescope [SST] velocity distribution functions (VDFs)
;;    for electrons [Foil] and protons [Open]
;;
;;    Foil  :   ~20-550 keV electrons
;;    Open  :  ~70-6500 keV protons
;;----------------------------------------------------------------------------------------
fpref          = 'SST-Foil-Open_3DP_Structures_'
fsuffx         = '_w-Vsw-Ni-SCPot.sav'
IF (sst__on[0]) THEN BEGIN
  sf_dat         = get_3dp_structs('sf' ,TRANGE=tran1d)      ;;  SST Foil
  sfbdat         = get_3dp_structs('sfb',TRANGE=tran1d)      ;;  SST Foil Burst
  so_dat         = get_3dp_structs('so' ,TRANGE=tran1d)      ;;  SST Open
  sobdat         = get_3dp_structs('sob',TRANGE=tran1d)      ;;  SST Open Burst
ENDIF ELSE BEGIN
  sf_dat         = 0
  sfbdat         = 0
  so_dat         = 0
  sobdat         = 0
ENDELSE
;;  SST Foil
IF (SIZE(sf_dat,/TYPE) EQ 8) THEN BEGIN
  asf_ = sf_dat.DATA
  add_vsw2, asf_,Vgse_tpnm[0]
  add_magf2,asf_,Bgse_tpnm[0]
  add_scpot,asf_,  scp_tpn[0]
ENDIF ELSE BEGIN
  asf_ = 0
ENDELSE
;;  SST Foil Burst
IF (SIZE(sfbdat,/TYPE) EQ 8) THEN BEGIN
  asfb = sfbdat.DATA
  add_vsw2, asfb,Vgse_tpnm[0]
  add_magf2,asfb,Bgse_tpnm[0]
  add_scpot,asfb,  scp_tpn[0]
ENDIF ELSE BEGIN
  asfb = 0
ENDELSE
;;  SST Open
IF (SIZE(so_dat,/TYPE) EQ 8) THEN BEGIN
  aso_ = so_dat.DATA
  add_vsw2, aso_,Vgse_tpnm[0]
  add_magf2,aso_,Bgse_tpnm[0]
  add_scpot,aso_,  scp_tpn[0]
ENDIF ELSE BEGIN
  aso_ = 0
ENDELSE
;;  SST Open Burst
IF (SIZE(sobdat,/TYPE) EQ 8) THEN BEGIN
  asob = sobdat.DATA
  add_vsw2, asob,Vgse_tpnm[0]
  add_magf2,asob,Bgse_tpnm[0]
  add_scpot,asob,  scp_tpn[0]
ENDIF ELSE BEGIN
  asob = 0
ENDELSE

fname          = fpref[0]+tsuffx[0]+fsuffx[0]
;;  Print out name as a check
IF (sst__on[0]) THEN PRINT,';; ',fname[0]

;;  Create IDL save file
IF (sst__on[0]) THEN SAVE,asf_,asfb,aso_,asob,FILENAME=fname[0]
;;  Clean up
IF (sst__on[0]) THEN BEGIN
  dumb = TEMPORARY(asf_) & dumb = TEMPORARY(aso_) & dumb = TEMPORARY(asfb) & dumb = TEMPORARY(asob)
  dumb = TEMPORARY(sf_dat) & dumb = TEMPORARY(sfbdat)
  dumb = TEMPORARY(so_dat) & dumb = TEMPORARY(sobdat)
ENDIF
;;----------------------------------------------------------------------------------------
;;  Clean up
;;----------------------------------------------------------------------------------------
dumb           = TEMPORARY(Bgse_tpnm) & dumb = TEMPORARY(Vgse_tpnm) & dumb = TEMPORARY(scp_tpn)
dumb           = TEMPORARY(fnm) & dumb = TEMPORARY(ftimes) & dumb = TEMPORARY(ftime0) & dumb = TEMPORARY(tsuffx)
dumb           = TEMPORARY(fname) & dumb = TEMPORARY(fpref) & dumb = TEMPORARY(fsuffx)
;;  Remove TPLOT handles/data
nna            = tnames()
IF (nna[0] NE '') THEN store_data,DELETE=nna  ;;  Make sure nothing is already loaded

;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END










































