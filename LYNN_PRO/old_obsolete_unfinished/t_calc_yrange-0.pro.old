;+
;*****************************************************************************************
;
;  FUNCTION :   t_calc_yrange.pro
;  PURPOSE  :   Calculates an appropriate YRANGE array for a given input TPLOT structure
;                 accounting for user-specified tests (e.g., log or linear scale).
;
;  CALLED BY:   
;               NA
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               tplot_struct_format_test.pro
;               is_a_number.pro
;               t_get_current_trange.pro
;               trange_clip_data.pro
;               get_posneg_els_arr.pro
;               fill_range.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               TPSTRUC     :  Scalar [structure] defining a valid TPLOT structure for
;                                which the user wishes to determine an appropriate
;                                array for YRANGE
;
;  EXAMPLES:    
;               [calling sequence]
;               yran = t_calc_yrange(tpstruc [,/LOG] [,/USE_CURTR] [,/POSITIVE] [,PERC_EX=perc_ex])
;
;  KEYWORDS:    
;               LOG         :  If set, routine will assume data is plotted on a
;                                logarithmic scale and so will ensure at least one major
;                                tick mark (i.e., integer power of 10) is included in
;                                the output YRANGE array
;                                [Default = FALSE]
;               PERC_EX     :  Scalar [numeric] defining the percentage beyond the actual
;                                data range to include as padding
;                                [Default = 5e-2 for 5%]
;               USE_CURTR   :  If set, routine will only consider data values within the
;                                currently plotted TPLOT time range when defining the
;                                data range
;                                [Default = FALSE]
;               POSITIVE    :  If set, routine will consider only positive data values
;                                and ignore zeros
;                                [Default = FALSE]
;
;   CHANGED:  1)  NA
;                                                                   [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               ****  Still writting  ****
;
;  REFERENCES:  
;               NA
;
;   CREATED:  09/04/2018
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  09/04/2018   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION t_calc_yrange,tpstruc,LOG=log,PERC_EX=perc_ex,USE_CURTR=use_curtr,POSITIVE=positive

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;  Define defaults
pos_on         = 0b                             ;;  Logic:  TRUE = return positive-only values
log_on         = 0b                             ;;  Logic:  TRUE = log-scale plot
ctr_on         = 0b                             ;;  Logic:  TRUE = use the currently shown time range only
def_perc       = 5e-2                           ;;  Default padding percentage
;;  Dummy error messages
notstr1msg     = 'User must define TPSTRUC on input...'
baddfor_msg    = 'Incorrect input format:  TPSTRUC must be an IDL TPLOT structure'
no_inpt_msg    = 'User must have loaded and plotted some data in TPLOT...'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
;;  Check for an input
IF (N_PARAMS() LT 1) THEN BEGIN
  ;;  No input
  MESSAGE,notstr1msg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;  Check if TPLOT structure
test           = tplot_struct_format_test(tpstruc,TEST__V=test__v,TEST_V1_V2=test_v1_v2,$
                                          TEST_DY=test_dy,/NOMSSG)
IF (test[0] EQ 0) THEN BEGIN
  MESSAGE,baddfor_msg,/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;  Check LOG
IF KEYWORD_SET(log) THEN log_on = 1b
;;  Check USE_CURTR
IF KEYWORD_SET(use_curtr) THEN ctr_on = 1b
;;  Check USE_CURTR
IF (KEYWORD_SET(positive) OR log_on[0]) THEN pos_on = 1b
;;  Check PERC_EX
IF (is_a_number(perc_ex,/NOMSSG)) THEN pad_perc = ABS(perc_ex[0]) ELSE pad_perc = def_perc[0]
;;----------------------------------------------------------------------------------------
;;  Define YRANGE
;;----------------------------------------------------------------------------------------
IF (ctr_on[0]) THEN BEGIN
  tran           = t_get_current_trange()
  IF (TOTAL(FINITE(tran)) NE 2) THEN BEGIN
    MESSAGE,no_inpt_msg,/INFORMATIONAL,/CONTINUE
    RETURN,0b
  ENDIF
  ;;  Clip data to currently shown time range
  struc          = trange_clip_data(tpstruc,TRANGE=tran)
  data           = REFORM(struc.Y,N_ELEMENTS(struc.Y))
  ;;  Clean up
  struc          = 0
ENDIF ELSE BEGIN
  ;;  Use all data
  data           = REFORM(tpstruc.Y,N_ELEMENTS(tpstruc.Y))
ENDELSE
IF (pos_on[0]) THEN BEGIN
  ;;  Use only positive, non-negative values
  vals           = get_posneg_els_arr(data)
ENDIF ELSE BEGIN
  ;;  Use all values
  vals           = data
ENDELSE
;;  Define default range
def_yran       = [MIN(vals,/NAN),MAX(vals,/NAN)]
;;  Expand by PERC_EX
pad_yran       = def_yran*(1d0 + [-1,1]*pad_perc[0])
;;----------------------------------------------------------------------------------------
;;  Check for at least one major tick in YRANGE
;;----------------------------------------------------------------------------------------
IF (log_on[0]) THEN BEGIN
  ;;  Ensure positive in case user entered a percentage greater than unity
  IF (pad_yran[0] LE 0) THEN pad_yran[0] = pad_yran[0] > (1d-2*def_yran[0])
  ;;--------------------------------------------------------------------------------------
  ;;  Find nearest integer power of 10
  ;;--------------------------------------------------------------------------------------
  l10_yran       = ALOG10(pad_yran)
  l10_rex        = [FLOOR(l10_ran),CEIL(l10_ran)]
  exp_ran        = [MIN(l10_rex,/NAN) - 1,MAX(l10_rex,/NAN) + 1]
  int_exp        = fill_range(exp_ran[0],exp_ran[1],DIND=1)
  int_p10        = 1d1^int_exp
  ;;  See if YRANGE straddles any integer power of 10
  good           = WHERE(pad_yran[0] LE int_p10 AND pad_yran[1] GE int_p10,gd)
  IF (gd[0] EQ 0) THEN BEGIN
    ;;  Need to expand to include nearest integer power of 10
    np           = N_ELEMENTS(int_p10)
    diff         = REPLICATE(f,np[0],2L)
    FOR k=0L, 1L DO diff[*,k]    = ABS(pad_yran[k] - int_p10)
    mndff        = MIN(diff,ln,DIMENSION=1,/NAN)
    IF (mndff[0] LT mndff[1]) THEN BEGIN
      ;;  Expand to lower integer power of 10
      pad_yran[0] = int_p10[ln[0]]
    ENDIF ELSE BEGIN
      ;;  Expand to upper integer power of 10
      pad_yran[1] = int_p10[ln[1]]
    ENDELSE
  ENDIF
ENDIF
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,pad_yran
END
