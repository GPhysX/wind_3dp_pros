;-----------------------------------------------------------------------------------------
; => Constants
;-----------------------------------------------------------------------------------------
f        = !VALUES.F_NAN
d        = !VALUES.D_NAN
c        = 2.99792458d8      ; -Speed of light in vacuum (m/s)
kB       = 1.380658d-23      ; -Boltzmann Constant (J/K)
epo      = 8.854187817d-12   ; -Permittivity of free space (F/m)
muo      = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)
me       = 9.1093897d-31     ; -Electron mass (kg)
mp       = 1.6726231d-27     ; -Proton mass (kg)
qq       = 1.60217733d-19    ; => Fundamental charge (C)

date     = '121097'
tramp    = '1997-12-10/04:33:14.664'
vshn     = 391.2                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test0    = tdss_lhw_stats_read(DATE=date)
evn0     = test0.EVENT_N
scet0    = test0.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t0   = time_double(scet0) - time_double(tramp)
dist_0   = del_t0*vshn[0]
avg_lfk0 = (test0.K_ST_LOWF_MP + test0.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk0 = (test0.K_ST_highF_MP + test0.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql0   = test0.FREQ_LOW_HIGH[*,0]
freqh0   = test0.FREQ_LOW_HIGH[*,1]
pkamp0   = test0.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp0 = test0.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
thkbl0   = test0.THETA_KB[*,0] < (18d1 - test0.THETA_KB[*,0])
thkbh0   = test0.THETA_KB[*,1] < (18d1 - test0.THETA_KB[*,1])
thkvl0   = test0.THETA_KV[*,0] < (18d1 - test0.THETA_KV[*,0])
thkvh0   = test0.THETA_KV[*,1] < (18d1 - test0.THETA_KV[*,1])
wce0     = (test0.WCE_SE[*,0] + test0.WCE_SE[*,1])/2d0
wpe0     = (test0.WPE_SE[*,0] + test0.WPE_SE[*,1])/2d0
wlh0     = (test0.WLH_SE[*,0] + test0.WLH_SE[*,1])/2d0
vte0     = (test0.VTE_SE[*,0] + test0.VTE_SE[*,1])/2d0
rhoe0    = (test0.RHO_VTCE_SE[*,0] + test0.RHO_VTCE_SE[*,1])/2d0
vsw0     = (test0.VSW_ST + test0.VSW_EN)/2d0
vdr0     = (test0.VDRIFT_ST + test0.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf0    = (test0.MAGF_ST + test0.MAGF_EN)/2d0
dens0    = (test0.NE_SE[*,0] + test0.NE_SE[*,1])/2d0
bmag0    = SQRT(TOTAL(magf0^2,2L,/NAN))
betapa0  = (test0.BETA_PARCE_SE[*,0] + test0.BETA_PARCE_SE[*,1])/2d0
teavg0   = (test0.TE_AVG_SE[*,0] + test0.TE_AVG_SE[*,1])/2d0
tiavg0   = (test0.TI_AVG_SE[*,0] + test0.TI_AVG_SE[*,1])/2d0
tecavg0  = (test0.TEC_SE[*,0] + test0.TEC_SE[*,1])/2d0
tehavg0  = (test0.TEH_SE[*,0] + test0.TEH_SE[*,1])/2d0
tparc0   = (test0.TPAR_EC_SE[*,0] + test0.TPAR_EC_SE[*,1])/2d0
tperc0   = (test0.TPER_EC_SE[*,0] + test0.TPER_EC_SE[*,1])/2d0
tparh0   = (test0.TPAR_EH_SE[*,0] + test0.TPAR_EH_SE[*,1])/2d0
tperh0   = (test0.TPER_EH_SE[*,0] + test0.TPER_EH_SE[*,1])/2d0
qmag0    = (test0.QMAG_SE[*,0] + test0.QMAG_SE[*,1])/2d0

date     = '082698'
tramp    = '1998-08-26/06:40:24.972'
vshn     = 687.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test1    = tdss_lhw_stats_read(DATE=date)
evn1     = test1.EVENT_N
scet1    = test1.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t1   = time_double(scet1) - time_double(tramp)
dist_1   = del_t1*vshn[0]
avg_lfk1 = (test1.K_ST_LOWF_MP + test1.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk1 = (test1.K_ST_highF_MP + test1.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql1   = test1.FREQ_LOW_HIGH[*,0]
freqh1   = test1.FREQ_LOW_HIGH[*,1]
thkbl1   = test1.THETA_KB[*,0] < (18d1 - test1.THETA_KB[*,0])
thkbh1   = test1.THETA_KB[*,1] < (18d1 - test1.THETA_KB[*,1])
thkvl1   = test1.THETA_KV[*,0] < (18d1 - test1.THETA_KV[*,0])
thkvh1   = test1.THETA_KV[*,1] < (18d1 - test1.THETA_KV[*,1])
pkamp1   = test1.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp1 = test1.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce1     = (test1.WCE_SE[*,0] + test1.WCE_SE[*,1])/2d0
wpe1     = (test1.WPE_SE[*,0] + test1.WPE_SE[*,1])/2d0
wlh1     = (test1.WLH_SE[*,0] + test1.WLH_SE[*,1])/2d0
vte1     = (test1.VTE_SE[*,0] + test1.VTE_SE[*,1])/2d0
rhoe1    = (test1.RHO_VTCE_SE[*,0] + test1.RHO_VTCE_SE[*,1])/2d0
vsw1     = (test1.VSW_ST + test1.VSW_EN)/2d0
vdr1     = (test1.VDRIFT_ST + test1.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf1    = (test1.MAGF_ST + test1.MAGF_EN)/2d0
dens1    = (test1.NE_SE[*,0] + test1.NE_SE[*,1])/2d0
bmag1    = SQRT(TOTAL(magf1^2,2L,/NAN))
betapa1  = (test1.BETA_PARCE_SE[*,0] + test1.BETA_PARCE_SE[*,1])/2d0
teavg1   = (test1.TE_AVG_SE[*,0] + test1.TE_AVG_SE[*,1])/2d0
tiavg1   = (test1.TI_AVG_SE[*,0] + test1.TI_AVG_SE[*,1])/2d0
tecavg1  = (test1.TEC_SE[*,0] + test1.TEC_SE[*,1])/2d0
tehavg1  = (test1.TEH_SE[*,0] + test1.TEH_SE[*,1])/2d0
tparc1   = (test1.TPAR_EC_SE[*,0] + test1.TPAR_EC_SE[*,1])/2d0
tperc1   = (test1.TPER_EC_SE[*,0] + test1.TPER_EC_SE[*,1])/2d0
tparh1   = (test1.TPAR_EH_SE[*,0] + test1.TPAR_EH_SE[*,1])/2d0
tperh1   = (test1.TPER_EH_SE[*,0] + test1.TPER_EH_SE[*,1])/2d0
qmag1    = (test1.QMAG_SE[*,0] + test1.QMAG_SE[*,1])/2d0

date     = '092498'
tramp    = '1998-09-24/23:20:37.374'
vshn     = 772.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test2    = tdss_lhw_stats_read(DATE=date)
evn2     = test2.EVENT_N
scet2    = test2.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t2   = time_double(scet2) - time_double(tramp)
dist_2   = del_t2*vshn[0]
avg_lfk2 = (test2.K_ST_LOWF_MP + test2.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk2 = (test2.K_ST_highF_MP + test2.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql2   = test2.FREQ_LOW_HIGH[*,0]
freqh2   = test2.FREQ_LOW_HIGH[*,1]
thkbl2   = test2.THETA_KB[*,0] < (18d1 - test2.THETA_KB[*,0])
thkbh2   = test2.THETA_KB[*,1] < (18d1 - test2.THETA_KB[*,1])
thkvl2   = test2.THETA_KV[*,0] < (18d1 - test2.THETA_KV[*,0])
thkvh2   = test2.THETA_KV[*,1] < (18d1 - test2.THETA_KV[*,0])
pkamp2   = test2.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp2 = test2.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce2     = (test2.WCE_SE[*,0] + test2.WCE_SE[*,1])/2d0
wpe2     = (test2.WPE_SE[*,0] + test2.WPE_SE[*,1])/2d0
wlh2     = (test2.WLH_SE[*,0] + test2.WLH_SE[*,1])/2d0
vte2     = (test2.VTE_SE[*,0] + test2.VTE_SE[*,1])/2d0
rhoe2    = (test2.RHO_VTCE_SE[*,0] + test2.RHO_VTCE_SE[*,1])/2d0
vsw2     = (test2.VSW_ST + test2.VSW_EN)/2d0
vdr2     = (test2.VDRIFT_ST + test2.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf2    = (test2.MAGF_ST + test2.MAGF_EN)/2d0
dens2    = (test2.NE_SE[*,0] + test2.NE_SE[*,1])/2d0
bmag2    = SQRT(TOTAL(magf2^2,2L,/NAN))
betapa2  = (test2.BETA_PARCE_SE[*,0] + test2.BETA_PARCE_SE[*,1])/2d0
teavg2   = (test2.TE_AVG_SE[*,0] + test2.TE_AVG_SE[*,1])/2d0
tiavg2   = (test2.TI_AVG_SE[*,0] + test2.TI_AVG_SE[*,1])/2d0
tecavg2  = (test2.TEC_SE[*,0] + test2.TEC_SE[*,1])/2d0
tehavg2  = (test2.TEH_SE[*,0] + test2.TEH_SE[*,1])/2d0
tparc2   = (test2.TPAR_EC_SE[*,0] + test2.TPAR_EC_SE[*,1])/2d0
tperc2   = (test2.TPER_EC_SE[*,0] + test2.TPER_EC_SE[*,1])/2d0
tparh2   = (test2.TPAR_EH_SE[*,0] + test2.TPAR_EH_SE[*,1])/2d0
tperh2   = (test2.TPER_EH_SE[*,0] + test2.TPER_EH_SE[*,1])/2d0
qmag2    = (test2.QMAG_SE[*,0] + test2.QMAG_SE[*,1])/2d0

date     = '021100'
tramp    = '2000-02-11/23:33:55.319'
vshn     = 641.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test3    = tdss_lhw_stats_read(DATE=date)
evn3     = test3.EVENT_N
scet3    = test3.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t3   = time_double(scet3) - time_double(tramp)
dist_3   = del_t3*vshn[0]
avg_lfk3 = (test3.K_ST_LOWF_MP + test3.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk3 = (test3.K_ST_highF_MP + test3.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql3   = test3.FREQ_LOW_HIGH[*,0]
freqh3   = test3.FREQ_LOW_HIGH[*,1]
thkbl3   = test3.THETA_KB[*,0] < (18d1 - test3.THETA_KB[*,0])
thkbh3   = test3.THETA_KB[*,1] < (18d1 - test3.THETA_KB[*,1])
thkvl3   = test3.THETA_KV[*,0] < (18d1 - test3.THETA_KV[*,0])
thkvh3   = test3.THETA_KV[*,1] < (18d1 - test3.THETA_KV[*,1])
pkamp3   = test3.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp3 = test3.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce3     = (test3.WCE_SE[*,0] + test3.WCE_SE[*,1])/2d0
wpe3     = (test3.WPE_SE[*,0] + test3.WPE_SE[*,1])/2d0
wlh3     = (test3.WLH_SE[*,0] + test3.WLH_SE[*,1])/2d0
vte3     = (test3.VTE_SE[*,0] + test3.VTE_SE[*,1])/2d0
rhoe3    = (test3.RHO_VTCE_SE[*,0] + test3.RHO_VTCE_SE[*,1])/2d0
vsw3     = (test3.VSW_ST + test3.VSW_EN)/2d0
vdr3     = (test3.VDRIFT_ST + test3.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf3    = (test3.MAGF_ST + test3.MAGF_EN)/2d0
dens3    = (test3.NE_SE[*,0] + test3.NE_SE[*,1])/2d0
bmag3    = SQRT(TOTAL(magf3^2,2L,/NAN))
betapa3  = (test3.BETA_PARCE_SE[*,0] + test3.BETA_PARCE_SE[*,1])/3d0
teavg3   = (test3.TE_AVG_SE[*,0] + test3.TE_AVG_SE[*,1])/3d0
tiavg3   = (test3.TI_AVG_SE[*,0] + test3.TI_AVG_SE[*,1])/3d0
tecavg3  = (test3.TEC_SE[*,0] + test3.TEC_SE[*,1])/3d0
tehavg3  = (test3.TEH_SE[*,0] + test3.TEH_SE[*,1])/3d0
tparc3   = (test3.TPAR_EC_SE[*,0] + test3.TPAR_EC_SE[*,1])/3d0
tperc3   = (test3.TPER_EC_SE[*,0] + test3.TPER_EC_SE[*,1])/3d0
tparh3   = (test3.TPAR_EH_SE[*,0] + test3.TPAR_EH_SE[*,1])/3d0
tperh3   = (test3.TPER_EH_SE[*,0] + test3.TPER_EH_SE[*,1])/3d0
qmag3    = (test3.QMAG_SE[*,0] + test3.QMAG_SE[*,1])/3d0
;-----------------------------------------------------------------------------------------
; => Combine terms
;-----------------------------------------------------------------------------------------
evns     = [evn0,evn1,evn2,evn3]
pkamps   = [pkamp0,pkamp1,pkamp2,pkamp3]/2d0      ; => change from Peak-to-Peak to Peak
filtamp  = [ftpkamp0,ftpkamp1,ftpkamp2,ftpkamp3]  ; => Filtered amplitudes
dist_r   = [dist_0,dist_1,dist_2,dist_3]          ; => normal distance from shock ramp (km)

thkbl    = [thkbl0,thkbl1,thkbl2,thkbl3]          ; => Theta_kB (deg) [low  freq. end of bandpass]
thkvl    = [thkvl0,thkvl1,thkvl2,thkvl3]          ; => Theta_kV (deg) [low  freq. end of bandpass]
thkbh    = [thkbh0,thkbh1,thkbh2,thkbh3]          ; => Theta_kB (deg) [high freq. end of bandpass]
thkvh    = [thkvh0,thkvh1,thkvh2,thkvh3]          ; => Theta_kV (deg) [high freq. end of bandpass]
vsw      = [vsw0,vsw1,vsw2,vsw3]                  ; => PL solar wind velocity (km/s) [GSE]
vmag     = SQRT(TOTAL(vsw^2,2L,/NAN))
vdrft    = [vdr0,vdr1,vdr2,vdr3]                  ; => (Vsw - Ve) (km/s) [SC-Frame]
vdrmg    = SQRT(TOTAL(vdrft^2,2L,/NAN))
freql    = [freql0,freql1,freql2,freql3]          ; => (Hz) low  freq. end of bandpass
freqh    = [freqh0,freqh1,freqh2,freqh3]          ; => (Hz) high freq. end of bandpass
wce      = [wce0,wce1,wce2,wce3]                  ; => Electron cyclotron frequency (rad/s)
wcp      = wce*me/mp                              ; => Proton   cyclotron frequency (rad/s)
wpe      = [wpe0,wpe1,wpe2,wpe3]                  ; => Electron plasma    frequency (rad/s)
wlh      = [wlh0,wlh1,wlh2,wlh3]                  ; => ES lower hybrid resonance frequency (rad/s)
vte      = [vte0,vte1,vte2,vte3]                  ; => Electron thermal speed (km/s)
rhoe     = [rhoe0,rhoe1,rhoe2,rhoe3]              ; => Electron thermal gyroradius (km)
rhop     = rhoe*SQRT(mp/me)                       ; => Proton thermal gyroradius (km)
avg_lfk  = [avg_lfk0,avg_lfk1,avg_lfk2,avg_lfk3]  ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk  = [avg_hfk0,avg_hfk1,avg_hfk2,avg_hfk3]  ; => [Avg. |k| from high freq. end of bandpass]
dens     = [dens0,dens1,dens2,dens3]              ; => Electron density [cm^(-3)] from TNR
bmag     = [bmag0,bmag1,bmag2,bmag3]              ; => Magnitude of the B-field (nT)

beta_pac = [betapa0,betapa1,betapa2,betapa3]      ; => core para. electron beta
teavg    = [teavg0,teavg1,teavg2,teavg3]          ; => EL electron avg. temp (eV)
tiavg    = [tiavg0,tiavg1,tiavg2,tiavg3]          ; => PL ion avg. temp (eV)
tecavg   = [tecavg0,tecavg1,tecavg2,tecavg3]      ; => core avg.  temp (eV)
tehavg   = [tehavg0,tehavg1,tehavg2,tehavg3]      ; => halo avg.  temp (eV)
tparc    = [tparc0,tparc1,tparc2,tparc3]          ; => core para. temp (eV)
tperc    = [tperc0,tperc1,tperc2,tperc3]          ; => core perp. temp (eV)
tparh    = [tparh0,tparh1,tparh2,tparh3]          ; => halo para. temp (eV)
tperh    = [tperh0,tperh1,tperh2,tperh3]          ; => halo perp. temp (eV)
qmag     = [qmag0,qmag1,qmag2,qmag3]              ; => heat flux magnitude [eV km/s cm^(-3)]

; => Calc. temperature ratios
te_tiav  = teavg/tiavg
tanis_c  = tperc/tparc
tanis_h  = tperh/tparh
thc_par  = tparh/tparc
thc_per  = tperh/tperc
tehc_avg = tehavg/tecavg

; => Estimate current density [nA m^(-2)]
;     1d3 => converts speed to   [m/s]
;     1d6 => converts density to [m^(-3)]
;     1d9 => converts units to [nA m^(-2)] from [A m^(-2)]
jdrft    = qq*(vdrmg*1d3)*(dens*1d6)*1d9

; => Normalize the drift speed by the ion thermal speed
vdrvti   = vdrmg/(vte*SQRT(me/mp)*1d-3)

; => Normalize the wave number by the electron inertial length
kcwpelfm = avg_lfk[*,0]*c*1d-3/wpe
kcwpelfp = avg_lfk[*,1]*c*1d-3/wpe
kcwpehfm = avg_hfk[*,0]*c*1d-3/wpe
kcwpehfp = avg_hfk[*,1]*c*1d-3/wpe

; => Normalize the wave number by the electron thermal gyroradius
krhoelfm = avg_lfk[*,0]*rhoe
krhoelfp = avg_lfk[*,1]*rhoe
krhoehfm = avg_hfk[*,0]*rhoe
krhoehfp = avg_hfk[*,1]*rhoe
;---------------------------------------------------------------------
; => Wave number estimates from:
;
; => Calculations of Eq. 4 from Coroniti et al., [1982]
;  Coroniti, F. V., C. F. Kennel, F. L. Scarf, and E. J. Smith (1982),
;    Whistler mode turbulence in the disturbed solar wind, J. Geophys.
;    Res., 87, 6029–6044, doi:10.1029/JA087iA08p06029.
;---------------------------------------------------------------------
; => Separate by plus and minus sign
avg_lfkm = avg_lfk[*,0]  ; => [Avg. |k| (- sign) from low  freq. end of bandpass]
avg_lfkp = avg_lfk[*,1]  ; => [Avg. |k| (+ sign) from low  freq. end of bandpass]
avg_hfkm = avg_hfk[*,0]  ; => [Avg. |k| (- sign) from high freq. end of bandpass]
avg_hfkp = avg_hfk[*,1]  ; => [Avg. |k| (+ sign) from high freq. end of bandpass]
; => Calculate rest frame frequencies
ckm        = (c*1d-3)
fac0l      = wce*COS(thkbl*!DPI/18d1)
fac0h      = wce*COS(thkbh*!DPI/18d1)
fac1lm     = (wpe/(ckm*avg_lfkm))^2
fac1lp     = (wpe/(ckm*avg_lfkp))^2
fac1hm     = (wpe/(ckm*avg_hfkm))^2
fac1hp     = (wpe/(ckm*avg_hfkp))^2
frest_lfkm = fac0l/(1d0 + fac1lm)  ; => Rest frame freq. (rad/s) [|k| (- sign) from low  freq. end of bandpass]
frest_lfkp = fac0l/(1d0 + fac1lp)  ; => Rest frame freq. (rad/s) [|k| (+ sign) from low  freq. end of bandpass]
frest_hfkm = fac0h/(1d0 + fac1hm)  ; => Rest frame freq. (rad/s) [|k| (- sign) from high freq. end of bandpass]
frest_hfkp = fac0h/(1d0 + fac1hp)  ; => Rest frame freq. (rad/s) [|k| (+ sign) from high freq. end of bandpass]


xda0       = vmag
unq        = UNIQ(xda0,SORT(xda0))
xda0       = xda0[unq]
guq        = N_ELEMENTS(xda0)
avg_frlm   = REPLICATE(d,guq)
avg_frlp   = REPLICATE(d,guq)
avg_frhm   = REPLICATE(d,guq)
avg_frhp   = REPLICATE(d,guq)
std_frlm   = REPLICATE(d,guq)
std_frlp   = REPLICATE(d,guq)
std_frhm   = REPLICATE(d,guq)
std_frhp   = REPLICATE(d,guq)

FOR j=0L, guq - 1L DO BEGIN $
  good0  = WHERE(vmag EQ xda0[j],gd0)                              & $
  IF (gd0 GT 0) THEN avg_frlm[j] = MEAN(frest_lfkm[good0],/NAN)    & $
  IF (gd0 GT 0) THEN avg_frlp[j] = MEAN(frest_lfkp[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_frlm[j] = STDDEV(frest_lfkm[good0],/NAN)  & $
  IF (gd0 GT 0) THEN std_frlp[j] = STDDEV(frest_lfkp[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_frlm[j] = 1d-1*avg_frlm[j]                & $
  IF (gd0 EQ 1) THEN std_frlp[j] = 1d-1*avg_frlp[j]                & $
  IF (gd0 GT 0) THEN avg_frhm[j] = MEAN(frest_hfkm[good0],/NAN)    & $
  IF (gd0 GT 0) THEN avg_frhp[j] = MEAN(frest_hfkp[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_frhm[j] = STDDEV(frest_hfkm[good0],/NAN)  & $
  IF (gd0 GT 0) THEN std_frhp[j] = STDDEV(frest_hfkp[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_frhm[j] = 1d-1*avg_frhm[j]                & $
  IF (gd0 EQ 1) THEN std_frhp[j] = 1d-1*avg_frhp[j]



xran       = [3d2,75d1]
yran       = [1d-1,1.5d3]
xttl       = '|V!Dsw!N'+'| [km/s]'
yttl       = 'Rest Frame Frequency [Hz]'

pstr02     = {XRANGE:xran,YRANGE:yran,XSTYLE:1,YSTYLE:1,XTITLE:xttl,YTITLE:yttl,NODATA:1}
yda0       = avg_frlm
ydal0      = (avg_frlm - std_frlm)
ydah0      = (avg_frlm + std_frlm)
badl       = WHERE(ydal0 LT yran[0],bdl)
badh       = WHERE(ydah0 GT yran[1],bdh)
IF (bdl GT 0) THEN ydal0[badl] = yran[0]
IF (bdh GT 0) THEN ydah0[badh] = yran[1]
yda2       = avg_frhm
ydal2      = (avg_frhm - std_frhm)
ydah2      = (avg_frhm + std_frhm)
badl       = WHERE(ydal2 LT yran[0],bdl)
badh       = WHERE(ydah2 GT yran[1],bdh)
IF (bdl GT 0) THEN ydal2[badl] = yran[0]
IF (bdh GT 0) THEN ydah2[badh] = yran[1]


yran       = [5d0,1.5d3]
pstr13     = {XRANGE:xran,YRANGE:yran,XSTYLE:1,YSTYLE:1,XTITLE:xttl,YTITLE:yttl,NODATA:1}
yda1       = avg_frlp
ydal1      = (avg_frlp - std_frlp)
ydah1      = (avg_frlp + std_frlp)
badl       = WHERE(ydal1 LT yran[0],bdl)
badh       = WHERE(ydah1 GT yran[1],bdh)
IF (bdl GT 0) THEN ydal1[badl] = yran[0]
IF (bdh GT 0) THEN ydah1[badh] = yran[1]
yda3       = avg_frhp
ydal3      = (avg_frhp - std_frhp)
ydah3      = (avg_frhp + std_frhp)
badl       = WHERE(ydal3 LT yran[0],bdl)
badh       = WHERE(ydah3 GT yran[1],bdh)
IF (bdl GT 0) THEN ydal3[badl] = yran[0]
IF (bdh GT 0) THEN ydah3[badh] = yran[1]
xposi      = 4d2
yposi      = [1d3,5d2,1d2,1d1]

WSET,2
  PLOT,xda0,yda0,_EXTRA=pstr02,YLOG=1,YMINOR=9
    OPLOT,xda0,yda0,PSYM=2,COLOR=250
    ERRPLOT,xda0,ydal0,ydah0,/DATA,COLOR=250
    OPLOT,xda0,yda2,PSYM=2,COLOR=150
    ERRPLOT,xda0,ydal2,ydah2,/DATA,COLOR=150
    XYOUTS,4d2,5d2,'* = Low  Freq. - Sign',/DATA,COLOR=250
    XYOUTS,4d2,1d2,'* = High Freq. - Sign',/DATA,COLOR=150

WSET,2
  PLOT,xda0,yda0,_EXTRA=pstr13,YLOG=1,YMINOR=9
    OPLOT,xda0,yda1,PSYM=2,COLOR=200
    ERRPLOT,xda0,ydal1,ydah1,/DATA,COLOR=200
    OPLOT,xda0,yda3,PSYM=2,COLOR= 50
    ERRPLOT,xda0,ydal3,ydah3,/DATA,COLOR= 50
    XYOUTS,4d2,5d2,'* = Low  Freq. + Sign',/DATA,COLOR=200
    XYOUTS,4d2,1d2,'* = High Freq. + Sign',/DATA,COLOR= 50


;---------------------------------------------------------------------
; => stats 
;---------------------------------------------------------------------
good_fm    = WHERE(frest_lfkm GT frest_hfkm,gdfm,COMPLEMENT=bad_fm,NCOMPLEMENT=bdfm)
good_fp    = WHERE(frest_lfkp GT frest_hfkp,gdfp,COMPLEMENT=bad_fp,NCOMPLEMENT=bdfp)
PRINT,'; ',gdfm,gdfp,bdfm,bdfp
;            0          30         431         401
frest_avm  = (frest_lfkm > frest_hfkm)
frest_avp  = (frest_lfkp > frest_hfkp)

frest_avm           = frest_avm
frest_avp[good_fp]  = 0d0        ; => get rid of bad solutions where lower fsc causes larger f+

glwh_lb    = WHERE(frest_avm LE wlh AND frest_avp LE wlh,gdhlb,COMPLEMENT=blhw_lb,NCOMPLEMENT=bdhlb)
gwhi_lb    = WHERE(frest_avm GT wlh AND frest_avp GT wlh,gdwlb,COMPLEMENT=bwhi_lb,NCOMPLEMENT=bdwlb)
PRINT,'; ',gdhlb,gdwlb,bdhlb,bdwlb
;           45         216         386         215

good_lhw   = glwh_lb
good_whi   = gwhi_lb
bad_lhw    = blhw_lb
bad_whi    = bwhi_lb


HELP, WHERE(thkbl[good_lhw] GE 30. AND thkbh[good_lhw] GE 30.), $
      WHERE(thkbl[good_lhw] GE 45. AND thkbh[good_lhw] GE 45.), $
      WHERE(thkbl[good_lhw] GE 75. AND thkbh[good_lhw] GE 75.)
;  <Expression>    LONG      = Array[35]
;  <Expression>    LONG      = Array[31]
;  <Expression>    LONG      = Array[15]

HELP, WHERE(thkvl[good_lhw] GE 30. AND thkvh[good_lhw] GE 30.), $
      WHERE(thkvl[good_lhw] GE 45. AND thkvh[good_lhw] GE 45.), $
      WHERE(thkvl[good_lhw] GE 75. AND thkvh[good_lhw] GE 75.)
;  <Expression>    LONG      = Array[24]
;  <Expression>    LONG      = Array[17]
;  <Expression>    LONG      = Array[9]

HELP, WHERE(thkbl[bad_lhw] GE 30. AND thkbh[bad_lhw] GE 30.), $
      WHERE(thkbl[bad_lhw] GE 45. AND thkbh[bad_lhw] GE 45.), $
      WHERE(thkbl[bad_lhw] GE 75. AND thkbh[bad_lhw] GE 75.)
;  <Expression>    LONG      = Array[155]
;  <Expression>    LONG      = Array[117]
;  <Expression>    LONG      = Array[46]

HELP, WHERE(thkvl[bad_lhw] GE 30. AND thkvh[bad_lhw] GE 30.), $
      WHERE(thkvl[bad_lhw] GE 45. AND thkvh[bad_lhw] GE 45.), $
      WHERE(thkvl[bad_lhw] GE 75. AND thkvh[bad_lhw] GE 75.)
;  <Expression>    LONG      = Array[339]
;  <Expression>    LONG      = Array[300]
;  <Expression>    LONG      = Array[91]



HELP, WHERE(thkbl[good_whi] GE 30. AND thkbh[good_whi] GE 30.), $
      WHERE(thkbl[good_whi] GE 45. AND thkbh[good_whi] GE 45.), $
      WHERE(thkbl[good_whi] GE 75. AND thkbh[good_whi] GE 75.)
;  <Expression>    LONG      = Array[22]
;  <Expression>    LONG      = Array[14]
;  <Expression>    LONG      = Array[1]

HELP, WHERE(thkvl[good_whi] GE 30. AND thkvh[good_whi] GE 30.), $
      WHERE(thkvl[good_whi] GE 45. AND thkvh[good_whi] GE 45.), $
      WHERE(thkvl[good_whi] GE 75. AND thkvh[good_whi] GE 75.)
;  <Expression>    LONG      = Array[216]
;  <Expression>    LONG      = Array[213]
;  <Expression>    LONG      = Array[87]

HELP, WHERE(thkbl[bad_whi] GE 30. AND thkbh[bad_whi] GE 30.), $
      WHERE(thkbl[bad_whi] GE 45. AND thkbh[bad_whi] GE 45.), $
      WHERE(thkbl[bad_whi] GE 75. AND thkbh[bad_whi] GE 75.)
;  <Expression>    LONG      = Array[168]
;  <Expression>    LONG      = Array[134]
;  <Expression>    LONG      = Array[60]

HELP, WHERE(thkvl[bad_whi] GE 30. AND thkvh[bad_whi] GE 30.), $
      WHERE(thkvl[bad_whi] GE 45. AND thkvh[bad_whi] GE 45.), $
      WHERE(thkvl[bad_whi] GE 75. AND thkvh[bad_whi] GE 75.)
;  <Expression>    LONG      = Array[147]
;  <Expression>    LONG      = Array[104]
;  <Expression>    LONG      = Array[13]

;-----------------------------------------------------------------------------------------
; => 
;-----------------------------------------------------------------------------------------
; => stats 
good_fm    = WHERE(frest_lfkm GT frest_hfkm,gdfm,COMPLEMENT=bad_fm,NCOMPLEMENT=bdfm)
good_fp    = WHERE(frest_lfkp GT frest_hfkp,gdfp,COMPLEMENT=bad_fp,NCOMPLEMENT=bdfp)
PRINT,'; ',gdfm,gdfp,bdfm,bdfp
;            0          30         431         401
frest_avm  = (frest_lfkm > frest_hfkm)
frest_avp  = (frest_lfkp > frest_hfkp)

frest_avm           = frest_avm
frest_avp[good_fp]  = 0d0        ; => get rid of bad solutions where lower fsc causes larger f+

glhw_lm    = WHERE(frest_avm LE wlh,gdlhwm,COMPLEMENT=blhw_lm,NCOMPLEMENT=bdlhwm)
glhw_lp    = WHERE(frest_avp LE wlh,gdlhwp,COMPLEMENT=blhw_lp,NCOMPLEMENT=bdlhwp)
gwhi_lm    = WHERE(frest_avm GT wlh,gdwhim,COMPLEMENT=bwhi_lm,NCOMPLEMENT=bdwhim)
gwhi_lp    = WHERE(frest_avp GT wlh,gdwhip,COMPLEMENT=bwhi_lp,NCOMPLEMENT=bdwhip)
PRINT,'; ',gdlhwm,gdwhim,gdlhwp,gdwhip
;          215         216          45         369

gels       = glhw_lm     ; => out of 215
HELP, WHERE(thkbl[gels] GE 30. AND thkbh[gels] GE 30.), $
      WHERE(thkbl[gels] GE 45. AND thkbh[gels] GE 45.), $
      WHERE(thkbl[gels] GE 75. AND thkbh[gels] GE 75.)
;  <Expression>    LONG      = Array[168]
;  <Expression>    LONG      = Array[134]
;  <Expression>    LONG      = Array[60]

HELP, WHERE(thkvl[gels] GE 30. AND thkvh[gels] GE 30.), $
      WHERE(thkvl[gels] GE 45. AND thkvh[gels] GE 45.), $
      WHERE(thkvl[gels] GE 75. AND thkvh[gels] GE 75.)
;  <Expression>    LONG      = Array[147]
;  <Expression>    LONG      = Array[104]
;  <Expression>    LONG      = Array[13]

gels       = glhw_lp     ; => out of 45
HELP, WHERE(thkbl[gels] GE 30. AND thkbh[gels] GE 30.), $
      WHERE(thkbl[gels] GE 45. AND thkbh[gels] GE 45.), $
      WHERE(thkbl[gels] GE 75. AND thkbh[gels] GE 75.)
;  <Expression>    LONG      = Array[35]
;  <Expression>    LONG      = Array[31]
;  <Expression>    LONG      = Array[15]

HELP, WHERE(thkvl[gels] GE 30. AND thkvh[gels] GE 30.), $
      WHERE(thkvl[gels] GE 45. AND thkvh[gels] GE 45.), $
      WHERE(thkvl[gels] GE 75. AND thkvh[gels] GE 75.)
;  <Expression>    LONG      = Array[24]
;  <Expression>    LONG      = Array[17]
;  <Expression>    LONG      = Array[9]

gels       = gwhi_lm     ; => out of 216
HELP, WHERE(thkbl[gels] LT 30. AND thkbh[gels] LT 30.), $
      WHERE(thkbl[gels] LT 45. AND thkbh[gels] LT 45.), $
      WHERE(thkbl[gels] LT 75. AND thkbh[gels] LT 75.)
;  <Expression>    LONG      = Array[183]
;  <Expression>    LONG      = Array[197]
;  <Expression>    LONG      = Array[213]

HELP, WHERE(thkvl[gels] LT 30. AND thkvh[gels] LT 30.), $
      WHERE(thkvl[gels] LT 45. AND thkvh[gels] LT 45.), $
      WHERE(thkvl[gels] LT 75. AND thkvh[gels] LT 75.)
;  <Expression>    LONG      =           -1
;  <Expression>    LONG      = Array[3]
;  <Expression>    LONG      = Array[129]

gels       = gwhi_lp     ; => out of 369
HELP, WHERE(thkbl[gels] LT 30. AND thkbh[gels] LT 30.), $
      WHERE(thkbl[gels] LT 45. AND thkbh[gels] LT 45.), $
      WHERE(thkbl[gels] LT 75. AND thkbh[gels] LT 75.)
;  <Expression>    LONG      = Array[214]
;  <Expression>    LONG      = Array[263]
;  <Expression>    LONG      = Array[325]

HELP, WHERE(thkvl[gels] LT 30. AND thkvh[gels] LT 30.), $
      WHERE(thkvl[gels] LT 45. AND thkvh[gels] LT 45.), $
      WHERE(thkvl[gels] LT 75. AND thkvh[gels] LT 75.)
;  <Expression>    LONG      = Array[35]
;  <Expression>    LONG      = Array[70]
;  <Expression>    LONG      = Array[278]


;-----------------------------------------------------------------------------------------
thkbav     = (thkbl + thkbh)/2d0
thkvav     = (thkvl + thkvh)/2d0

gels       = glhw_lm     ; => out of 215
HELP, WHERE(thkbav[gels] GE 30.), WHERE(thkbav[gels] GE 45.), WHERE(thkbav[gels] GE 75.)
;  <Expression>    LONG      = Array[170]
;  <Expression>    LONG      = Array[135]
;  <Expression>    LONG      = Array[79]

HELP, WHERE(thkvav[gels] GE 30.), WHERE(thkvav[gels] GE 45.), WHERE(thkvav[gels] GE 75.)
;  <Expression>    LONG      = Array[148]
;  <Expression>    LONG      = Array[104]
;  <Expression>    LONG      = Array[13]

gels       = glhw_lp     ; => out of 45
HELP, WHERE(thkbav[gels] GE 30.), WHERE(thkbav[gels] GE 45.), WHERE(thkbav[gels] GE 75.)
;  <Expression>    LONG      = Array[35]
;  <Expression>    LONG      = Array[32]
;  <Expression>    LONG      = Array[26]

HELP, WHERE(thkvav[gels] GE 30.), WHERE(thkvav[gels] GE 45.), WHERE(thkvav[gels] GE 75.)
;  <Expression>    LONG      = Array[25]
;  <Expression>    LONG      = Array[17]
;  <Expression>    LONG      = Array[9]

gels       = gwhi_lm     ; => out of 216
HELP, WHERE(thkbav[gels] LT 30.), WHERE(thkbav[gels] LT 45.), WHERE(thkbav[gels] LT 75.)
;  <Expression>    LONG      = Array[187]
;  <Expression>    LONG      = Array[202]
;  <Expression>    LONG      = Array[215]

HELP, WHERE(thkvav[gels] LT 30.), WHERE(thkvav[gels] LT 45.), WHERE(thkvav[gels] LT 75.)
;  <Expression>    LONG      =           -1
;  <Expression>    LONG      = Array[3]
;  <Expression>    LONG      = Array[129]

gels       = gwhi_lp     ; => out of 369
HELP, WHERE(thkbav[gels] LT 30.), WHERE(thkbav[gels] LT 45.), WHERE(thkbav[gels] LT 75.)
;  <Expression>    LONG      = Array[222]
;  <Expression>    LONG      = Array[269]
;  <Expression>    LONG      = Array[332]

HELP, WHERE(thkvav[gels] LT 30.), WHERE(thkvav[gels] LT 45.), WHERE(thkvav[gels] LT 75.)
;  <Expression>    LONG      = Array[35]
;  <Expression>    LONG      = Array[70]
;  <Expression>    LONG      = Array[278]



gels       = glhw_lm     ; => out of 215
xdat       = thkbl[gels]
nb         = 7
xr         = [0d0,9d1]
WSET,0
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr


gels       = glhw_lm     ; => out of 215
xdat       = thkbh[gels]
nb         = 7
xr         = [0d0,9d1]
WSET,1
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
;-----------------------------------------------------------------------------------------
; => 
;-----------------------------------------------------------------------------------------
evns_lhw = [00010618L,00010684L,02013066L,02014864L,02015635L,02015691L,$
            02017428L,02018091L]
evns_mix = [03408599L,00010488L,02011249L,02011723L,02011820L,02013165L,$
            02015299L,02015304L,02015650L,02017555L,23145465L,23145474L,$
            23145484L]
evns_whi = [00010807L,00010832L,00010868L,00010881L,00010888L,00010895L,$
            00010923L,00010937L,23145603L,23145610L,23153276L,23154909L,$
            23155087L]
good_lhw = array_where(evns,evns_lhw,/N_UNIQ)
good_mix = array_where(evns,evns_mix,/N_UNIQ)
good_whi = array_where(evns,evns_whi,/N_UNIQ)
HELP, good_lhw, good_mix, good_whi
;  GOOD_LHW        LONG      = Array[54, 2]
;  GOOD_MIX        LONG      = Array[239, 2]
;  GOOD_WHI        LONG      = Array[138, 2]

good_lhw = good_lhw[*,0]
good_mix = good_mix[*,0]
good_whi = good_whi[*,0]

HELP, WHERE(thkbl[good_lhw] GE 45. AND thkbh[good_lhw] GE 45.), $
      WHERE(thkbl[good_lhw] GE 60. AND thkbh[good_lhw] GE 60.)
;  <Expression>    LONG      = Array[44]
;  <Expression>    LONG      = Array[37]
HELP, WHERE(thkvl[good_lhw] GE 45. AND thkvh[good_lhw] GE 45.), $
      WHERE(thkvl[good_lhw] GE 60. AND thkvh[good_lhw] GE 60.)
;  <Expression>    LONG      = Array[24]
;  <Expression>    LONG      = Array[13]


HELP, WHERE(thkbl[good_whi] GE 45. AND thkbh[good_whi] GE 45.), $
      WHERE(thkbl[good_whi] GE 60. AND thkbh[good_whi] GE 60.)
;  <Expression>    LONG      = Array[1]
;  <Expression>    LONG      =           -1
HELP, WHERE(thkvl[good_whi] GE 45. AND thkvh[good_whi] GE 45.), $
      WHERE(thkvl[good_whi] GE 60. AND thkvh[good_whi] GE 60.)
;  <Expression>    LONG      = Array[138]
;  <Expression>    LONG      = Array[90]


HELP, WHERE(thkbl[good_mix] GE 45. AND thkbh[good_mix] GE 45.), $
      WHERE(thkbl[good_mix] GE 60. AND thkbh[good_mix] GE 60.)
;  <Expression>    LONG      = Array[103]
;  <Expression>    LONG      = Array[75]
HELP, WHERE(thkvl[good_mix] GE 45. AND thkvh[good_mix] GE 45.), $
      WHERE(thkvl[good_mix] GE 60. AND thkvh[good_mix] GE 60.)
;  <Expression>    LONG      = Array[155]
;  <Expression>    LONG      = Array[91]

;-----------------------------------------------------------------------------------------
; => 
;-----------------------------------------------------------------------------------------
ndist0 = dist_0/(rhoe0*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist1 = dist_1/(rhoe1*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist2 = dist_2/(rhoe2*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist3 = dist_3/(rhoe3*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
bamp0  = ftpkamp0
bamp1  = ftpkamp1
bamp2  = ftpkamp2
bamp3  = ftpkamp3

xdat0  = ndist0
xdat1  = ndist1
xdat2  = ndist2
xdat3  = ndist3
ydat0  = bamp0
ydat1  = bamp1
ydat2  = bamp2
ydat3  = bamp3
yra    = [0.01,15.0]
xra    = [1d0,6d4]
xttl   = 'L!Dn!N (c/!7x!3'+'!Dpe!N'+')'
yttl   = 'Wave Amplitude'+'!C'+'[Filtered Peak, nT]'

pstr   = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl,NODATA:1,YLOG:1,$
          XLOG:1,YSTYLE:1,XSTYLE:1}
  PLOT,xdat0,ydat0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=5,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=5,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=5,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=5,COLOR= 50
    XYOUTS,200.,10.,/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,200.,8. ,/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,200.,6. ,/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,200.,4. ,/DATA,'2000-02-11 [All]',COLOR= 50

popen,'Wave-Amp_vs_Normal-Dist-cwpp_All-Events',/LAND
  PLOT,xdat0,ydat0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=5,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=5,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=5,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=5,COLOR= 50
    XYOUTS,200.,10.,/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,200.,8. ,/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,200.,6. ,/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,200.,4. ,/DATA,'2000-02-11 [All]',COLOR= 50
pclose


; => Look at avg. and std.
xdata    = [xdat0,xdat1,xdat2,xdat3]
ydata    = [ydat0,ydat1,ydat2,ydat3]
sp       = SORT(xdata)
xdata    = xdata[sp]
ydata    = ydata[sp]
unq      = UNIQ(xdata,SORT(xdata))
xdatau   = xdata[unq]
goodu    = array_where(xdata,xdatau,/N_UNIQ)
HELP, goodu
;  GOODU           LONG      = Array[431, 2]
un_good  = REFORM(goodu[*,0])
gdu      = N_ELEMENTS(xdatau)
avg_yda  = REPLICATE(d,gdu)       ; => Array of avg. Y-values for each X-value
std_yda  = REPLICATE(d,gdu)       ; => Array of std. dev. of Y-values for each X-value
FOR j=0L, gdu - 1L DO BEGIN                                  $
  good0      = WHERE(xdata EQ xdatau[j],gd0)               & $
  IF (gd0 GT 0) THEN avg_yda[j] = MEAN(ydata[good0],/NAN)  & $
  IF (gd0 GT 0) THEN std_yda[j] = STDDEV(ydata[good0],/NAN)

; => Determine y-ranges by high and low values
ylow   = avg_yda - std_yda
yhigh  = avg_yda + std_yda
bad    = WHERE(ylow LE 0d0,bd)
IF (bd GT 0) THEN ylow[bad] = 0.01

; => Create an array of colors to go along with data points
col_yda  = REPLICATE(0L,gdu)       ; => Array of colors for each X-value
good0    = array_where(xdat0,xdatau,/N_UNIQ)
good1    = array_where(xdat1,xdatau,/N_UNIQ)
good2    = array_where(xdat2,xdatau,/N_UNIQ)
good3    = array_where(xdat3,xdatau,/N_UNIQ)
HELP, good0, good1, good2, good3
;  GOOD0           LONG      = Array[32, 2]
;  GOOD1           LONG      = Array[119, 2]
;  GOOD2           LONG      = Array[172, 2]
;  GOOD3           LONG      = Array[108, 2]
IF (good0[0] GE 0) THEN good0 = good0[UNIQ(REFORM(good0[*,1]),SORT(REFORM(good0[*,1]))),1]
IF (good1[0] GE 0) THEN good1 = good1[UNIQ(REFORM(good1[*,1]),SORT(REFORM(good1[*,1]))),1]
IF (good2[0] GE 0) THEN good2 = good2[UNIQ(REFORM(good2[*,1]),SORT(REFORM(good2[*,1]))),1]
IF (good3[0] GE 0) THEN good3 = good3[UNIQ(REFORM(good3[*,1]),SORT(REFORM(good3[*,1]))),1]
HELP, good0, good1, good2, good3
;  GOOD0           LONG      =           31
;  GOOD1           LONG      = Array[11]
;  GOOD2           LONG      = Array[13]
;  GOOD3           LONG      = Array[8]
PRINT, minmax(good0), minmax(good1), minmax(good2), minmax(good3)
;           0           0
;           2          17
;           4          32
;           1          24
col_yda[good0] = 250         ;  1997-12-10 = Red
col_yda[good1] = 200         ;  1998-08-26 = Orange
col_yda[good2] = 150         ;  1998-09-24 = Green
col_yda[good3] =  50         ;  2000-02-11 = Blue

; => Define data for 1997-12-10
xdat0  = [xdatau[good0]]
ydatl0 = [ylow[good0]]
ydath0 = [yhigh[good0]]
ydat0  = [avg_yda[good0]]
; => Define data for 1998-08-26
xdat1  = xdatau[good1]
ydatl1 = ylow[good1]
ydath1 = yhigh[good1]
ydat1  = [avg_yda[good1]]
; => Define data for 1998-09-24
xdat2  = xdatau[good2]
ydatl2 = ylow[good2]
ydath2 = yhigh[good2]
ydat2  = [avg_yda[good2]]
; => Define data for 2000-02-11
xdat3  = xdatau[good3]
ydatl3 = ylow[good3]
ydath3 = yhigh[good3]
ydat3  = [avg_yda[good3]]

; => Plot results
yra    = [0.01,15.0]
xra    = [1d0,6d4]
xttl   = 'L!Dn!N (c/!7x!3'+'!Dpe!N'+')'
yttl   = 'Wave Amplitude'+'!C'+'[Filtered Peak, nT]'

pstr   = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl,NODATA:1,YLOG:1,$
          XLOG:1,YSTYLE:1,XSTYLE:1}
  PLOT,xdat0,ydatl0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl0,ydath0,/DATA,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl1,ydath1,/DATA,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl2,ydath2,/DATA,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl3,ydath3,/DATA,COLOR= 50
    XYOUTS,200.,10.,/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,200.,8. ,/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,200.,6. ,/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,200.,4. ,/DATA,'2000-02-11 [All]',COLOR= 50

popen,'Wave-Amp_vs_Normal-Dist-cwpp_Avg-per-unique-normal-dist_plusminus-STDDEV',/LAND
  PLOT,xdat0,ydatl0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl0,ydath0,/DATA,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl1,ydath1,/DATA,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl2,ydath2,/DATA,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl3,ydath3,/DATA,COLOR= 50
    XYOUTS,200.,10.,/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,200.,8. ,/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,200.,6. ,/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,200.,4. ,/DATA,'2000-02-11 [All]',COLOR= 50
pclose


;-----------------------------------------------------------------------------------------
; => Separate by wave type
;-----------------------------------------------------------------------------------------
ndist0 = dist_0/(rhoe0*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist1 = dist_1/(rhoe1*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist2 = dist_2/(rhoe2*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist3 = dist_3/(rhoe3*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
bamp0  = ftpkamp0
bamp1  = ftpkamp1
bamp2  = ftpkamp2
bamp3  = ftpkamp3
;evns     = [evn0,evn1,evn2,evn3]
evns_lhw = [00010618L,00010684L,02014864L,02015635L,02015691L,02017428L,$
            02018091L]
evns_mix = [03408599L,00010488L,02011249L,02011723L,02011820L,02013165L,$
            02015299L,02015304L,02015650L,02017555L,23145465L,23145474L,$
            23145484L]
evns_whi = [00010807L,00010832L,00010868L,00010881L,00010888L,00010895L,$
            00010923L,00010937L,23145603L,23145610L,23153276L,23154909L,$
            23155087L]
good_lhw0 = array_where(evn0,evns_lhw,/N_UNIQ)
good_mix0 = array_where(evn0,evns_mix,/N_UNIQ)
good_whi0 = array_where(evn0,evns_whi,/N_UNIQ)
good_lhw1 = array_where(evn1,evns_lhw,/N_UNIQ)
good_mix1 = array_where(evn1,evns_mix,/N_UNIQ)
good_whi1 = array_where(evn1,evns_whi,/N_UNIQ)
good_lhw2 = array_where(evn2,evns_lhw,/N_UNIQ)
good_mix2 = array_where(evn2,evns_mix,/N_UNIQ)
good_whi2 = array_where(evn2,evns_whi,/N_UNIQ)
good_lhw3 = array_where(evn3,evns_lhw,/N_UNIQ)
good_mix3 = array_where(evn3,evns_mix,/N_UNIQ)
good_whi3 = array_where(evn3,evns_whi,/N_UNIQ)

IF (good_lhw0[0] GE 0) THEN ndist0_lhw = ndist0[good_lhw0[*,0]] ELSE ndist0_lhw = [d]
IF (good_lhw1[0] GE 0) THEN ndist1_lhw = ndist1[good_lhw1[*,0]] ELSE ndist1_lhw = [d]
IF (good_lhw2[0] GE 0) THEN ndist2_lhw = ndist2[good_lhw2[*,0]] ELSE ndist2_lhw = [d]
IF (good_lhw3[0] GE 0) THEN ndist3_lhw = ndist3[good_lhw3[*,0]] ELSE ndist3_lhw = [d]

IF (good_lhw0[0] GE 0) THEN bamp0_lhw  = bamp0[good_lhw0[*,0]]  ELSE bamp0_lhw  = [d]
IF (good_lhw1[0] GE 0) THEN bamp1_lhw  = bamp1[good_lhw1[*,0]]  ELSE bamp1_lhw  = [d]
IF (good_lhw2[0] GE 0) THEN bamp2_lhw  = bamp2[good_lhw2[*,0]]  ELSE bamp2_lhw  = [d]
IF (good_lhw3[0] GE 0) THEN bamp3_lhw  = bamp3[good_lhw3[*,0]]  ELSE bamp3_lhw  = [d]

IF (good_whi0[0] GE 0) THEN ndist0_whi = ndist0[good_whi0[*,0]] ELSE ndist0_whi = [d]
IF (good_whi1[0] GE 0) THEN ndist1_whi = ndist1[good_whi1[*,0]] ELSE ndist1_whi = [d]
IF (good_whi2[0] GE 0) THEN ndist2_whi = ndist2[good_whi2[*,0]] ELSE ndist2_whi = [d]
IF (good_whi3[0] GE 0) THEN ndist3_whi = ndist3[good_whi3[*,0]] ELSE ndist3_whi = [d]

IF (good_whi0[0] GE 0) THEN bamp0_whi  = bamp0[good_whi0[*,0]]  ELSE bamp0_whi  = [d]
IF (good_whi1[0] GE 0) THEN bamp1_whi  = bamp1[good_whi1[*,0]]  ELSE bamp1_whi  = [d]
IF (good_whi2[0] GE 0) THEN bamp2_whi  = bamp2[good_whi2[*,0]]  ELSE bamp2_whi  = [d]
IF (good_whi3[0] GE 0) THEN bamp3_whi  = bamp3[good_whi3[*,0]]  ELSE bamp3_whi  = [d]

IF (good_mix0[0] GE 0) THEN ndist0_mix = ndist0[good_mix0[*,0]] ELSE ndist0_mix = [d]
IF (good_mix1[0] GE 0) THEN ndist1_mix = ndist1[good_mix1[*,0]] ELSE ndist1_mix = [d]
IF (good_mix2[0] GE 0) THEN ndist2_mix = ndist2[good_mix2[*,0]] ELSE ndist2_mix = [d]
IF (good_mix3[0] GE 0) THEN ndist3_mix = ndist3[good_mix3[*,0]] ELSE ndist3_mix = [d]

IF (good_mix0[0] GE 0) THEN bamp0_mix  = bamp0[good_mix0[*,0]]  ELSE bamp0_mix  = [d]
IF (good_mix1[0] GE 0) THEN bamp1_mix  = bamp1[good_mix1[*,0]]  ELSE bamp1_mix  = [d]
IF (good_mix2[0] GE 0) THEN bamp2_mix  = bamp2[good_mix2[*,0]]  ELSE bamp2_mix  = [d]
IF (good_mix3[0] GE 0) THEN bamp3_mix  = bamp3[good_mix3[*,0]]  ELSE bamp3_mix  = [d]

gf_lhw0  = WHERE(FINITE(bamp0_lhw),nlhw0)
gf_lhw1  = WHERE(FINITE(bamp1_lhw),nlhw1)
gf_lhw2  = WHERE(FINITE(bamp2_lhw),nlhw2)
gf_lhw3  = WHERE(FINITE(bamp3_lhw),nlhw3)
gf_whi0  = WHERE(FINITE(bamp0_whi),nwhi0)
gf_whi1  = WHERE(FINITE(bamp1_whi),nwhi1)
gf_whi2  = WHERE(FINITE(bamp2_whi),nwhi2)
gf_whi3  = WHERE(FINITE(bamp3_whi),nwhi3)
gf_mix0  = WHERE(FINITE(bamp0_mix),nmix0)
gf_mix1  = WHERE(FINITE(bamp1_mix),nmix1)
gf_mix2  = WHERE(FINITE(bamp2_mix),nmix2)
gf_mix3  = WHERE(FINITE(bamp3_mix),nmix3)

nlhwstr  = STRING(FORMAT='(I3.3)',[nlhw0,nlhw1,nlhw2,nlhw3])
nwhistr  = STRING(FORMAT='(I3.3)',[nwhi0,nwhi1,nwhi2,nwhi3])
nmixstr  = STRING(FORMAT='(I3.3)',[nmix0,nmix1,nmix2,nmix3])

fpref  = 'Wave-Amp_vs_Normal-Dist-cwpp_'
outspr = ['1997-12-10 ','1998-08-26 ','1998-09-24 ','2000-02-11 ']
yra    = [0.01,15.0]
xra    = [1d0,6d4]
xttl   = 'L!Dn!N (c/!7x!3'+'!Dpe!N'+')'

xdat0  = ndist0_lhw
xdat1  = ndist1_lhw
xdat2  = ndist2_lhw
xdat3  = ndist3_lhw
ydat0  = bamp0_lhw
ydat1  = bamp1_lhw
ydat2  = bamp2_lhw
ydat3  = bamp3_lhw
yttl   = 'Wave Amplitude [LHW-Only]'+'!C'+'[Filtered Peak, nT]'
fname  = fpref[0]+'LHW-Events'
outxy  = outspr+'['+nlhwstr+' LHW]'

xdat0  = ndist0_whi
xdat1  = ndist1_whi
xdat2  = ndist2_whi
xdat3  = ndist3_whi
ydat0  = bamp0_whi
ydat1  = bamp1_whi
ydat2  = bamp2_whi
ydat3  = bamp3_whi
yttl   = 'Wave Amplitude [WW-Only]'+'!C'+'[Filtered Peak, nT]'
fname  = fpref[0]+'WW-Events'
outxy  = outspr+'['+nwhistr+' WW]'

xdat0  = ndist0_mix
xdat1  = ndist1_mix
xdat2  = ndist2_mix
xdat3  = ndist3_mix
ydat0  = bamp0_mix
ydat1  = bamp1_mix
ydat2  = bamp2_mix
ydat3  = bamp3_mix
yttl   = 'Wave Amplitude [MIXED-Only]'+'!C'+'[Filtered Peak, nT]'
fname  = fpref[0]+'MIXED-Events'
outxy  = outspr+'['+nmixstr+' MIXED]'

pstr   = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl,NODATA:1,YLOG:1,$
          XLOG:1,YSTYLE:1,XSTYLE:1}
  PLOT,xdat0,ydat0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=5,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=5,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=5,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=5,COLOR= 50
    XYOUTS,200.,10.,/DATA,outxy[0],COLOR=250
    XYOUTS,200.,8. ,/DATA,outxy[1],COLOR=200
    XYOUTS,200.,6. ,/DATA,outxy[2],COLOR=150
    XYOUTS,200.,4. ,/DATA,outxy[3],COLOR= 50

popen,fname[0],/LAND
  PLOT,xdat0,ydat0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=5,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=5,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=5,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=5,COLOR= 50
    XYOUTS,200.,10.,/DATA,outxy[0],COLOR=250
    XYOUTS,200.,8. ,/DATA,outxy[1],COLOR=200
    XYOUTS,200.,6. ,/DATA,outxy[2],COLOR=150
    XYOUTS,200.,4. ,/DATA,outxy[3],COLOR= 50
pclose


;-----------------------------------------------------------------------------------------
; => Separate by wave type and then Avg. [All Freqs]
;-----------------------------------------------------------------------------------------
xdat_lhw = [ndist0_lhw,ndist1_lhw,ndist2_lhw,ndist3_lhw]
xdat_whi = [ndist0_whi,ndist1_whi,ndist2_whi,ndist3_whi]
xdat_mix = [ndist0_mix,ndist1_mix,ndist2_mix,ndist3_mix]
ydat_lhw = [bamp0_lhw,bamp1_lhw,bamp2_lhw,bamp3_lhw]
ydat_whi = [bamp0_whi,bamp1_whi,bamp2_whi,bamp3_whi]
ydat_mix = [bamp0_mix,bamp1_mix,bamp2_mix,bamp3_mix]

; => Define elements for LHW
sp        = SORT(xdat_lhw)
xdatlhw   = xdat_lhw[sp]
ydatlhw   = ydat_lhw[sp]
unq       = UNIQ(xdatlhw,SORT(xdatlhw))
xlhwu     = xdatlhw[unq]
gdlhw     = N_ELEMENTS(xlhwu)
avg_ydlhw = REPLICATE(d,gdlhw)       ; => Array of avg. Y-values for each X-value
std_ydlhw = REPLICATE(d,gdlhw)       ; => Array of std. dev. of Y-values for each X-value
; => Calculate elements for LHW
FOR j=0L, gdlhw - 1L DO BEGIN                                      $
  good0      = WHERE(xdatlhw EQ xlhwu[j],gd0)                    & $
  IF (gd0 GT 0) THEN avg_ydlhw[j] = MEAN(ydatlhw[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_ydlhw[j] = STDDEV(ydatlhw[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_ydlhw[j] = 1d-1*avg_ydlhw[j]
; => Determine y-ranges by high and low values
ylowlhw  = avg_ydlhw - std_ydlhw
yhighlhw = avg_ydlhw + std_ydlhw
bad      = WHERE(ylowlhw LE 0d0,bd)
IF (bd GT 0) THEN ylowlhw[bad] = 0.01
good0lhw = array_where(ndist0_lhw,xlhwu,/N_UNIQ)
good1lhw = array_where(ndist1_lhw,xlhwu,/N_UNIQ)
good2lhw = array_where(ndist2_lhw,xlhwu,/N_UNIQ)
good3lhw = array_where(ndist3_lhw,xlhwu,/N_UNIQ)
HELP, good0lhw, good1lhw, good2lhw, good3lhw
;  GOOD0LHW        INT       =       -1
;  GOOD1LHW        LONG      = Array[9, 2]
;  GOOD2LHW        LONG      = Array[45, 2]
;  GOOD3LHW        INT       =       -1
;  
IF (good0lhw[0] GE 0) THEN good0lhw = good0lhw[UNIQ(REFORM(good0lhw[*,1]),SORT(REFORM(good0lhw[*,1]))),1] ELSE good0lhw = -1
IF (good1lhw[0] GE 0) THEN good1lhw = good1lhw[UNIQ(REFORM(good1lhw[*,1]),SORT(REFORM(good1lhw[*,1]))),1] ELSE good1lhw = -1
IF (good2lhw[0] GE 0) THEN good2lhw = good2lhw[UNIQ(REFORM(good2lhw[*,1]),SORT(REFORM(good2lhw[*,1]))),1] ELSE good2lhw = -1
IF (good3lhw[0] GE 0) THEN good3lhw = good3lhw[UNIQ(REFORM(good3lhw[*,1]),SORT(REFORM(good3lhw[*,1]))),1] ELSE good3lhw = -1
HELP, good0lhw, good1lhw, good2lhw, good3lhw
;  GOOD0LHW        INT       =       -1
;  GOOD1LHW        LONG      = Array[2]
;  GOOD2LHW        LONG      = Array[5]
;  GOOD3LHW        INT       =       -1

; => Define elements for WW
sp        = SORT(xdat_whi)
xdatwhi   = xdat_whi[sp]
ydatwhi   = ydat_whi[sp]
unq       = UNIQ(xdatwhi,SORT(xdatwhi))
xwhiu     = xdatwhi[unq]
gdwhi     = N_ELEMENTS(xwhiu)
avg_ydwhi = REPLICATE(d,gdwhi)       ; => Array of avg. Y-values for each X-value
std_ydwhi = REPLICATE(d,gdwhi)       ; => Array of std. dev. of Y-values for each X-value
; => Calculate elements for WW
FOR j=0L, gdwhi - 1L DO BEGIN                                      $
  good0      = WHERE(xdatwhi EQ xwhiu[j],gd0)                    & $
  IF (gd0 GT 0) THEN avg_ydwhi[j] = MEAN(ydatwhi[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_ydwhi[j] = STDDEV(ydatwhi[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_ydwhi[j] = 1d-1*avg_ydwhi[j]
; => Determine y-ranges by high and low values
ylowwhi  = avg_ydwhi - std_ydwhi
yhighwhi = avg_ydwhi + std_ydwhi
bad      = WHERE(ylowwhi LE 0d0,bd)
IF (bd GT 0) THEN ylowwhi[bad] = 0.01
good0whi = array_where(ndist0_whi,xwhiu,/N_UNIQ)
good1whi = array_where(ndist1_whi,xwhiu,/N_UNIQ)
good2whi = array_where(ndist2_whi,xwhiu,/N_UNIQ)
good3whi = array_where(ndist3_whi,xwhiu,/N_UNIQ)
HELP, good0whi, good1whi, good2whi, good3whi
;  GOOD0WHI        INT       =       -1
;  GOOD1WHI        LONG      = Array[74, 2]
;  GOOD2WHI        INT       =       -1
;  GOOD3WHI        LONG      = Array[64, 2]
;  
IF (good0whi[0] GE 0) THEN good0whi = good0whi[UNIQ(REFORM(good0whi[*,1]),SORT(REFORM(good0whi[*,1]))),1] ELSE good0whi = -1
IF (good1whi[0] GE 0) THEN good1whi = good1whi[UNIQ(REFORM(good1whi[*,1]),SORT(REFORM(good1whi[*,1]))),1] ELSE good1whi = -1
IF (good2whi[0] GE 0) THEN good2whi = good2whi[UNIQ(REFORM(good2whi[*,1]),SORT(REFORM(good2whi[*,1]))),1] ELSE good2whi = -1
IF (good3whi[0] GE 0) THEN good3whi = good3whi[UNIQ(REFORM(good3whi[*,1]),SORT(REFORM(good3whi[*,1]))),1] ELSE good3whi = -1
HELP, good0whi, good1whi, good2whi, good3whi
;  GOOD0WHI        INT       =       -1
;  GOOD1WHI        LONG      = Array[8]
;  GOOD2WHI        INT       =       -1
;  GOOD3WHI        LONG      = Array[5]

; => Define elements for MIXED
sp        = SORT(xdat_mix)
xdatmix   = xdat_mix[sp]
ydatmix   = ydat_mix[sp]
unq       = UNIQ(xdatmix,SORT(xdatmix))
xmixu     = xdatmix[unq]
gdmix     = N_ELEMENTS(xmixu)
avg_ydmix = REPLICATE(d,gdmix)       ; => Array of avg. Y-values for each X-value
std_ydmix = REPLICATE(d,gdmix)       ; => Array of std. dev. of Y-values for each X-value
; => Calculate elements for MIXED
FOR j=0L, gdmix - 1L DO BEGIN                                      $
  good0      = WHERE(xdatmix EQ xmixu[j],gd0)                    & $
  IF (gd0 GT 0) THEN avg_ydmix[j] = MEAN(ydatmix[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_ydmix[j] = STDDEV(ydatmix[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_ydmix[j] = 1d-1*avg_ydmix[j]
; => Determine y-ranges by high and low values
ylowmix  = avg_ydmix - std_ydmix
yhighmix = avg_ydmix + std_ydmix
bad      = WHERE(ylowmix LE 0d0,bd)
IF (bd GT 0) THEN ylowmix[bad] = 0.01
good0mix = array_where(ndist0_mix,xmixu,/N_UNIQ)
good1mix = array_where(ndist1_mix,xmixu,/N_UNIQ)
good2mix = array_where(ndist2_mix,xmixu,/N_UNIQ)
good3mix = array_where(ndist3_mix,xmixu,/N_UNIQ)
HELP, good0mix, good1mix, good2mix, good3mix
;  GOOD0MIX        LONG      = Array[32, 2]
;  GOOD1MIX        LONG      = Array[36, 2]
;  GOOD2MIX        LONG      = Array[127, 2]
;  GOOD3MIX        LONG      = Array[44, 2]
;  
IF (good0mix[0] GE 0) THEN good0mix = good0mix[UNIQ(REFORM(good0mix[*,1]),SORT(REFORM(good0mix[*,1]))),1] ELSE good0mix = -1
IF (good1mix[0] GE 0) THEN good1mix = good1mix[UNIQ(REFORM(good1mix[*,1]),SORT(REFORM(good1mix[*,1]))),1] ELSE good1mix = -1
IF (good2mix[0] GE 0) THEN good2mix = good2mix[UNIQ(REFORM(good2mix[*,1]),SORT(REFORM(good2mix[*,1]))),1] ELSE good2mix = -1
IF (good3mix[0] GE 0) THEN good3mix = good3mix[UNIQ(REFORM(good3mix[*,1]),SORT(REFORM(good3mix[*,1]))),1] ELSE good3mix = -1
HELP, good0mix, good1mix, good2mix, good3mix
;  GOOD0MIX        LONG      =            0
;  GOOD1MIX        LONG      =            2
;  GOOD2MIX        LONG      = Array[8]
;  GOOD3MIX        LONG      = Array[3]



; => Define LHW data for 1997-12-10
IF (good0lhw[0] GE 0) THEN xdatlhw0  = [xlhwu[good0lhw]]     ELSE xdatlhw0  = [d]
IF (good0lhw[0] GE 0) THEN ydatlhw0  = [avg_ydlhw[good0lhw]] ELSE ydatlhw0  = [d]
IF (good0lhw[0] GE 0) THEN ylowlhw0  = [ylowlhw[good0lhw]]   ELSE ylowlhw0  = [d]
IF (good0lhw[0] GE 0) THEN yhighlhw0 = [yhighlhw[good0lhw]]  ELSE yhighlhw0 = [d]
; => Define LHW data for 1998-08-26
IF (good1lhw[0] GE 0) THEN xdatlhw1  = [xlhwu[good1lhw]]     ELSE xdatlhw1  = [d]
IF (good1lhw[0] GE 0) THEN ydatlhw1  = [avg_ydlhw[good1lhw]] ELSE ydatlhw1  = [d]
IF (good1lhw[0] GE 0) THEN ylowlhw1  = [ylowlhw[good1lhw]]   ELSE ylowlhw1  = [d]
IF (good1lhw[0] GE 0) THEN yhighlhw1 = [yhighlhw[good1lhw]]  ELSE yhighlhw1 = [d]
; => Define LHW data for 1998-09-24
IF (good2lhw[0] GE 0) THEN xdatlhw2  = [xlhwu[good2lhw]]     ELSE xdatlhw2  = [d]
IF (good2lhw[0] GE 0) THEN ydatlhw2  = [avg_ydlhw[good2lhw]] ELSE ydatlhw2  = [d]
IF (good2lhw[0] GE 0) THEN ylowlhw2  = [ylowlhw[good2lhw]]   ELSE ylowlhw2  = [d]
IF (good2lhw[0] GE 0) THEN yhighlhw2 = [yhighlhw[good2lhw]]  ELSE yhighlhw2 = [d]
; => Define LHW data for 2000-02-11
IF (good3lhw[0] GE 0) THEN xdatlhw3  = [xlhwu[good3lhw]]     ELSE xdatlhw3  = [d]
IF (good3lhw[0] GE 0) THEN ydatlhw3  = [avg_ydlhw[good3lhw]] ELSE ydatlhw3  = [d]
IF (good3lhw[0] GE 0) THEN ylowlhw3  = [ylowlhw[good3lhw]]   ELSE ylowlhw3  = [d]
IF (good3lhw[0] GE 0) THEN yhighlhw3 = [yhighlhw[good3lhw]]  ELSE yhighlhw3 = [d]

; => Define WW data for 1997-12-10
IF (good0whi[0] GE 0) THEN xdatwhi0  = [xwhiu[good0whi]]     ELSE xdatwhi0  = [d]
IF (good0whi[0] GE 0) THEN ydatwhi0  = [avg_ydwhi[good0whi]] ELSE ydatwhi0  = [d]
IF (good0whi[0] GE 0) THEN ylowwhi0  = [ylowwhi[good0whi]]   ELSE ylowwhi0  = [d]
IF (good0whi[0] GE 0) THEN yhighwhi0 = [yhighwhi[good0whi]]  ELSE yhighwhi0 = [d]
; => Define WW data for 1998-08-26
IF (good1whi[0] GE 0) THEN xdatwhi1  = [xwhiu[good1whi]]     ELSE xdatwhi1  = [d]
IF (good1whi[0] GE 0) THEN ydatwhi1  = [avg_ydwhi[good1whi]] ELSE ydatwhi1  = [d]
IF (good1whi[0] GE 0) THEN ylowwhi1  = [ylowwhi[good1whi]]   ELSE ylowwhi1  = [d]
IF (good1whi[0] GE 0) THEN yhighwhi1 = [yhighwhi[good1whi]]  ELSE yhighwhi1 = [d]
; => Define WW data for 1998-09-24
IF (good2whi[0] GE 0) THEN xdatwhi2  = [xwhiu[good2whi]]     ELSE xdatwhi2  = [d]
IF (good2whi[0] GE 0) THEN ydatwhi2  = [avg_ydwhi[good2whi]] ELSE ydatwhi2  = [d]
IF (good2whi[0] GE 0) THEN ylowwhi2  = [ylowwhi[good2whi]]   ELSE ylowwhi2  = [d]
IF (good2whi[0] GE 0) THEN yhighwhi2 = [yhighwhi[good2whi]]  ELSE yhighwhi2 = [d]
; => Define WW data for 2000-02-11
IF (good3whi[0] GE 0) THEN xdatwhi3  = [xwhiu[good3whi]]     ELSE xdatwhi3  = [d]
IF (good3whi[0] GE 0) THEN ydatwhi3  = [avg_ydwhi[good3whi]] ELSE ydatwhi3  = [d]
IF (good3whi[0] GE 0) THEN ylowwhi3  = [ylowwhi[good3whi]]   ELSE ylowwhi3  = [d]
IF (good3whi[0] GE 0) THEN yhighwhi3 = [yhighwhi[good3whi]]  ELSE yhighwhi3 = [d]

; => Define MIXED data for 1997-12-10
IF (good0mix[0] GE 0) THEN xdatmix0  = [xmixu[good0mix]]     ELSE xdatmix0  = [d]
IF (good0mix[0] GE 0) THEN ydatmix0  = [avg_ydmix[good0mix]] ELSE ydatmix0  = [d]
IF (good0mix[0] GE 0) THEN ylowmix0  = [ylowmix[good0mix]]   ELSE ylowmix0  = [d]
IF (good0mix[0] GE 0) THEN yhighmix0 = [yhighmix[good0mix]]  ELSE yhighmix0 = [d]
; => Define MIXED data for 1998-08-26
IF (good1mix[0] GE 0) THEN xdatmix1  = [xmixu[good1mix]]     ELSE xdatmix1  = [d]
IF (good1mix[0] GE 0) THEN ydatmix1  = [avg_ydmix[good1mix]] ELSE ydatmix1  = [d]
IF (good1mix[0] GE 0) THEN ylowmix1  = [ylowmix[good1mix]]   ELSE ylowmix1  = [d]
IF (good1mix[0] GE 0) THEN yhighmix1 = [yhighmix[good1mix]]  ELSE yhighmix1 = [d]
; => Define MIXED data for 1998-09-24
IF (good2mix[0] GE 0) THEN xdatmix2  = [xmixu[good2mix]]     ELSE xdatmix2  = [d]
IF (good2mix[0] GE 0) THEN ydatmix2  = [avg_ydmix[good2mix]] ELSE ydatmix2  = [d]
IF (good2mix[0] GE 0) THEN ylowmix2  = [ylowmix[good2mix]]   ELSE ylowmix2  = [d]
IF (good2mix[0] GE 0) THEN yhighmix2 = [yhighmix[good2mix]]  ELSE yhighmix2 = [d]
; => Define MIXED data for 2000-02-11
IF (good3mix[0] GE 0) THEN xdatmix3  = [xmixu[good3mix]]     ELSE xdatmix3  = [d]
IF (good3mix[0] GE 0) THEN ydatmix3  = [avg_ydmix[good3mix]] ELSE ydatmix3  = [d]
IF (good3mix[0] GE 0) THEN ylowmix3  = [ylowmix[good3mix]]   ELSE ylowmix3  = [d]
IF (good3mix[0] GE 0) THEN yhighmix3 = [yhighmix[good3mix]]  ELSE yhighmix3 = [d]



fpref  = 'Wave-Amp_vs_Normal-Dist-cwpp_'
suffx  = 'Avg-per-unique-normal-dist_plusminus-STDDEV'
outspr = ['1997-12-10 ','1998-08-26 ','1998-09-24 ','2000-02-11 ']
yra    = [0.01,15.0]
xra    = [1d0,6d4]
xttl   = 'L!Dn!N (c/!7x!3'+'!Dpe!N'+')'

;--------------------------------------------------
; => LHW Only
;--------------------------------------------------
; => Define data for 1997-12-10
xdat0  = xdatlhw0
ydat0  = ydatlhw0
ydatl0 = ylowlhw0
ydath0 = yhighlhw0
; => Define data for 1998-08-26
xdat1  = xdatlhw1
ydat1  = ydatlhw1
ydatl1 = ylowlhw1
ydath1 = yhighlhw1
; => Define data for 1998-09-24
xdat2  = xdatlhw2
ydat2  = ydatlhw2
ydatl2 = ylowlhw2
ydath2 = yhighlhw2
; => Define data for 2000-02-11
xdat3  = xdatlhw3
ydat3  = ydatlhw3
ydatl3 = ylowlhw3
ydath3 = yhighlhw3

yttl   = 'Avg. Wave Amplitude [LHW-Only]'+'!C'+'[Filtered Peak, nT]'
fname  = fpref[0]+'LHW-Events_'+suffx[0]
outxy  = outspr+'['+nlhwstr+' LHW]'

;--------------------------------------------------
; => WW Only
;--------------------------------------------------
; => Define data for 1997-12-10
xdat0  = xdatwhi0
ydat0  = ydatwhi0
ydatl0 = ylowwhi0
ydath0 = yhighwhi0
; => Define data for 1998-08-26
xdat1  = xdatwhi1
ydat1  = ydatwhi1
ydatl1 = ylowwhi1
ydath1 = yhighwhi1
; => Define data for 1998-09-24
xdat2  = xdatwhi2
ydat2  = ydatwhi2
ydatl2 = ylowwhi2
ydath2 = yhighwhi2
; => Define data for 2000-02-11
xdat3  = xdatwhi3
ydat3  = ydatwhi3
ydatl3 = ylowwhi3
ydath3 = yhighwhi3

yttl   = 'Avg. Wave Amplitude [WW-Only]'+'!C'+'[Filtered Peak, nT]'
fname  = fpref[0]+'WW-Events_'+suffx[0]
outxy  = outspr+'['+nwhistr+' WW]'

;--------------------------------------------------
; => MIXED Only
;--------------------------------------------------
; => Define data for 1997-12-10
xdat0  = xdatmix0
ydat0  = ydatmix0
ydatl0 = ylowmix0
ydath0 = yhighmix0
; => Define data for 1998-08-26
xdat1  = xdatmix1
ydat1  = ydatmix1
ydatl1 = ylowmix1
ydath1 = yhighmix1
; => Define data for 1998-09-24
xdat2  = xdatmix2
ydat2  = ydatmix2
ydatl2 = ylowmix2
ydath2 = yhighmix2
; => Define data for 2000-02-11
xdat3  = xdatmix3
ydat3  = ydatmix3
ydatl3 = ylowmix3
ydath3 = yhighmix3

yttl   = 'Avg. Wave Amplitude [MIXED-Only]'+'!C'+'[Filtered Peak, nT]'
fname  = fpref[0]+'MIXED-Events_'+suffx[0]
outxy  = outspr+'['+nmixstr+' MIXED]'


; => Plot results
pstr   = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl,NODATA:1,YLOG:1,$
          XLOG:1,YSTYLE:1,XSTYLE:1}
  PLOT,xdat0,ydat0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl0,ydath0,/DATA,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl1,ydath1,/DATA,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl2,ydath2,/DATA,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl3,ydath3,/DATA,COLOR= 50
    XYOUTS,200.,10.,/DATA,outxy[0],COLOR=250
    XYOUTS,200.,8. ,/DATA,outxy[1],COLOR=200
    XYOUTS,200.,6. ,/DATA,outxy[2],COLOR=150
    XYOUTS,200.,4. ,/DATA,outxy[3],COLOR= 50

popen,fname[0],/LAND
  PLOT,xdat0,ydat0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl0,ydath0,/DATA,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl1,ydath1,/DATA,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl2,ydath2,/DATA,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl3,ydath3,/DATA,COLOR= 50
    XYOUTS,200.,10.,/DATA,outxy[0],COLOR=250
    XYOUTS,200.,8. ,/DATA,outxy[1],COLOR=200
    XYOUTS,200.,6. ,/DATA,outxy[2],COLOR=150
    XYOUTS,200.,4. ,/DATA,outxy[3],COLOR= 50
pclose
;-----------------------------------------------------------------------------------------
; => Separate by wave type and then Avg. [Low Freqs for MIXED]
;-----------------------------------------------------------------------------------------
ndist0     = dist_0/(rhoe0*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist1     = dist_1/(rhoe1*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist2     = dist_2/(rhoe2*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
ndist3     = dist_3/(rhoe3*SQRT(mp/me))  ; => dist. from ramp normalized to proton gyroradius
bamp0      = ftpkamp0
bamp1      = ftpkamp1
bamp2      = ftpkamp2
bamp3      = ftpkamp3
; => First calculate rest frame frequencies
ckm        = (c*1d-3)                   ; => Convert speed of light to [km/s]
; => electron cyclotron freq. times cosine of wave normal angle for Low  Freq. end of bandpass
fac0l      = wce0*COS(thkbl0*!DPI/18d1)  ; => For 1997-12-10 event
fac0h      = wce0*COS(thkbh0*!DPI/18d1)  ; => For 1997-12-10 event
fac1l      = wce1*COS(thkbl1*!DPI/18d1)  ; => For 1998-08-26 event
fac1h      = wce1*COS(thkbh1*!DPI/18d1)  ; => For 1998-08-26 event
fac2l      = wce2*COS(thkbl2*!DPI/18d1)  ; => For 1998-09-24 event
fac2h      = wce2*COS(thkbh2*!DPI/18d1)  ; => For 1998-09-24 event
fac3l      = wce3*COS(thkbl3*!DPI/18d1)  ; => For 2000-02-11 event
fac3h      = wce3*COS(thkbh3*!DPI/18d1)  ; => For 2000-02-11 event
fac0pe     = (wpe0/ckm[0])^2             ; => Inverse electron inertial length [km^(-1)]
fac1pe     = (wpe1/ckm[0])^2
fac2pe     = (wpe2/ckm[0])^2
fac3pe     = (wpe3/ckm[0])^2
; => First calculate rest frame frequencies
lowfscfm0  = avg_lfk0[*,0]   ; => Avg. |k| Low  Freq. end of bandpass, (- sign) for 1997-12-10 event
lowfscfp0  = avg_lfk0[*,1]   ; => Avg. |k| Low  Freq. end of bandpass, (+ sign) for 1997-12-10 event
highfscfm0 = avg_hfk0[*,0]   ; => Avg. |k| High Freq. end of bandpass, (- sign) for 1997-12-10 event
highfscfp0 = avg_hfk0[*,1]   ; => Avg. |k| High Freq. end of bandpass, (+ sign) for 1997-12-10 event

lowfscfm1  = avg_lfk1[*,0]   ; => Avg. |k| Low  Freq. end of bandpass, (- sign) for 1998-08-26 event
lowfscfp1  = avg_lfk1[*,1]   ; => Avg. |k| Low  Freq. end of bandpass, (+ sign) for 1998-08-26 event
highfscfm1 = avg_hfk1[*,0]   ; => Avg. |k| High Freq. end of bandpass, (- sign) for 1998-08-26 event
highfscfp1 = avg_hfk1[*,1]   ; => Avg. |k| High Freq. end of bandpass, (+ sign) for 1998-08-26 event

lowfscfm2  = avg_lfk2[*,0]   ; => Avg. |k| Low  Freq. end of bandpass, (- sign) for 1998-09-24 event
lowfscfp2  = avg_lfk2[*,1]   ; => Avg. |k| Low  Freq. end of bandpass, (+ sign) for 1998-09-24 event
highfscfm2 = avg_hfk2[*,0]   ; => Avg. |k| High Freq. end of bandpass, (- sign) for 1998-09-24 event
highfscfp2 = avg_hfk2[*,1]   ; => Avg. |k| High Freq. end of bandpass, (+ sign) for 1998-09-24 event

lowfscfm3  = avg_lfk3[*,0]   ; => Avg. |k| Low  Freq. end of bandpass, (- sign) for 2000-02-11 event
lowfscfp3  = avg_lfk3[*,1]   ; => Avg. |k| Low  Freq. end of bandpass, (+ sign) for 2000-02-11 event
highfscfm3 = avg_hfk3[*,0]   ; => Avg. |k| High Freq. end of bandpass, (- sign) for 2000-02-11 event
highfscfp3 = avg_hfk3[*,1]   ; => Avg. |k| High Freq. end of bandpass, (+ sign) for 2000-02-11 event
;--------------------------------------------------
; => rest frame frequencies [rad/s]
;--------------------------------------------------
frest_lfkm0 = fac0l/(1d0 + (fac0pe/lowfscfm0^2))
frest_lfkp0 = fac0l/(1d0 + (fac0pe/lowfscfp0^2))
frest_hfkm0 = fac0h/(1d0 + (fac0pe/highfscfm0^2))
frest_hfkp0 = fac0h/(1d0 + (fac0pe/highfscfp0^2))

frest_lfkm1 = fac1l/(1d0 + (fac1pe/lowfscfm1^2))
frest_lfkp1 = fac1l/(1d0 + (fac1pe/lowfscfp1^2))
frest_hfkm1 = fac1h/(1d0 + (fac1pe/highfscfm1^2))
frest_hfkp1 = fac1h/(1d0 + (fac1pe/highfscfp1^2))

frest_lfkm2 = fac2l/(1d0 + (fac2pe/lowfscfm2^2))
frest_lfkp2 = fac2l/(1d0 + (fac2pe/lowfscfp2^2))
frest_hfkm2 = fac2h/(1d0 + (fac2pe/highfscfm2^2))
frest_hfkp2 = fac2h/(1d0 + (fac2pe/highfscfp2^2))

frest_lfkm3 = fac3l/(1d0 + (fac3pe/lowfscfm3^2))
frest_lfkp3 = fac3l/(1d0 + (fac3pe/lowfscfp3^2))
frest_hfkm3 = fac3h/(1d0 + (fac3pe/highfscfm3^2))
frest_hfkp3 = fac3h/(1d0 + (fac3pe/highfscfp3^2))

;--------------------------------------------------
;--------------------------------------------------
evns_lhw = [00010618L,00010684L,02014864L,02015635L,02015691L,02017428L,$
            02018091L]
evns_mix = [03408599L,00010488L,02011249L,02011723L,02011820L,02013165L,$
            02015299L,02015304L,02015650L,02017555L,23145465L,23145474L,$
            23145484L]
good_lhw0 = array_where(evn0,evns_lhw,/N_UNIQ)
good_lhw1 = array_where(evn1,evns_lhw,/N_UNIQ)
good_lhw2 = array_where(evn2,evns_lhw,/N_UNIQ)
good_lhw3 = array_where(evn3,evns_lhw,/N_UNIQ)

good_mix0 = array_where(evn0,evns_mix,/N_UNIQ)
good_mix1 = array_where(evn1,evns_mix,/N_UNIQ)
good_mix2 = array_where(evn2,evns_mix,/N_UNIQ)
good_mix3 = array_where(evn3,evns_mix,/N_UNIQ)


;--------------------------------------------------
; => LHW Only
;--------------------------------------------------
IF (good_lhw0[0] GE 0) THEN ndist0_lhw = ndist0[good_lhw0[*,0]] ELSE ndist0_lhw = [d]
IF (good_lhw1[0] GE 0) THEN ndist1_lhw = ndist1[good_lhw1[*,0]] ELSE ndist1_lhw = [d]
IF (good_lhw2[0] GE 0) THEN ndist2_lhw = ndist2[good_lhw2[*,0]] ELSE ndist2_lhw = [d]
IF (good_lhw3[0] GE 0) THEN ndist3_lhw = ndist3[good_lhw3[*,0]] ELSE ndist3_lhw = [d]

IF (good_lhw0[0] GE 0) THEN bamp0_lhw  = bamp0[good_lhw0[*,0]]  ELSE bamp0_lhw  = [d]
IF (good_lhw1[0] GE 0) THEN bamp1_lhw  = bamp1[good_lhw1[*,0]]  ELSE bamp1_lhw  = [d]
IF (good_lhw2[0] GE 0) THEN bamp2_lhw  = bamp2[good_lhw2[*,0]]  ELSE bamp2_lhw  = [d]
IF (good_lhw3[0] GE 0) THEN bamp3_lhw  = bamp3[good_lhw3[*,0]]  ELSE bamp3_lhw  = [d]

;--------------------------------------------------
; => MIXED Only
;--------------------------------------------------
IF (good_mix0[0] GE 0) THEN ndist0_mix = ndist0[good_mix0[*,0]] ELSE ndist0_mix = [d]
IF (good_mix1[0] GE 0) THEN ndist1_mix = ndist1[good_mix1[*,0]] ELSE ndist1_mix = [d]
IF (good_mix2[0] GE 0) THEN ndist2_mix = ndist2[good_mix2[*,0]] ELSE ndist2_mix = [d]
IF (good_mix3[0] GE 0) THEN ndist3_mix = ndist3[good_mix3[*,0]] ELSE ndist3_mix = [d]

IF (good_mix0[0] GE 0) THEN bamp0_mix  = bamp0[good_mix0[*,0]]  ELSE bamp0_mix  = [d]
IF (good_mix1[0] GE 0) THEN bamp1_mix  = bamp1[good_mix1[*,0]]  ELSE bamp1_mix  = [d]
IF (good_mix2[0] GE 0) THEN bamp2_mix  = bamp2[good_mix2[*,0]]  ELSE bamp2_mix  = [d]
IF (good_mix3[0] GE 0) THEN bamp3_mix  = bamp3[good_mix3[*,0]]  ELSE bamp3_mix  = [d]

ndist0m_mix = ndist0_mix & bamp0m_mix  = bamp0_mix
ndist0p_mix = ndist0_mix & bamp0p_mix  = bamp0_mix
ndist1m_mix = ndist1_mix & bamp1m_mix  = bamp1_mix
ndist1p_mix = ndist1_mix & bamp1p_mix  = bamp1_mix
ndist2m_mix = ndist2_mix & bamp2m_mix  = bamp2_mix
ndist2p_mix = ndist2_mix & bamp2p_mix  = bamp2_mix
ndist3m_mix = ndist3_mix & bamp3m_mix  = bamp3_mix
ndist3p_mix = ndist3_mix & bamp3p_mix  = bamp3_mix
; => Select separate freqs by +/- signs
IF (good_mix0[0] GE 0) THEN lfscm_mix0 = frest_lfkm0[good_mix0[*,0]] ELSE lfscm_mix0 = [d]
IF (good_mix0[0] GE 0) THEN lfscp_mix0 = frest_lfkp0[good_mix0[*,0]] ELSE lfscp_mix0 = [d]
IF (good_mix0[0] GE 0) THEN hfscm_mix0 = frest_hfkm0[good_mix0[*,0]] ELSE hfscm_mix0 = [d]
IF (good_mix0[0] GE 0) THEN hfscp_mix0 = frest_hfkp0[good_mix0[*,0]] ELSE hfscp_mix0 = [d]
good_highfm_0 = WHERE(hfscm_mix0 LE wlh0,gdhm0,COMPLEMENT=bad_highfm_0,NCOMPLEMENT=bdhm0)
good_highfp_0 = WHERE(hfscp_mix0 LE wlh0,gdhp0,COMPLEMENT=bad_highfp_0,NCOMPLEMENT=bdhp0)
IF (bdhm0 GT 0) THEN ndist0m_mix[bad_highfm_0] = d
IF (bdhp0 GT 0) THEN ndist0p_mix[bad_highfp_0] = d
IF (bdhm0 GT 0) THEN bamp0m_mix[bad_highfm_0]  = d
IF (bdhp0 GT 0) THEN bamp0p_mix[bad_highfp_0]  = d

IF (good_mix1[0] GE 0) THEN lfscm_mix1 = frest_lfkm1[good_mix1[*,0]] ELSE lfscm_mix1 = [d]
IF (good_mix1[0] GE 0) THEN lfscp_mix1 = frest_lfkp1[good_mix1[*,0]] ELSE lfscp_mix1 = [d]
IF (good_mix1[0] GE 0) THEN hfscm_mix1 = frest_hfkm1[good_mix1[*,0]] ELSE hfscm_mix1 = [d]
IF (good_mix1[0] GE 0) THEN hfscp_mix1 = frest_hfkp1[good_mix1[*,0]] ELSE hfscp_mix1 = [d]
good_highfm_1 = WHERE(hfscm_mix1 LE wlh1,gdhm1,COMPLEMENT=bad_highfm_1,NCOMPLEMENT=bdhm1)
good_highfp_1 = WHERE(hfscp_mix1 LE wlh1,gdhp1,COMPLEMENT=bad_highfp_1,NCOMPLEMENT=bdhp1)
IF (bdhm1 GT 0) THEN ndist1m_mix[bad_highfm_1] = d
IF (bdhp1 GT 0) THEN ndist1p_mix[bad_highfp_1] = d
IF (bdhm1 GT 0) THEN bamp1m_mix[bad_highfm_1]  = d
IF (bdhp1 GT 0) THEN bamp1p_mix[bad_highfp_1]  = d

IF (good_mix2[0] GE 0) THEN lfscm_mix2 = frest_lfkm2[good_mix2[*,0]] ELSE lfscm_mix2 = [d]
IF (good_mix2[0] GE 0) THEN lfscp_mix2 = frest_lfkp2[good_mix2[*,0]] ELSE lfscp_mix2 = [d]
IF (good_mix2[0] GE 0) THEN hfscm_mix2 = frest_hfkm2[good_mix2[*,0]] ELSE hfscm_mix2 = [d]
IF (good_mix2[0] GE 0) THEN hfscp_mix2 = frest_hfkp2[good_mix2[*,0]] ELSE hfscp_mix2 = [d]
good_highfm_2 = WHERE(hfscm_mix2 LE wlh2,gdhm2,COMPLEMENT=bad_highfm_2,NCOMPLEMENT=bdhm2)
good_highfp_2 = WHERE(hfscp_mix2 LE wlh2,gdhp2,COMPLEMENT=bad_highfp_2,NCOMPLEMENT=bdhp2)
IF (bdhm2 GT 0) THEN ndist2m_mix[bad_highfm_2] = d
IF (bdhp2 GT 0) THEN ndist2p_mix[bad_highfp_2] = d
IF (bdhm2 GT 0) THEN bamp2m_mix[bad_highfm_2]  = d
IF (bdhp2 GT 0) THEN bamp2p_mix[bad_highfp_2]  = d

IF (good_mix3[0] GE 0) THEN lfscm_mix3 = frest_lfkm3[good_mix3[*,0]] ELSE lfscm_mix3 = [d]
IF (good_mix3[0] GE 0) THEN lfscp_mix3 = frest_lfkp3[good_mix3[*,0]] ELSE lfscp_mix3 = [d]
IF (good_mix3[0] GE 0) THEN hfscm_mix3 = frest_hfkm3[good_mix3[*,0]] ELSE hfscm_mix3 = [d]
IF (good_mix3[0] GE 0) THEN hfscp_mix3 = frest_hfkp3[good_mix3[*,0]] ELSE hfscp_mix3 = [d]
good_highfm_3 = WHERE(hfscm_mix3 LE wlh3,gdhm3,COMPLEMENT=bad_highfm_3,NCOMPLEMENT=bdhm3)
good_highfp_3 = WHERE(hfscp_mix3 LE wlh3,gdhp3,COMPLEMENT=bad_highfp_3,NCOMPLEMENT=bdhp3)
IF (bdhm3 GT 0) THEN ndist3m_mix[bad_highfm_3] = d
IF (bdhp3 GT 0) THEN ndist3p_mix[bad_highfp_3] = d
IF (bdhm3 GT 0) THEN bamp3m_mix[bad_highfm_3]  = d
IF (bdhp3 GT 0) THEN bamp3p_mix[bad_highfp_3]  = d


gf_lhw0  = WHERE(FINITE(bamp0_lhw),nlhw0)
gf_lhw1  = WHERE(FINITE(bamp1_lhw),nlhw1)
gf_lhw2  = WHERE(FINITE(bamp2_lhw),nlhw2)
gf_lhw3  = WHERE(FINITE(bamp3_lhw),nlhw3)
gf_mix0m = WHERE(FINITE(bamp0m_mix),nmix0m)
gf_mix1m = WHERE(FINITE(bamp1m_mix),nmix1m)
gf_mix2m = WHERE(FINITE(bamp2m_mix),nmix2m)
gf_mix3m = WHERE(FINITE(bamp3m_mix),nmix3m)
gf_mix0p = WHERE(FINITE(bamp0p_mix),nmix0p)
gf_mix1p = WHERE(FINITE(bamp1p_mix),nmix1p)
gf_mix2p = WHERE(FINITE(bamp2p_mix),nmix2p)
gf_mix3p = WHERE(FINITE(bamp3p_mix),nmix3p)
PRINT,'; ',nmix0m, nmix1m, nmix2m, nmix3m
;           14          24         110          21
PRINT,'; ',nmix0p, nmix1p, nmix2p, nmix3p
;            0           0          16           0


xdat_lhw  = [ndist0_lhw,ndist1_lhw,ndist2_lhw,ndist3_lhw]
ydat_lhw  = [bamp0_lhw,bamp1_lhw,bamp2_lhw,bamp3_lhw]
xdat_mixm = [ndist0m_mix,ndist1m_mix,ndist2m_mix,ndist3m_mix]
ydat_mixm = [bamp0m_mix,bamp1m_mix,bamp2m_mix,bamp3m_mix]
ydat_mixp = [bamp0p_mix,bamp1p_mix,bamp2p_mix,bamp3p_mix]
xdat_mixp = [ndist0p_mix,ndist1p_mix,ndist2p_mix,ndist3p_mix]

; => Define elements for LHW
sp        = SORT(xdat_lhw)
xdatlhw   = xdat_lhw[sp]
ydatlhw   = ydat_lhw[sp]
unq       = UNIQ(xdatlhw,SORT(xdatlhw))
xlhwu     = xdatlhw[unq]
gdlhw     = N_ELEMENTS(xlhwu)
avg_ydlhw = REPLICATE(d,gdlhw)       ; => Array of avg. Y-values for each X-value
std_ydlhw = REPLICATE(d,gdlhw)       ; => Array of std. dev. of Y-values for each X-value
; => Calculate elements for LHW
FOR j=0L, gdlhw - 1L DO BEGIN                                      $
  good0      = WHERE(xdatlhw EQ xlhwu[j],gd0)                    & $
  IF (gd0 GT 0) THEN avg_ydlhw[j] = MEAN(ydatlhw[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_ydlhw[j] = STDDEV(ydatlhw[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_ydlhw[j] = 1d-1*avg_ydlhw[j]
; => Determine y-ranges by high and low values
ylowlhw  = avg_ydlhw - std_ydlhw
yhighlhw = avg_ydlhw + std_ydlhw
bad      = WHERE(ylowlhw LE 0d0,bd)
IF (bd GT 0) THEN ylowlhw[bad] = 0.01
good0lhw = array_where(ndist0_lhw,xlhwu,/N_UNIQ)
good1lhw = array_where(ndist1_lhw,xlhwu,/N_UNIQ)
good2lhw = array_where(ndist2_lhw,xlhwu,/N_UNIQ)
good3lhw = array_where(ndist3_lhw,xlhwu,/N_UNIQ)
HELP, good0lhw, good1lhw, good2lhw, good3lhw
;  GOOD0LHW        INT       =       -1
;  GOOD1LHW        LONG      = Array[9, 2]
;  GOOD2LHW        LONG      = Array[45, 2]
;  GOOD3LHW        INT       =       -1
;  
IF (good0lhw[0] GE 0) THEN good0lhw = good0lhw[UNIQ(REFORM(good0lhw[*,1]),SORT(REFORM(good0lhw[*,1]))),1] ELSE good0lhw = -1
IF (good1lhw[0] GE 0) THEN good1lhw = good1lhw[UNIQ(REFORM(good1lhw[*,1]),SORT(REFORM(good1lhw[*,1]))),1] ELSE good1lhw = -1
IF (good2lhw[0] GE 0) THEN good2lhw = good2lhw[UNIQ(REFORM(good2lhw[*,1]),SORT(REFORM(good2lhw[*,1]))),1] ELSE good2lhw = -1
IF (good3lhw[0] GE 0) THEN good3lhw = good3lhw[UNIQ(REFORM(good3lhw[*,1]),SORT(REFORM(good3lhw[*,1]))),1] ELSE good3lhw = -1
HELP, good0lhw, good1lhw, good2lhw, good3lhw
;  GOOD0LHW        INT       =       -1
;  GOOD1LHW        LONG      = Array[2]
;  GOOD2LHW        LONG      = Array[5]
;  GOOD3LHW        INT       =       -1


; => Define elements for MIXED (- sign)
sp         = SORT(xdat_mixm)
xdatmixm   = xdat_mixm[sp]
ydatmixm   = ydat_mixm[sp]
unq        = UNIQ(xdatmixm,SORT(xdatmixm))
xmixmu     = xdatmixm[unq]
gdmixm     = N_ELEMENTS(xmixmu)
avg_ydmixm = REPLICATE(d,gdmixm)       ; => Array of avg. Y-values for each X-value
std_ydmixm = REPLICATE(d,gdmixm)       ; => Array of std. dev. of Y-values for each X-value
; => Calculate elements for LHW
FOR j=0L, gdmixm - 1L DO BEGIN                                       $
  good0      = WHERE(xdatmixm EQ xmixmu[j],gd0)                    & $
  IF (gd0 GT 0) THEN avg_ydmixm[j] = MEAN(ydatmixm[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_ydmixm[j] = STDDEV(ydatmixm[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_ydmixm[j] = 1d-1*avg_ydmixm[j]
; => Determine y-ranges by high and low values
ylowmixm  = avg_ydmixm - std_ydmixm
yhighmixm = avg_ydmixm + std_ydmixm
bad       = WHERE(ylowmixm LE 0d0,bd)
IF (bd GT 0) THEN ylowmixm[bad] = 0.01
good0mixm = array_where(ndist0m_mix,xmixmu,/N_UNIQ)
good1mixm = array_where(ndist1m_mix,xmixmu,/N_UNIQ)
good2mixm = array_where(ndist2m_mix,xmixmu,/N_UNIQ)
good3mixm = array_where(ndist3m_mix,xmixmu,/N_UNIQ)
HELP, good0mixm, good1mixm, good2mixm, good3mixm
;  GOOD0MIXM       LONG      = Array[14, 2]
;  GOOD1MIXM       LONG      = Array[24, 2]
;  GOOD2MIXM       LONG      = Array[110, 2]
;  GOOD3MIXM       LONG      = Array[21, 2]
;  
IF (good0mixm[0] GE 0) THEN good0mixm = good0mixm[UNIQ(REFORM(good0mixm[*,1]),SORT(REFORM(good0mixm[*,1]))),1] ELSE good0mixm = -1
IF (good1mixm[0] GE 0) THEN good1mixm = good1mixm[UNIQ(REFORM(good1mixm[*,1]),SORT(REFORM(good1mixm[*,1]))),1] ELSE good1mixm = -1
IF (good2mixm[0] GE 0) THEN good2mixm = good2mixm[UNIQ(REFORM(good2mixm[*,1]),SORT(REFORM(good2mixm[*,1]))),1] ELSE good2mixm = -1
IF (good3mixm[0] GE 0) THEN good3mixm = good3mixm[UNIQ(REFORM(good3mixm[*,1]),SORT(REFORM(good3mixm[*,1]))),1] ELSE good3mixm = -1
HELP, good0mixm, good1mixm, good2mixm, good3mixm
;  GOOD0MIXM       LONG      =            0
;  GOOD1MIXM       LONG      =            2
;  GOOD2MIXM       LONG      = Array[8]
;  GOOD3MIXM       LONG      = Array[3]

; => Define elements for MIXED (+ sign)
sp         = SORT(xdat_mixp)
xdatmixp   = xdat_mixp[sp]
ydatmixp   = ydat_mixp[sp]
unq        = UNIQ(xdatmixp,SORT(xdatmixp))
xmixpu     = xdatmixp[unq]
gdmixp     = N_ELEMENTS(xmixpu)
avg_ydmixp = REPLICATE(d,gdmixp)       ; => Array of avg. Y-values for each X-value
std_ydmixp = REPLICATE(d,gdmixp)       ; => Array of std. dev. of Y-values for each X-value
; => Calculate elements for LHW
FOR j=0L, gdmixp - 1L DO BEGIN                                       $
  good0      = WHERE(xdatmixp EQ xmixpu[j],gd0)                    & $
  IF (gd0 GT 0) THEN avg_ydmixp[j] = MEAN(ydatmixp[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_ydmixp[j] = STDDEV(ydatmixp[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_ydmixp[j] = 1d-1*avg_ydmixp[j]
; => Determine y-ranges by high and low values
ylowmixp  = avg_ydmixp - std_ydmixp
yhighmixp = avg_ydmixp + std_ydmixp
bad       = WHERE(ylowmixp LE 0d0,bd)
IF (bd GT 0) THEN ylowmixp[bad] = 0.01
good0mixp = array_where(ndist0p_mix,xmixpu,/N_UNIQ)
good1mixp = array_where(ndist1p_mix,xmixpu,/N_UNIQ)
good2mixp = array_where(ndist2p_mix,xmixpu,/N_UNIQ)
good3mixp = array_where(ndist3p_mix,xmixpu,/N_UNIQ)
HELP, good0mixp, good1mixp, good2mixp, good3mixp
;  GOOD0MIXP       INT       =       -1
;  GOOD1MIXP       INT       =       -1
;  GOOD2MIXP       LONG      = Array[16, 2]
;  GOOD3MIXP       INT       =       -1
;  
IF (good0mixp[0] GE 0) THEN good0mixp = good0mixp[UNIQ(REFORM(good0mixp[*,1]),SORT(REFORM(good0mixp[*,1]))),1] ELSE good0mixp = -1
IF (good1mixp[0] GE 0) THEN good1mixp = good1mixp[UNIQ(REFORM(good1mixp[*,1]),SORT(REFORM(good1mixp[*,1]))),1] ELSE good1mixp = -1
IF (good2mixp[0] GE 0) THEN good2mixp = good2mixp[UNIQ(REFORM(good2mixp[*,1]),SORT(REFORM(good2mixp[*,1]))),1] ELSE good2mixp = -1
IF (good3mixp[0] GE 0) THEN good3mixp = good3mixp[UNIQ(REFORM(good3mixp[*,1]),SORT(REFORM(good3mixp[*,1]))),1] ELSE good3mixp = -1
HELP, good0mixp, good1mixp, good2mixp, good3mixp
;  GOOD0MIXP       INT       =       -1
;  GOOD1MIXP       INT       =       -1
;  GOOD2MIXP       LONG      = Array[4]
;  GOOD3MIXP       INT       =       -1


; => Define LHW data for 1997-12-10
IF (good0lhw[0] GE 0) THEN xdatlhw0  = [xlhwu[good0lhw]]     ELSE xdatlhw0  = [d]
IF (good0lhw[0] GE 0) THEN ydatlhw0  = [avg_ydlhw[good0lhw]] ELSE ydatlhw0  = [d]
IF (good0lhw[0] GE 0) THEN ylowlhw0  = [ylowlhw[good0lhw]]   ELSE ylowlhw0  = [d]
IF (good0lhw[0] GE 0) THEN yhighlhw0 = [yhighlhw[good0lhw]]  ELSE yhighlhw0 = [d]
; => Define LHW data for 1998-08-26
IF (good1lhw[0] GE 0) THEN xdatlhw1  = [xlhwu[good1lhw]]     ELSE xdatlhw1  = [d]
IF (good1lhw[0] GE 0) THEN ydatlhw1  = [avg_ydlhw[good1lhw]] ELSE ydatlhw1  = [d]
IF (good1lhw[0] GE 0) THEN ylowlhw1  = [ylowlhw[good1lhw]]   ELSE ylowlhw1  = [d]
IF (good1lhw[0] GE 0) THEN yhighlhw1 = [yhighlhw[good1lhw]]  ELSE yhighlhw1 = [d]
; => Define LHW data for 1998-09-24
IF (good2lhw[0] GE 0) THEN xdatlhw2  = [xlhwu[good2lhw]]     ELSE xdatlhw2  = [d]
IF (good2lhw[0] GE 0) THEN ydatlhw2  = [avg_ydlhw[good2lhw]] ELSE ydatlhw2  = [d]
IF (good2lhw[0] GE 0) THEN ylowlhw2  = [ylowlhw[good2lhw]]   ELSE ylowlhw2  = [d]
IF (good2lhw[0] GE 0) THEN yhighlhw2 = [yhighlhw[good2lhw]]  ELSE yhighlhw2 = [d]
; => Define LHW data for 2000-02-11
IF (good3lhw[0] GE 0) THEN xdatlhw3  = [xlhwu[good3lhw]]     ELSE xdatlhw3  = [d]
IF (good3lhw[0] GE 0) THEN ydatlhw3  = [avg_ydlhw[good3lhw]] ELSE ydatlhw3  = [d]
IF (good3lhw[0] GE 0) THEN ylowlhw3  = [ylowlhw[good3lhw]]   ELSE ylowlhw3  = [d]
IF (good3lhw[0] GE 0) THEN yhighlhw3 = [yhighlhw[good3lhw]]  ELSE yhighlhw3 = [d]

; => Define MIXED data for 1997-12-10
IF (good0mixm[0] GE 0) THEN xdatmixm0  = [xmixmu[good0mixm]]     ELSE xdatmixm0  = [d]
IF (good0mixm[0] GE 0) THEN ydatmixm0  = [avg_ydmixm[good0mixm]] ELSE ydatmixm0  = [d]
IF (good0mixm[0] GE 0) THEN ylowmixm0  = [ylowmixm[good0mixm]]   ELSE ylowmixm0  = [d]
IF (good0mixm[0] GE 0) THEN yhighmixm0 = [yhighmixm[good0mixm]]  ELSE yhighmixm0 = [d]
; => Define MIXED data for 1998-08-26
IF (good1mixm[0] GE 0) THEN xdatmixm1  = [xmixmu[good1mixm]]     ELSE xdatmixm1  = [d]
IF (good1mixm[0] GE 0) THEN ydatmixm1  = [avg_ydmixm[good1mixm]] ELSE ydatmixm1  = [d]
IF (good1mixm[0] GE 0) THEN ylowmixm1  = [ylowmixm[good1mixm]]   ELSE ylowmixm1  = [d]
IF (good1mixm[0] GE 0) THEN yhighmixm1 = [yhighmixm[good1mixm]]  ELSE yhighmixm1 = [d]
; => Define MIXED data for 1998-09-24
IF (good2mixm[0] GE 0) THEN xdatmixm2  = [xmixmu[good2mixm]]     ELSE xdatmixm2  = [d]
IF (good2mixm[0] GE 0) THEN ydatmixm2  = [avg_ydmixm[good2mixm]] ELSE ydatmixm2  = [d]
IF (good2mixm[0] GE 0) THEN ylowmixm2  = [ylowmixm[good2mixm]]   ELSE ylowmixm2  = [d]
IF (good2mixm[0] GE 0) THEN yhighmixm2 = [yhighmixm[good2mixm]]  ELSE yhighmixm2 = [d]
; => Define MIXED data for 2000-02-11
IF (good3mixm[0] GE 0) THEN xdatmixm3  = [xmixmu[good3mixm]]     ELSE xdatmixm3  = [d]
IF (good3mixm[0] GE 0) THEN ydatmixm3  = [avg_ydmixm[good3mixm]] ELSE ydatmixm3  = [d]
IF (good3mixm[0] GE 0) THEN ylowmixm3  = [ylowmixm[good3mixm]]   ELSE ylowmixm3  = [d]
IF (good3mixm[0] GE 0) THEN yhighmixm3 = [yhighmixm[good3mixm]]  ELSE yhighmixm3 = [d]

; => Define MIXED data for 1997-12-10
IF (good0mixp[0] GE 0) THEN xdatmixp0  = [xmixpu[good0mixp]]     ELSE xdatmixp0  = [d]
IF (good0mixp[0] GE 0) THEN ydatmixp0  = [avg_ydmixp[good0mixp]] ELSE ydatmixp0  = [d]
IF (good0mixp[0] GE 0) THEN ylowmixp0  = [ylowmixp[good0mixp]]   ELSE ylowmixp0  = [d]
IF (good0mixp[0] GE 0) THEN yhighmixp0 = [yhighmixp[good0mixp]]  ELSE yhighmixp0 = [d]
; => Define MIXED data for 1998-08-26
IF (good1mixp[0] GE 0) THEN xdatmixp1  = [xmixpu[good1mixp]]     ELSE xdatmixp1  = [d]
IF (good1mixp[0] GE 0) THEN ydatmixp1  = [avg_ydmixp[good1mixp]] ELSE ydatmixp1  = [d]
IF (good1mixp[0] GE 0) THEN ylowmixp1  = [ylowmixp[good1mixp]]   ELSE ylowmixp1  = [d]
IF (good1mixp[0] GE 0) THEN yhighmixp1 = [yhighmixp[good1mixp]]  ELSE yhighmixp1 = [d]
; => Define MIXED data for 1998-09-24
IF (good2mixp[0] GE 0) THEN xdatmixp2  = [xmixpu[good2mixp]]     ELSE xdatmixp2  = [d]
IF (good2mixp[0] GE 0) THEN ydatmixp2  = [avg_ydmixp[good2mixp]] ELSE ydatmixp2  = [d]
IF (good2mixp[0] GE 0) THEN ylowmixp2  = [ylowmixp[good2mixp]]   ELSE ylowmixp2  = [d]
IF (good2mixp[0] GE 0) THEN yhighmixp2 = [yhighmixp[good2mixp]]  ELSE yhighmixp2 = [d]
; => Define MIXED data for 2000-02-11
IF (good3mixp[0] GE 0) THEN xdatmixp3  = [xmixpu[good3mixp]]     ELSE xdatmixp3  = [d]
IF (good3mixp[0] GE 0) THEN ydatmixp3  = [avg_ydmixp[good3mixp]] ELSE ydatmixp3  = [d]
IF (good3mixp[0] GE 0) THEN ylowmixp3  = [ylowmixp[good3mixp]]   ELSE ylowmixp3  = [d]
IF (good3mixp[0] GE 0) THEN yhighmixp3 = [yhighmixp[good3mixp]]  ELSE yhighmixp3 = [d]



fpref    = 'Wave-Amp_vs_Normal-Dist-cwpp_'
suffx    = 'Avg-per-unique-normal-dist_plusminus-STDDEV'
outspr   = ['1997-12-10 ','1998-08-26 ','1998-09-24 ','2000-02-11 ']
yra      = [0.01,15.0]
xra      = [1d0,6d4]
xttl     = 'L!Dn!N (c/!7x!3'+'!Dpe!N'+')'
nlhwstr  = STRING(FORMAT='(I3.3)',[nlhw0,nlhw1,nlhw2,nlhw3])
nmixmstr = STRING(FORMAT='(I3.3)',[nmix0m,nmix1m,nmix2m,nmix3m])
nmixpstr = STRING(FORMAT='(I3.3)',[nmix0p,nmix1p,nmix2p,nmix3p])

;--------------------------------------------------
; => Low Freq. Only
;--------------------------------------------------
; => Define data for 1997-12-10
xdat0  = [xdatlhw0,xdatmixm0,xdatmixp0]
ydat0  = [ydatlhw0,ydatmixm0,ydatmixp0]
ydatl0 = [ylowlhw0,ylowmixm0,ylowmixp0]
ydath0 = [yhighlhw0,yhighmixm0,yhighmixp0]
; => Define data for 1998-08-26
xdat1  = [xdatlhw1,xdatmixm1,xdatmixp1]
ydat1  = [ydatlhw1,ydatmixm1,ydatmixp1]
ydatl1 = [ylowlhw1,ylowmixm1,ylowmixp1]
ydath1 = [yhighlhw1,yhighmixm1,yhighmixp1]
; => Define data for 1998-09-24
xdat2  = [xdatlhw2,xdatmixm2,xdatmixp2]
ydat2  = [ydatlhw2,ydatmixm2,ydatmixp2]
ydatl2 = [ylowlhw2,ylowmixm2,ylowmixp2]
ydath2 = [yhighlhw2,yhighmixm2,yhighmixp2]
; => Define data for 2000-02-11
xdat3  = [xdatlhw3,xdatmixm3,xdatmixp3]
ydat3  = [ydatlhw3,ydatmixm3,ydatmixp3]
ydatl3 = [ylowlhw3,ylowmixm3,ylowmixp3]
ydath3 = [yhighlhw3,yhighmixm3,yhighmixp3]

outxy  = outspr+'['+nlhwstr+' LHW, '+nmixmstr+' MIXED (-), '+nmixpstr+' MIXED (+)]'
yttl   = 'Avg. Wave Amplitude [LHW and MIXED]'+'!C'+'[Low Freq. Only, nT]'
fname  = fpref[0]+'LHW-and-MIXED_LowF-Only_'+suffx[0]

;--------------------------------------------------
; => Low Freq. Only
;--------------------------------------------------
; => Define data for 1997-12-10
xdat0  = [xdatmixm0,xdatmixp0]
ydat0  = [ydatmixm0,ydatmixp0]
ydatl0 = [ylowmixm0,ylowmixp0]
ydath0 = [yhighmixm0,yhighmixp0]
; => Define data for 1998-08-26
xdat1  = [xdatmixm1,xdatmixp1]
ydat1  = [ydatmixm1,ydatmixp1]
ydatl1 = [ylowmixm1,ylowmixp1]
ydath1 = [yhighmixm1,yhighmixp1]
; => Define data for 1998-09-24
xdat2  = [xdatmixm2,xdatmixp2]
ydat2  = [ydatmixm2,ydatmixp2]
ydatl2 = [ylowmixm2,ylowmixp2]
ydath2 = [yhighmixm2,yhighmixp2]
; => Define data for 2000-02-11
xdat3  = [xdatmixm3,xdatmixp3]
ydat3  = [ydatmixm3,ydatmixp3]
ydatl3 = [ylowmixm3,ylowmixp3]
ydath3 = [yhighmixm3,yhighmixp3]

outxy  = outspr+'['+nmixmstr+' MIXED (-), '+nmixpstr+' MIXED (+)]'
yttl   = 'Avg. Wave Amplitude [MIXED]'+'!C'+'[Low Freq. Only, nT]'
fname  = fpref[0]+'MIXED_LowF-Only_'+suffx[0]


; => Plot results
pstr   = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl,NODATA:1,YLOG:1,$
          XLOG:1,YSTYLE:1,XSTYLE:1}
  PLOT,xdat0,ydat0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl0,ydath0,/DATA,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl1,ydath1,/DATA,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl2,ydath2,/DATA,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl3,ydath3,/DATA,COLOR= 50
    XYOUTS,200.,10.,/DATA,outxy[0],COLOR=250
    XYOUTS,200.,8. ,/DATA,outxy[1],COLOR=200
    XYOUTS,200.,6. ,/DATA,outxy[2],COLOR=150
    XYOUTS,200.,4. ,/DATA,outxy[3],COLOR= 50

popen,fname[0],/LAND
  PLOT,xdat0,ydat0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl0,ydath0,/DATA,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl1,ydath1,/DATA,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl2,ydath2,/DATA,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl3,ydath3,/DATA,COLOR= 50
    XYOUTS,200.,10.,/DATA,outxy[0],COLOR=250
    XYOUTS,200.,8. ,/DATA,outxy[1],COLOR=200
    XYOUTS,200.,6. ,/DATA,outxy[2],COLOR=150
    XYOUTS,200.,4. ,/DATA,outxy[3],COLOR= 50
pclose

;-----------------------------------------------------------------------------------------
; => 
;-----------------------------------------------------------------------------------------
unq0   = UNIQ(ndist0,SORT(ndist0))
unq1   = UNIQ(ndist1,SORT(ndist1))
unq2   = UNIQ(ndist2,SORT(ndist2))
unq3   = UNIQ(ndist3,SORT(ndist3))
PRINT,'; ', ndist0[unq0]
PRINT,'; ', ndist1[unq1]
PRINT,'; ', ndist2[unq2]
PRINT,'; ', ndist3[unq3]
;        7.9597224
;        13.429842       416.64735       667.75710       928.07153       1041.8012       1193.4339       1216.4665       1254.3961       1291.4179       1304.8481       1339.4610
;        46.781878       3460.6698       4182.1783       18890.282       38681.677       41466.207       42968.015       43441.352       44164.658       46582.126       46639.354       47394.326       53874.104
;        11.040130       28.528657       53.708517       488.17873       516.99811       38036.852       39336.296       39345.457

HELP, unq0, unq1, unq2, unq3
;    UNQ0            LONG      =           31
;    UNQ1            LONG      = Array[11]
;    UNQ2            LONG      = Array[13]
;    UNQ3            LONG      = Array[8]

gels0  = (array_where(ndist0,ndist0[unq0],/N_UNIQ))[*,0]
gels1  = (array_where(ndist1,ndist1[unq1],/N_UNIQ))[*,0]
gels2  = (array_where(ndist2,ndist2[unq2],/N_UNIQ))[*,0]
gels3  = (array_where(ndist3,ndist3[unq3],/N_UNIQ))[*,0]
HELP, gels0, gels1, gels2, gels3
;    GELS0           LONG      = Array[32]
;    GELS1           LONG      = Array[119]
;    GELS2           LONG      = Array[172]
;    GELS3           LONG      = Array[108]

xdat00 = DBLARR(N_ELEMENTS(unq0))
ydat00 = DBLARR(N_ELEMENTS(unq0))
dydat0 = DBLARR(N_ELEMENTS(unq0))
xdat01 = DBLARR(N_ELEMENTS(unq1))
ydat01 = DBLARR(N_ELEMENTS(unq1))
dydat1 = DBLARR(N_ELEMENTS(unq1))
xdat02 = DBLARR(N_ELEMENTS(unq2))
ydat02 = DBLARR(N_ELEMENTS(unq2))
dydat2 = DBLARR(N_ELEMENTS(unq2))
xdat03 = DBLARR(N_ELEMENTS(unq3))
ydat03 = DBLARR(N_ELEMENTS(unq3))
dydat3 = DBLARR(N_ELEMENTS(unq3))

FOR j=0L, N_ELEMENTS(unq0) - 1L DO BEGIN                            $
  gels0     = (array_where(ndist0,ndist0[unq0[j]],/N_UNIQ))[*,0]  & $
  xdat00[j] = ndist0[unq0[j]]                                     & $
  ydat00[j] = MEAN(bamp0[gels0],/NAN)                             & $
  dydat0[j] = STDDEV(bamp0[gels0],/NAN)

FOR j=0L, N_ELEMENTS(unq1) - 1L DO BEGIN                            $
  gels0     = (array_where(ndist1,ndist1[unq1[j]],/N_UNIQ))[*,0]  & $
  xdat01[j] = ndist1[unq1[j]]                                     & $
  ydat01[j] = MEAN(bamp1[gels0],/NAN)                             & $
  dydat1[j] = STDDEV(bamp1[gels0],/NAN)

FOR j=0L, N_ELEMENTS(unq2) - 1L DO BEGIN                            $
  gels0     = (array_where(ndist2,ndist2[unq2[j]],/N_UNIQ))[*,0]  & $
  xdat02[j] = ndist2[unq2[j]]                                     & $
  ydat02[j] = MEAN(bamp2[gels0],/NAN)                             & $
  dydat2[j] = STDDEV(bamp2[gels0],/NAN)

FOR j=0L, N_ELEMENTS(unq3) - 1L DO BEGIN                            $
  gels0     = (array_where(ndist3,ndist3[unq3[j]],/N_UNIQ))[*,0]  & $
  xdat03[j] = ndist3[unq3[j]]                                     & $
  ydat03[j] = MEAN(bamp3[gels0],/NAN)                             & $
  dydat3[j] = STDDEV(bamp3[gels0],/NAN)


fpref  = 'Wave-Amp_vs_Normal-Dist-cwpp_'
outspr = ['1997-12-10 ','1998-08-26 ','1998-09-24 ','2000-02-11 ']
yra    = [0.01,15.0]
xra    = [1d0,6d4]
xttl   = 'L!Dn!N (c/!7x!3'+'!Dpe!N'+')'
yttl   = 'Avg. Wave Amplitude [ALL]'+'!C'+'[Filtered Peak, nT]'
fname  = fpref[0]+'ALL-Events'
outxy  = outspr+'['+nlhwstr+' LHW, '+nwhistr+' WW, '+nmixstr+' MIXED]'

pstr   = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl,NODATA:1,YLOG:1,$
          XLOG:1,YSTYLE:1,XSTYLE:1}
  PLOT,xdat00,ydat00,_EXTRA=pstr
    OPLOT,xdat00,ydat00,PSYM=5,COLOR=250
    OPLOT,xdat01,ydat01,PSYM=5,COLOR=200
    OPLOT,xdat02,ydat02,PSYM=5,COLOR=150
    OPLOT,xdat03,ydat03,PSYM=5,COLOR= 50
    ERRPLOT,xdat00,(ydat00-dydat0) > yra[0],(ydat00+dydat0) < yra[1],/DATA,COLOR=250
    ERRPLOT,xdat01,(ydat01-dydat1) > yra[0],(ydat01+dydat1) < yra[1],/DATA,COLOR=200
    ERRPLOT,xdat02,(ydat02-dydat2) > yra[0],(ydat02+dydat2) < yra[1],/DATA,COLOR=150
    ERRPLOT,xdat03,(ydat03-dydat3) > yra[0],(ydat03+dydat3) < yra[1],/DATA,COLOR= 50
    XYOUTS,200.,10.,/DATA,outxy[0],COLOR=250
    XYOUTS,200.,8. ,/DATA,outxy[1],COLOR=200
    XYOUTS,200.,6. ,/DATA,outxy[2],COLOR=150
    XYOUTS,200.,4. ,/DATA,outxy[3],COLOR= 50

popen,fname[0],/LAND
  PLOT,xdat00,ydat00,_EXTRA=pstr
    OPLOT,xdat00,ydat00,PSYM=5,COLOR=250
    OPLOT,xdat01,ydat01,PSYM=5,COLOR=200
    OPLOT,xdat02,ydat02,PSYM=5,COLOR=150
    OPLOT,xdat03,ydat03,PSYM=5,COLOR= 50
    ERRPLOT,xdat00,(ydat00-dydat0) > yra[0],(ydat00+dydat0) < yra[1],/DATA,COLOR=250
    ERRPLOT,xdat01,(ydat01-dydat1) > yra[0],(ydat01+dydat1) < yra[1],/DATA,COLOR=200
    ERRPLOT,xdat02,(ydat02-dydat2) > yra[0],(ydat02+dydat2) < yra[1],/DATA,COLOR=150
    ERRPLOT,xdat03,(ydat03-dydat3) > yra[0],(ydat03+dydat3) < yra[1],/DATA,COLOR= 50
    XYOUTS,200.,10.,/DATA,outxy[0],COLOR=250
    XYOUTS,200.,8. ,/DATA,outxy[1],COLOR=200
    XYOUTS,200.,6. ,/DATA,outxy[2],COLOR=150
    XYOUTS,200.,4. ,/DATA,outxy[3],COLOR= 50
pclose

;    OPLOTERR,xdat00,ydat00,dydat0,5
;    OPLOTERR,xdat01,ydat01,dydat1,5
;    OPLOTERR,xdat02,ydat02,dydat2,5
;    OPLOTERR,xdat03,ydat03,dydat3,5

;-----------------------------------------------------------------------------------------
; => Separate f < flh from f > flh
;-----------------------------------------------------------------------------------------
test_leq_lm = (frest_lfkm LE wlh) AND (frest_hfkm LE wlh)
test_leq_lp = (frest_lfkp LE wlh) AND (frest_hfkp LE wlh)
good_lowmn = WHERE(test_leq_lm,gdlm,COMPLEMENT=bad_lowmn,NCOMPLEMENT=bdlm)
good_lowpl = WHERE(test_leq_lp,gdlp,COMPLEMENT=bad_lowpl,NCOMPLEMENT=bdlp)
PRINT,'; ',gdlm,gdlp,bdlm,bdlp
;          215          15         216         416
good_higmn = bad_lowmn
good_higpl = bad_lowpl


;test_leq_lm = (frest_lfkm LE wlh)
;test_leq_lp = (frest_lfkp LE wlh)
;test_leq_hm = (frest_hfkm LE wlh)
;test_leq_hp = (frest_hfkp LE wlh)
;good_lowmn = WHERE(test_leq_lm,gdlm,COMPLEMENT=bad_lowmn,NCOMPLEMENT=bdlm)
;good_lowpl = WHERE(test_leq_lp,gdlp,COMPLEMENT=bad_lowpl,NCOMPLEMENT=bdlp)
;PRINT,'; ',gdlm,gdlp,bdlm,bdlp
;          293         139         138         292
;
;good_higmn = WHERE(test_leq_hm,gdhm,COMPLEMENT=bad_higmn,NCOMPLEMENT=bdhm)
;good_higpl = WHERE(test_leq_hp,gdhp,COMPLEMENT=bad_higpl,NCOMPLEMENT=bdhp)
;PRINT,'; ',gdhm,gdhp,bdhm,bdhp
;          215          15         216         416


;test_leq_l = (frest_lfkm LE wlh) OR  (frest_lfkp LE wlh)
;test_leq_h = (frest_hfkm LE wlh) OR  (frest_hfkp LE wlh)
;test_leq_m = (frest_lfkm LE wlh) OR  (frest_hfkm LE wlh)
;test_leq_p = (frest_lfkp LE wlh) OR  (frest_hfkp LE wlh)
;leq_testlw = (frest_lfkm LE wlh) OR  (frest_lfkp LE wlh)
;leq_testhg = (frest_hfkm LE wlh) OR  (frest_hfkp LE wlh)
;min_testlw = (frest_lfkm LE wlh) AND (frest_hfkm LE wlh)
;min_testhg = (frest_lfkm GT wlh) AND (frest_hfkm GT wlh)
;plu_testlw = (frest_lfkp LE wlh) AND (frest_hfkp LE wlh)
;plu_testhg = (frest_lfkp GT wlh) AND (frest_hfkp GT wlh)


; => Plot histograms of data
wi,0
wi,1
wi,2
wi,3

;-------------------------------------------
xttl  = '!7b!3'+'!D!9#!3'+',ce!N'              ; => Beta_par,ec plots
midsf = 'Beta-parce'
xr    = [0.15,1.05]
; => Minus Sign
xda0  = beta_pac[good_lowmn]    ; => Good values with f_[low,high] < flh (- sign)
xda2  = beta_pac[good_higmn]    ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = beta_pac[good_lowpl]    ; => Good values with f_[low,high] < flh (+ sign)
xda3  = beta_pac[good_higpl]    ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = '|V!Dsw!N - V!De!N'+'|/V!DTi!N'                   ; => |Vd| plots
midsf = 'Vdrift-SCFrame'
xr    = [0.15,1.50]
; => Minus Sign
xda0  = vdrvti[good_lowmn]      ; => Good values with f_[low,high] < flh (- sign)
xda2  = vdrvti[good_higmn]      ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = vdrvti[good_lowpl]      ; => Good values with f_[low,high] < flh (+ sign)
xda3  = vdrvti[good_higpl]      ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = '|j!Dd!N'+'| [nA m!U-2!N]'             ; => |jd| plots
midsf = 'jdrift-Current'
xr    = [1d2,7.5d2]
; => Minus Sign
xda0  = jdrft[good_lowmn]       ; => Good values with f_[low,high] < flh (- sign)
xda2  = jdrft[good_higmn]       ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = jdrft[good_lowpl]       ; => Good values with f_[low,high] < flh (+ sign)
xda3  = jdrft[good_higpl]       ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!D!9x!3'+',c!N/T!D!9#!3'+',c!N'      ; => Teh_perp/Teh_para plots
midsf = 'Tanis-core'
xr    = [0.5,1.5]
; => Minus Sign
xda0  = tanis_c[good_lowmn]     ; => Good values with f_[low,high] < flh (- sign)
xda2  = tanis_c[good_higmn]     ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = tanis_c[good_lowpl]     ; => Good values with f_[low,high] < flh (+ sign)
xda3  = tanis_c[good_higpl]     ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!D!9x!3'+',h!N/T!D!9#!3'+',h!N'      ; => Teh_perp/Teh_para plots
midsf = 'Tanis-halo'
xr    = [0.5,2.25]
; => Minus Sign
xda0  = tanis_h[good_lowmn]     ; => Good values with f_[low,high] < flh (- sign)
xda2  = tanis_h[good_higmn]     ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = tanis_h[good_lowpl]     ; => Good values with f_[low,high] < flh (+ sign)
xda3  = tanis_h[good_higpl]     ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!D!9#!3'+',h!N/T!D!9#!3'+',c!N'      ; => Teh_para/Tec_para plots
midsf = 'Thpara-Tcpara'
xr    = [1.5,10.5]
; => Minus Sign
xda0  = thc_par[good_lowmn]     ; => Good values with f_[low,high] < flh (- sign)
xda2  = thc_par[good_higmn]     ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = thc_par[good_lowpl]     ; => Good values with f_[low,high] < flh (+ sign)
xda3  = thc_par[good_higpl]     ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = '|Q!De!N'+'| [keV km/s cm!U-3!N'+']'   ; => |Qe| plots
midsf = 'Qe'
xr    = [1d1,8.5d2]
; => Minus Sign
xda0  = qmag[good_lowmn]*1d-3   ; => Good values with f_[low,high] < flh (- sign)
xda2  = qmag[good_higmn]*1d-3   ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = qmag[good_lowpl]*1d-3   ; => Good values with f_[low,high] < flh (+ sign)
xda3  = qmag[good_higpl]*1d-3   ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!Deh!N'+'/T!Dec!N'                   ; => <Teh>/<Tec> plots
midsf = 'Teh-Tec'
xr    = [2.0,9.0]
; => Minus Sign
xda0  = tehc_avg[good_lowmn]    ; => Good values with f_[low,high] < flh (- sign)
xda2  = tehc_avg[good_higmn]    ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = tehc_avg[good_lowpl]    ; => Good values with f_[low,high] < flh (+ sign)
xda3  = tehc_avg[good_higpl]    ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!De!N'+'/T!Di!N'                     ; => <Te>/<Ti> plots
midsf = 'Te-Ti'
xr    = [0.4,2.15]
; => Minus Sign
xda0  = te_tiav[good_lowmn]     ; => Good values with f_[low,high] < flh (- sign)
xda2  = te_tiav[good_higmn]     ; => Good values with f > flh (- sign)
; => Plus Sign
xda1  = te_tiav[good_lowpl]     ; => Good values with f_[low,high] < flh (+ sign)
xda3  = te_tiav[good_higpl]     ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------

nb    = 8L
lhwpr = 'TDSS_Freq-LT-Flh_LHWs_IP-shocks_'
whipr = 'TDSS_Freq-GT-Flh_WWss_IP-shocks_'
mins0 = ' [f!Drest,[low,high]!N < f!Dlh!N (- sign)]'
mins1 = ' [f!Drest,[low,high]!N < f!Dlh!N (+ sign)]'
mins2 = ' [f!Drest,[low,high]!N > f!Dlh!N (- sign)]'
mins3 = ' [f!Drest,[low,high]!N > f!Dlh!N (+ sign)]'
fnam0 = lhwpr[0]+midsf[0]+'_minus-sign_histogram'
fnam1 = lhwpr[0]+midsf[0]+'_pluss-sign_histogram'
fnam2 = whipr[0]+midsf[0]+'_minus-sign_histogram'
fnam3 = whipr[0]+midsf[0]+'_pluss-sign_histogram'

WSET,0
xdat  = xda0
ttle  = xttl+mins0[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam0[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

WSET,1
xdat  = xda1
ttle  = xttl+mins1[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam1[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

WSET,2
xdat  = xda2
ttle  = xttl+mins2[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam2[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

WSET,3
xdat  = xda3
ttle  = xttl+mins3[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam3[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose


;-----------------------------------------------------------------------------------------
; => separate by wave type
;-----------------------------------------------------------------------------------------
evns_lhw = [00010618L,00010684L,02014864L,02015635L,02015691L,02017428L,$
            02018091L]
evns_mix = [03408599L,00010488L,02011249L,02011723L,02011820L,02013165L,$
            02015299L,02015304L,02015650L,02017555L,23145465L,23145474L,$
            23145484L]
evns_whi = [00010807L,00010832L,00010868L,00010881L,00010888L,00010895L,$
            00010923L,00010937L,23145603L,23145610L,23153276L,23154909L,$
            23155087L]
good_lhw = array_where(evns,evns_lhw,/N_UNIQ)
good_mix = array_where(evns,evns_mix,/N_UNIQ)
good_whi = array_where(evns,evns_whi,/N_UNIQ)
HELP, good_lhw, good_mix, good_whi
;  GOOD_LHW        LONG      = Array[54, 2]
;  GOOD_MIX        LONG      = Array[239, 2]
;  GOOD_WHI        LONG      = Array[138, 2]

; => Mixed Modes
fr_lfkm_mix = frest_lfkm[good_mix[*,0]]
fr_lfkp_mix = frest_lfkp[good_mix[*,0]]
fr_hfkm_mix = frest_hfkm[good_mix[*,0]]
fr_hfkp_mix = frest_hfkp[good_mix[*,0]]
; => separate Mixed Modes into LHW and WW based on freq.
;fmix_leq_lm = (fr_lfkm_mix LE wlh) AND (fr_hfkm_mix LE wlh)
;fmix_leq_lp = (fr_lfkp_mix LE wlh) AND (fr_hfkp_mix LE wlh)
fmix_leq_lm = (fr_lfkm_mix LE wlh)
fmix_leq_hm = (fr_hfkm_mix LE wlh)
fmix_leq_lp = (fr_lfkp_mix LE wlh)
fmix_leq_hp = (fr_hfkp_mix LE wlh)

good_mix_lm = WHERE(fmix_leq_lm,gdlmx,COMPLEMENT=bad_mix_lm,NCOMPLEMENT=bdlmx)
good_mix_lp = WHERE(fmix_leq_lp,gdlpx,COMPLEMENT=bad_mix_lp,NCOMPLEMENT=bdlpx)
PRINT,'; ',gdlmx,gdlpx,bdlmx,bdlpx
;          239         155           0          84

good_mix_hm = WHERE(fmix_leq_hm,gdhmx,COMPLEMENT=bad_mix_hm,NCOMPLEMENT=bdhmx)
good_mix_hp = WHERE(fmix_leq_hp,gdhpx,COMPLEMENT=bad_mix_hp,NCOMPLEMENT=bdhpx)
PRINT,'; ',gdhmx,gdhpx,bdhmx,bdhpx
;          144          11          95         228


; => LHW Mode elements
good_lhw0    = good_lhw[*,0]
good_lhwlm   = good_mix[good_mix_lm,0]
good_lhwlp   = good_mix[good_mix_lp,0]
good_lhwhm   = good_mix[good_mix_hm,0]
good_lhwhp   = good_mix[good_mix_hp,0]
good_lhwa    = [good_lhw0,good_lhwlm,good_lhwlp]
good_lhwa    = good_lhwa[UNIQ(good_lhwa,SORT(good_lhwa))]

; => WW Mode elements
good_whi0    = good_whi[*,0]
IF (bdlmx GT 0) THEN good_whilm = good_mix[bad_mix_lm,0] ELSE good_whilm = good_whi0[0]  ; => removed with UNIQ.PRO
good_whilp   = good_mix[bad_mix_lp,0]
good_whihm   = good_mix[bad_mix_hm,0]
good_whihp   = good_mix[bad_mix_hp,0]
good_whia    = [good_whi0,good_whilm,good_whilp]
good_whia    = good_whia[UNIQ(good_whia,SORT(good_whia))]

HELP, good_lhwa, good_whia
;  GOOD_LHWA       LONG      = Array[293]
;  GOOD_WHIA       LONG      = Array[222]
bad_over     = array_where(good_lhwa,good_whia,/N_UNIQ,NCOMP1=comp1,NCOMP2=comp2)
HELP, comp1, comp2
;  COMP1           LONG      = Array[209]
;  COMP2           LONG      = Array[138]
good_lhwa    = good_lhwa[comp1]
good_whia    = good_whia[comp2]


; => LHW Modes
fr_lfkm_lhw  = frest_lfkm[good_lhwa]
fr_lfkp_lhw  = frest_lfkp[good_lhwa]
fr_hfkm_lhw  = frest_hfkm[good_lhwa]
fr_hfkp_lhw  = frest_hfkp[good_lhwa]  ; => good_lhw[*,0]
lhw_amps     = filtamp[good_lhwa]
te_ti_lhw    = te_tiav[good_lhwa]
teh_tec_lhw  = tehc_avg[good_lhwa]
tanisc_lhw   = tanis_c[good_lhwa]
tanish_lhw   = tanis_h[good_lhwa]
thc_par_lhw  = thc_par[good_lhwa]
jdrft_lhw    = jdrft[good_lhwa]
vdrvti_lhw   = vdrvti[good_lhwa]
beta_pac_lhw = beta_pac[good_lhwa]
qmag_lhw     = qmag[good_lhwa]

; => WW Modes
fr_lfkm_whi  = frest_lfkm[good_whia]
fr_lfkp_whi  = frest_lfkp[good_whia]
fr_hfkm_whi  = frest_hfkm[good_whia]
fr_hfkp_whi  = frest_hfkp[good_whia]
whi_amps     = filtamp[good_whia]
te_ti_whi    = te_tiav[good_whia]
teh_tec_whi  = tehc_avg[good_whia]
tanisc_whi   = tanis_c[good_whia]
tanish_whi   = tanis_h[good_whia]
thc_par_whi  = thc_par[good_whia]
jdrft_whi    = jdrft[good_whia]
vdrvti_whi   = vdrvti[good_whia]
beta_pac_whi = beta_pac[good_whia]
qmag_whi     = qmag[good_whia]



test_lhw_lm = (fr_lfkm_lhw LE wlh) AND (fr_hfkm_lhw LE wlh)
test_lhw_lp = (fr_lfkp_lhw LE wlh) AND (fr_hfkp_lhw LE wlh)
test_whi_lm = (fr_lfkm_whi LE wlh) AND (fr_hfkm_whi LE wlh)
test_whi_lp = (fr_lfkp_whi LE wlh) AND (fr_hfkp_whi LE wlh)
; => Elements of LHW Modes with f_[low,high] < flh (- sign)
good_lhwmn  = WHERE(test_lhw_lm,gdlhm,COMPLEMENT=bad_lhwmn,NCOMPLEMENT=bdlhm)
; => Elements of LHW Modes with f_[low,high] < flh (+ sign)
good_lhwpl  = WHERE(test_lhw_lp,gdlhp,COMPLEMENT=bad_lhwpl,NCOMPLEMENT=bdlhp)
PRINT,'; ',gdlhm,gdlhp,bdlhm,bdlhp
;           90          16         119         193
good_hhwmn = bad_lhwmn  ; => Elements of LHW Modes with f_[low,high] > flh (- sign)
good_hhwpl = bad_lhwpl  ; => Elements of LHW Modes with f_[low,high] > flh (+ sign)

; => Elements of WW  Modes with f_[low,high] < flh (- sign)
good_whimn  = WHERE(test_whi_lm,gdwhm,COMPLEMENT=bad_whimn,NCOMPLEMENT=bdwhm)
; => Elements of WW  Modes with f_[low,high] < flh (+ sign)
good_whipl  = WHERE(test_whi_lp,gdwhp,COMPLEMENT=bad_whipl,NCOMPLEMENT=bdwhp)
PRINT,'; ',gdwhm,gdwhp,bdwhm,bdwhp
;            0           0         138         138
good_hhimn = bad_whimn  ; => Elements of WW  Modes with f_[low,high] > flh (- sign)
good_hhipl = bad_whipl  ; => Elements of WW  Modes with f_[low,high] > flh (+ sign)




glhw  = 1
gwhi  = 1
nb    = 8L
lhwle = 'TDSS_Freq-LE-Flh_LHW-Only_IP-shocks_'
lhwgt = 'TDSS_Freq-GT-Flh_LHW-Only_IP-shocks_'
whilt = 'TDSS_Freq-LE-Flh_WW-Only_IP-shocks_'
whigt = 'TDSS_Freq-GT-Flh_WW-Only_IP-shocks_'
lhwtt = ' [LHW, '
whitt = ' [WWs, '

IF (glhw) THEN fprefl = lhwle ELSE fprefl = whilt
IF (glhw) THEN fprefh = lhwgt ELSE fprefh = whigt
IF (glhw) THEN ttpref = lhwtt ELSE ttpref = whitt

IF (glhw) THEN gd_lowmn = good_lhwa[good_lhwmn] ELSE gd_lowmn = good_whia[0]
IF (glhw) THEN gd_higmn = good_lhwa[good_hhwmn] ELSE gd_higmn = good_whia[good_hhimn]

IF (glhw) THEN gd_lowpl = good_lhwa[good_lhwpl] ELSE gd_lowpl = good_whia[0]
IF (glhw) THEN gd_higpl = good_lhwa[good_hhwpl] ELSE gd_higpl = good_whia[good_hhipl]
;-------------------------------------------
xttl  = '!7b!3'+'!D!9#!3'+',ce!N'              ; => Beta_par,ec plots
midsf = 'Beta-parce'
xr    = [0.15,1.05]
; => Minus Sign
xda0  = beta_pac[gd_lowmn]    ; => Good values with f_[low,high] < flh (- sign)
xda2  = beta_pac[gd_higmn]    ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = beta_pac[gd_lowpl]    ; => Good values with f_[low,high] < flh (+ sign)
xda3  = beta_pac[gd_higpl]    ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = '|V!Dsw!N - V!De!N'+'|/V!DTi!N'                   ; => |Vd| plots
midsf = 'Vdrift-SCFrame'
xr    = [0.15,1.50]
; => Minus Sign
xda0  = vdrvti[gd_lowmn]      ; => Good values with f_[low,high] < flh (- sign)
xda2  = vdrvti[gd_higmn]      ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = vdrvti[gd_lowpl]      ; => Good values with f_[low,high] < flh (+ sign)
xda3  = vdrvti[gd_higpl]      ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = '|j!Dd!N'+'| [nA m!U-2!N]'             ; => |jd| plots
midsf = 'jdrift-Current'
xr    = [1d2,7.5d2]
; => Minus Sign
xda0  = jdrft[gd_lowmn]       ; => Good values with f_[low,high] < flh (- sign)
xda2  = jdrft[gd_higmn]       ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = jdrft[gd_lowpl]       ; => Good values with f_[low,high] < flh (+ sign)
xda3  = jdrft[gd_higpl]       ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!D!9x!3'+',c!N/T!D!9#!3'+',c!N'      ; => Teh_perp/Teh_para plots
midsf = 'Tanis-core'
xr    = [0.5,1.5]
; => Minus Sign
xda0  = tanis_c[gd_lowmn]     ; => Good values with f_[low,high] < flh (- sign)
xda2  = tanis_c[gd_higmn]     ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = tanis_c[gd_lowpl]     ; => Good values with f_[low,high] < flh (+ sign)
xda3  = tanis_c[gd_higpl]     ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!D!9x!3'+',h!N/T!D!9#!3'+',h!N'      ; => Teh_perp/Teh_para plots
midsf = 'Tanis-halo'
xr    = [0.5,2.25]
; => Minus Sign
xda0  = tanis_h[gd_lowmn]     ; => Good values with f_[low,high] < flh (- sign)
xda2  = tanis_h[gd_higmn]     ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = tanis_h[gd_lowpl]     ; => Good values with f_[low,high] < flh (+ sign)
xda3  = tanis_h[gd_higpl]     ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!D!9#!3'+',h!N/T!D!9#!3'+',c!N'      ; => Teh_para/Tec_para plots
midsf = 'Thpara-Tcpara'
xr    = [1.5,10.5]
; => Minus Sign
xda0  = thc_par[gd_lowmn]     ; => Good values with f_[low,high] < flh (- sign)
xda2  = thc_par[gd_higmn]     ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = thc_par[gd_lowpl]     ; => Good values with f_[low,high] < flh (+ sign)
xda3  = thc_par[gd_higpl]     ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = '|Q!De!N'+'| [keV km/s cm!U-3!N'+']'   ; => |Qe| plots
midsf = 'Qe'
xr    = [1d1,8.5d2]
; => Minus Sign
xda0  = qmag[gd_lowmn]*1d-3   ; => Good values with f_[low,high] < flh (- sign)
xda2  = qmag[gd_higmn]*1d-3   ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = qmag[gd_lowpl]*1d-3   ; => Good values with f_[low,high] < flh (+ sign)
xda3  = qmag[gd_higpl]*1d-3   ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!Deh!N'+'/T!Dec!N'                   ; => <Teh>/<Tec> plots
midsf = 'Teh-Tec'
xr    = [2.0,9.0]
; => Minus Sign
xda0  = tehc_avg[gd_lowmn]    ; => Good values with f_[low,high] < flh (- sign)
xda2  = tehc_avg[gd_higmn]    ; => Good values with f_[low,high] > flh (- sign)
; => Plus Sign
xda1  = tehc_avg[gd_lowpl]    ; => Good values with f_[low,high] < flh (+ sign)
xda3  = tehc_avg[gd_higpl]    ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------
xttl  = 'T!De!N'+'/T!Di!N'                     ; => <Te>/<Ti> plots
midsf = 'Te-Ti'
xr    = [0.4,2.15]
; => Minus Sign
xda0  = te_tiav[gd_lowmn]     ; => Good values with f_[low,high] < flh (- sign)
xda2  = te_tiav[gd_higmn]     ; => Good values with f > flh (- sign)
; => Plus Sign
xda1  = te_tiav[gd_lowpl]     ; => Good values with f_[low,high] < flh (+ sign)
xda3  = te_tiav[gd_higpl]     ; => Good values with f_[low,high] > flh (+ sign)

;-------------------------------------------

mins0 = ttpref[0]+'f!Drest,[low,high]!N < f!Dlh!N (- sign)]'
mins1 = ttpref[0]+'f!Drest,[low,high]!N < f!Dlh!N (+ sign)]'
mins2 = ttpref[0]+'f!Drest,[low,high]!N > f!Dlh!N (- sign)]'
mins3 = ttpref[0]+'f!Drest,[low,high]!N > f!Dlh!N (+ sign)]'

fnam0 = fprefl[0]+midsf[0]+'_minus-sign_histogram'
fnam1 = fprefl[0]+midsf[0]+'_pluss-sign_histogram'
fnam2 = fprefh[0]+midsf[0]+'_minus-sign_histogram'
fnam3 = fprefh[0]+midsf[0]+'_pluss-sign_histogram'


WSET,0
xdat  = xda0
ttle  = xttl+mins0[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam0[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

WSET,1
xdat  = xda1
ttle  = xttl+mins1[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam1[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

WSET,2
xdat  = xda2
ttle  = xttl+mins2[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam2[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

WSET,3
xdat  = xda3
ttle  = xttl+mins3[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam3[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose


; => special cases
mins0 = ttpref[0]+'f!Drest,[low,high]!N < f!Dlh!N (both signs)]'
mins1 = ttpref[0]+'f!Drest,[low,high]!N > f!Dlh!N (both signs)]'
fnam0 = fprefl[0]+midsf[0]+'_both-signs_histogram'
fnam1 = fprefh[0]+midsf[0]+'_both-sign_histogram'

WSET,0
xdat  = ([xda0,xda1])[UNIQ([gd_lowmn,gd_lowpl],SORT([gd_lowmn,gd_lowpl]))]
ttle  = xttl+mins0[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam0[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

WSET,1
xdat  = ([xda2,xda3])[UNIQ([gd_higmn,gd_higpl],SORT([gd_higmn,gd_higpl]))]
ttle  = xttl+mins1[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fnam1[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

;-----------------------------------------------------------------------------------------
; => Define Y-Title and Y-Values for all amplitude correlation plots
;-----------------------------------------------------------------------------------------
lhwpr = 'TDSS_Freq-LT-Flh_LHWs_IP-shocks_Amp-vs-'
whipr = 'TDSS_Freq-GT-Flh_WWs_IP-shocks_Amp-vs-'
yttl  = 'Wave Amplitude'+'!C'+'[Filtered Peak, nT]'
; => Minus Sign
yda0  = filtamp[good_lowmn]      ; => Good values with f < flh (- sign)
yda2  = filtamp[good_higmn]      ; => Good values with f > flh (- sign)
; => Plus Sign
yda1  = filtamp[good_lowpl]      ; => Good values with f < flh (+ sign)
yda3  = filtamp[good_higpl]      ; => Good values with f > flh (+ sign)

xdaa  = [xda0,xda1,xda2,xda3]
ydaa  = [yda0,yda1,yda2,yda3]
xr    = [MIN(xdaa,/NAN),MAX(xdaa,/NAN)] + [-1d-1*MIN(xdaa,/NAN),1d-1*MAX(xdaa,/NAN)]
yr    = [MIN(ydaa,/NAN),MAX(ydaa,/NAN)] + [-1d-1*MIN(ydaa,/NAN),1d-1*MAX(ydaa,/NAN)]

; => Plot data
wi,0
wi,1
wi,2

pstr = {XRANGE:xr,YRANGE:yr,XTITLE:xttl,YTITLE:yttl,NODATA:1,YLOG:0,$
        XLOG:0,YSTYLE:1,XSTYLE:1}
WSET,0
  PLOT,xda0,yda0,_EXTRA=pstr
    OPLOT,xda0,yda0,PSYM=4,COLOR=250
    OPLOT,xda1,yda1,PSYM=5,COLOR= 50
;    XYOUTS,xposi[0],yposi[0],'!9V!3 = f < f!Dlh!N (- Sign)',/DATA,COLOR=250
;    XYOUTS,xposi[0],yposi[1],'!9V!3 = f > f!Dlh!N (- Sign)',/DATA,COLOR= 50

WSET,1
  PLOT,xda2,yda2,_EXTRA=pstr
    OPLOT,xda2,yda2,PSYM=4,COLOR=250
    OPLOT,xda3,yda3,PSYM=5,COLOR= 50
;    XYOUTS,xposi[0],yposi[0],'+ = Low  Freq. + Sign',/DATA,COLOR=250
;    XYOUTS,xposi[0],yposi[1],'+ = High Freq. + Sign',/DATA,COLOR= 50

WSET,2
  PLOT,xda0,yda0,_EXTRA=pstr
    OPLOT,xda0,yda0,PSYM=4,COLOR=250
    OPLOT,xda1,yda1,PSYM=1,COLOR=200
    OPLOT,xda2,yda2,PSYM=4,COLOR=150
    OPLOT,xda3,yda3,PSYM=1,COLOR= 50
;    XYOUTS,xposi[0],yposi[0],'!9V!3 = Low  Freq. - Sign',/DATA,COLOR=250
;    XYOUTS,xposi[0],yposi[1],'+ = Low  Freq. + Sign',/DATA,COLOR=200
;    XYOUTS,xposi[0],yposi[2],'!9V!3 = High Freq. - Sign',/DATA,COLOR=150
;    XYOUTS,xposi[0],yposi[3],'+ = High Freq. + Sign',/DATA,COLOR= 50


popen,fnam0[0],/LAND
  PLOT,xda0,yda0,_EXTRA=pstr
    OPLOT,xda0,yda0,PSYM=4,COLOR=250
pclose


;    OPLOT,vertx,verty,LINESTYLE=2
;    OPLOT,horix,horiy,LINESTYLE=2
;    OPLOT,xx,yy,LINESTYLE=3
;    XYOUTS,vertx[0]*1.1,verty[0]*1.2,vertl,/DATA
;    XYOUTS,horix[0]*1.1,horiy[0]*1.2,horil,/DATA




;-----------------------------------------------------------------------------------------
; => Re-Calculate index of refraction using now estimated rest frame frequencies
;-----------------------------------------------------------------------------------------
testlm   = cold_plasma_params_2d(bmag,dens,FREQF=frest_lfkm/(2d0*!DPI),ANGLE=thkb,/ONED)
testlp   = cold_plasma_params_2d(bmag,dens,FREQF=frest_lfkp/(2d0*!DPI),ANGLE=thkb,/ONED)
testhm   = cold_plasma_params_2d(bmag,dens,FREQF=frest_hfkm/(2d0*!DPI),ANGLE=thkb,/ONED)
testhp   = cold_plasma_params_2d(bmag,dens,FREQF=frest_hfkp/(2d0*!DPI),ANGLE=thkb,/ONED)
indexlm  = testlm.INDEX_REF_1
alfvinlm = testlm.INDEX_ALFVEN
bad      = WHERE(indexlm LT 0.,bd)
IF (bd GT 0) THEN indexlm[bad] = d
indexlp  = testlp.INDEX_REF_1
alfvinlp = testlp.INDEX_ALFVEN
bad      = WHERE(indexlp LT 0.,bd)
IF (bd GT 0) THEN indexlp[bad] = d
indexhm  = testhm.INDEX_REF_1
alfvinhm = testhm.INDEX_ALFVEN
bad      = WHERE(indexhm LT 0.,bd)
IF (bd GT 0) THEN indexhm[bad] = d
indexhp  = testhp.INDEX_REF_1
alfvinhp = testhp.INDEX_ALFVEN
bad      = WHERE(indexhp LT 0.,bd)
IF (bd GT 0) THEN indexhp[bad] = d
;-----------------------------------------------------------------------------------------
; => Separate f < flh from f > flh
;-----------------------------------------------------------------------------------------
low_test   = (frest_lfkm LE wlh) OR (frest_lfkp LE wlh)
high_test  = (frest_hfkm GT wlh) OR (frest_hfkp GT wlh)
good_low   = WHERE(low_test ,gdl,COMPLEMENT=bad_low ,NCOMPLEMENT=bdl)
good_high  = WHERE(high_test,gdh,COMPLEMENT=bad_high,NCOMPLEMENT=bdh)
PRINT,'; ',gdl,bdl,gdh,bdh
;          293         138         399          32

; => Low Freqs
dran   = [0.,90.]
ttle   = '!7h!3!DkB!N (f !9l!3 f!Dlh!N)'
xttl   = '!7h!3!DkB!N (deg)'
suffx  = 'LowF-LE-flh-Theta-kB_histogram'
fpref  = 'TDSS_All-Events_'
xdat   = thkbl[good_low]

ttle   = '!7h!3!DkV!N (f !9l!3 f!Dlh!N)'
xttl   = '!7h!3!DkV!N (deg)'
suffx  = 'LowF-LE-flh-Theta-kV_histogram'
fpref  = 'TDSS_All-Events_'
xdat   = thkvl[good_low]

ttle   = '!7h!3!DkB!N (f !9l!3 f!Dlh!N)'
xttl   = '!7h!3!DkB!N (deg)'
suffx  = 'HighF-LE-flh-Theta-kB_histogram'
fpref  = 'TDSS_All-Events_'
xdat   = thkbh[bad_high]

ttle   = '!7h!3!DkV!N (f !9l!3 f!Dlh!N)'
xttl   = '!7h!3!DkV!N (deg)'
suffx  = 'HighF-LE-flh-Theta-kV_histogram'
fpref  = 'TDSS_All-Events_'
xdat   = thkvh[bad_high]


fname  = fpref[0]+suffx[0]
  my_histogram_plot,xdat,NBINS=7L,XTTL=xttl,TTLE=ttle,DRANGE=dran
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=7L,XTTL=xttl,TTLE=ttle,DRANGE=dran
pclose


; => High Freqs
dran   = [0.,90.]
ttle   = '!7h!3!DkB!N (f > f!Dlh!N)'
xttl   = '!7h!3!DkB!N (deg)'
suffx  = 'HighF-GT-flh-Theta-kB_histogram'
fpref  = 'TDSS_All-Events_'
xdat   = thkbh[good_high]

ttle   = '!7h!3!DkV!N (f > f!Dlh!N)'
xttl   = '!7h!3!DkV!N (deg)'
suffx  = 'HighF-GT-flh-Theta-kV_histogram'
fpref  = 'TDSS_All-Events_'
xdat   = thkvh[good_high]

ttle   = '!7h!3!DkB!N (f > f!Dlh!N)'
xttl   = '!7h!3!DkB!N (deg)'
suffx  = 'LowF-GT-flh-Theta-kB_histogram'
fpref  = 'TDSS_All-Events_'
xdat   = thkbl[bad_low]

ttle   = '!7h!3!DkV!N (f > f!Dlh!N)'
xttl   = '!7h!3!DkV!N (deg)'
suffx  = 'LowF-GT-flh-Theta-kV_histogram'
fpref  = 'TDSS_All-Events_'
xdat   = thkvl[bad_low]


fname  = fpref[0]+suffx[0]
  my_histogram_plot,xdat,NBINS=7L,XTTL=xttl,TTLE=ttle,DRANGE=dran
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=7L,XTTL=xttl,TTLE=ttle,DRANGE=dran
pclose


;-----------------------------------------------------------------------------------------
; => 
;-----------------------------------------------------------------------------------------

'TDSS_All-Events_HighF-GT-flh-Theta-kB'  ; => 399
'TDSS_All-Events_HighF-LE-flh-Theta-kB'  ; =>  32

'TDSS_All-Events_LowF-GT-flh-Theta-kB'  ; => 138
'TDSS_All-Events_LowF-LE-flh-Theta-kB'  ; => 293



nanp1210 = [0.130/9.10,0.078/9.79,0.107/8.24,0.393/27.6,0.578/26.4]
nanp0826 = [0.266/6.71,0.257/6.76,1.020/18.6,0.825/12.7,0.919/14.4]
nanp0924 = [0.334/7.74,0.342/8.38,1.200/6.64,0.891/19.1,0.803/17.5]
nanp0211 = [0.103/5.08,0.121/5.93,1.610/7.06,0.404/15.8,0.448/16.8]
PRINT,'; ',nanp1210
PRINT,'; ',nanp0826
PRINT,'; ',nanp0924
PRINT,'; ',nanp0211
;     0.0142857   0.00796731    0.0129854    0.0142391    0.0218939
;     0.0396423    0.0380177    0.0548387    0.0649606    0.0638194
;     0.0431525    0.0408115     0.180723    0.0466492    0.0458857
;     0.0202756    0.0204047     0.228045    0.0255696    0.0266667

PRINT,'; ',MEAN(nanp1210),STDDEV(nanp1210)
;     0.0142743   0.00498747
PRINT,'; ',MEAN(nanp0826),STDDEV(nanp0826)
;     0.0522558    0.0128804
PRINT,'; ',MEAN(nanp0924),STDDEV(nanp0924)
;     0.0714443    0.0611323
PRINT,'; ',MEAN(nanp0211),STDDEV(nanp0211)
;     0.0641924    0.0916430





