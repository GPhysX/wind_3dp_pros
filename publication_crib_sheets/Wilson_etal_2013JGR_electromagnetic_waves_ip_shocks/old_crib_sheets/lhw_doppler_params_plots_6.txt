;-----------------------------------------------------------------------------------------
; => Constants
;-----------------------------------------------------------------------------------------
f        = !VALUES.F_NAN
d        = !VALUES.D_NAN
c        = 2.99792458d8      ; -Speed of light in vacuum (m/s)
kB       = 1.380658d-23      ; -Boltzmann Constant (J/K)
K_eV     = 1.160474d4        ; -Conversion = degree Kelvin/eV
epo      = 8.854187817d-12   ; -Permittivity of free space (F/m)
muo      = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)
me       = 9.1093897d-31     ; -Electron mass (kg)
mp       = 1.6726231d-27     ; -Proton mass (kg)
qq       = 1.60217733d-19    ; => Fundamental charge (C)

date     = '121097'
tramp    = '1997-12-10/04:33:14.664'
vshn     = 391.2                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test0    = tdss_lhw_stats_read(DATE=date)
evn0     = test0.EVENT_N
scet0    = test0.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t0   = time_double(scet0) - time_double(tramp)
dist_0   = del_t0*vshn[0]
avg_lfk0 = (test0.K_ST_LOWF_MP + test0.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk0 = (test0.K_ST_highF_MP + test0.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql0   = test0.FREQ_LOW_HIGH[*,0]
freqh0   = test0.FREQ_LOW_HIGH[*,1]
pkamp0   = test0.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp0 = test0.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
thkbl0   = test0.THETA_KB[*,0]
thkbh0   = test0.THETA_KB[*,1]
thkvl0   = test0.THETA_KV[*,0]
thkvh0   = test0.THETA_KV[*,1]
wce0     = (test0.WCE_SE[*,0] + test0.WCE_SE[*,1])/2d0
wpe0     = (test0.WPE_SE[*,0] + test0.WPE_SE[*,1])/2d0
wlh0     = (test0.WLH_SE[*,0] + test0.WLH_SE[*,1])/2d0
vte0     = (test0.VTE_SE[*,0] + test0.VTE_SE[*,1])/2d0
rhoe0    = (test0.RHO_VTCE_SE[*,0] + test0.RHO_VTCE_SE[*,1])/2d0
vsw0     = (test0.VSW_ST + test0.VSW_EN)/2d0
vdr0     = (test0.VDRIFT_ST + test0.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf0    = (test0.MAGF_ST + test0.MAGF_EN)/2d0
dens0    = (test0.NE_SE[*,0] + test0.NE_SE[*,1])/2d0
bmag0    = SQRT(TOTAL(magf0^2,2L,/NAN))
betapa0  = (test0.BETA_PARCE_SE[*,0] + test0.BETA_PARCE_SE[*,1])/2d0
teavg0   = (test0.TE_AVG_SE[*,0] + test0.TE_AVG_SE[*,1])/2d0
tiavg0   = (test0.TI_AVG_SE[*,0] + test0.TI_AVG_SE[*,1])/2d0
vti0     = SQRT(2d0*tiavg0*K_eV*kB/mp)
tecavg0  = (test0.TEC_SE[*,0] + test0.TEC_SE[*,1])/2d0
tehavg0  = (test0.TEH_SE[*,0] + test0.TEH_SE[*,1])/2d0
tparc0   = (test0.TPAR_EC_SE[*,0] + test0.TPAR_EC_SE[*,1])/2d0
tperc0   = (test0.TPER_EC_SE[*,0] + test0.TPER_EC_SE[*,1])/2d0
tparh0   = (test0.TPAR_EH_SE[*,0] + test0.TPAR_EH_SE[*,1])/2d0
tperh0   = (test0.TPER_EH_SE[*,0] + test0.TPER_EH_SE[*,1])/2d0
qmag0    = (test0.QMAG_SE[*,0] + test0.QMAG_SE[*,1])/2d0
kvec0    = test0.KVEC
gnorm80  = [-0.903, 0.168,-0.397]   ; => Using RH08 from JCK's site
gnorm90  = [-0.971, 0.094,-0.218]   ; => Using RH08 from JCK's site
thkn80   = ACOS(my_dot_prod(kvec0,gnorm80,/NOM))*18d1/!DPI
thkn90   = ACOS(my_dot_prod(kvec0,gnorm90,/NOM))*18d1/!DPI
thbn80   = REPLICATE(70.9,N_ELEMENTS(evn0))
thbn90   = REPLICATE(71.9,N_ELEMENTS(evn0))

date     = '082698'
tramp    = '1998-08-26/06:40:24.972'
vshn     = 687.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test1    = tdss_lhw_stats_read(DATE=date)
evn1     = test1.EVENT_N
scet1    = test1.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t1   = time_double(scet1) - time_double(tramp)
dist_1   = del_t1*vshn[0]
avg_lfk1 = (test1.K_ST_LOWF_MP + test1.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk1 = (test1.K_ST_highF_MP + test1.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql1   = test1.FREQ_LOW_HIGH[*,0]
freqh1   = test1.FREQ_LOW_HIGH[*,1]
thkbl1   = test1.THETA_KB[*,0]
thkbh1   = test1.THETA_KB[*,1]
thkvl1   = test1.THETA_KV[*,0]
thkvh1   = test1.THETA_KV[*,1]
pkamp1   = test1.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp1 = test1.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce1     = (test1.WCE_SE[*,0] + test1.WCE_SE[*,1])/2d0
wpe1     = (test1.WPE_SE[*,0] + test1.WPE_SE[*,1])/2d0
wlh1     = (test1.WLH_SE[*,0] + test1.WLH_SE[*,1])/2d0
vte1     = (test1.VTE_SE[*,0] + test1.VTE_SE[*,1])/2d0
rhoe1    = (test1.RHO_VTCE_SE[*,0] + test1.RHO_VTCE_SE[*,1])/2d0
vsw1     = (test1.VSW_ST + test1.VSW_EN)/2d0
vdr1     = (test1.VDRIFT_ST + test1.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf1    = (test1.MAGF_ST + test1.MAGF_EN)/2d0
dens1    = (test1.NE_SE[*,0] + test1.NE_SE[*,1])/2d0
bmag1    = SQRT(TOTAL(magf1^2,2L,/NAN))
betapa1  = (test1.BETA_PARCE_SE[*,0] + test1.BETA_PARCE_SE[*,1])/2d0
teavg1   = (test1.TE_AVG_SE[*,0] + test1.TE_AVG_SE[*,1])/2d0
tiavg1   = (test1.TI_AVG_SE[*,0] + test1.TI_AVG_SE[*,1])/2d0
vti1     = SQRT(2d0*tiavg1*K_eV*kB/mp)
tecavg1  = (test1.TEC_SE[*,0] + test1.TEC_SE[*,1])/2d0
tehavg1  = (test1.TEH_SE[*,0] + test1.TEH_SE[*,1])/2d0
tparc1   = (test1.TPAR_EC_SE[*,0] + test1.TPAR_EC_SE[*,1])/2d0
tperc1   = (test1.TPER_EC_SE[*,0] + test1.TPER_EC_SE[*,1])/2d0
tparh1   = (test1.TPAR_EH_SE[*,0] + test1.TPAR_EH_SE[*,1])/2d0
tperh1   = (test1.TPER_EH_SE[*,0] + test1.TPER_EH_SE[*,1])/2d0
qmag1    = (test1.QMAG_SE[*,0] + test1.QMAG_SE[*,1])/2d0
kvec1    = test1.KVEC
gnorm81  = [-0.655,0.040,-0.754]   ; => Using RH08 from JCK's site
gnorm91  = [-0.822,0.138,-0.553]   ; => Using RH09 from JCK's site
thkn81   = ACOS(my_dot_prod(kvec1,gnorm81,/NOM))*18d1/!DPI
thkn91   = ACOS(my_dot_prod(kvec1,gnorm91,/NOM))*18d1/!DPI
thbn81   = REPLICATE(82.2,N_ELEMENTS(evn1))
thbn91   = REPLICATE(78.7,N_ELEMENTS(evn1))

date     = '092498'
tramp    = '1998-09-24/23:20:37.374'
vshn     = 772.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test2    = tdss_lhw_stats_read(DATE=date)
evn2     = test2.EVENT_N
scet2    = test2.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t2   = time_double(scet2) - time_double(tramp)
dist_2   = del_t2*vshn[0]
avg_lfk2 = (test2.K_ST_LOWF_MP + test2.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk2 = (test2.K_ST_highF_MP + test2.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql2   = test2.FREQ_LOW_HIGH[*,0]
freqh2   = test2.FREQ_LOW_HIGH[*,1]
thkbl2   = test2.THETA_KB[*,0]
thkbh2   = test2.THETA_KB[*,1]
thkvl2   = test2.THETA_KV[*,0]
thkvh2   = test2.THETA_KV[*,1]
pkamp2   = test2.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp2 = test2.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce2     = (test2.WCE_SE[*,0] + test2.WCE_SE[*,1])/2d0
wpe2     = (test2.WPE_SE[*,0] + test2.WPE_SE[*,1])/2d0
wlh2     = (test2.WLH_SE[*,0] + test2.WLH_SE[*,1])/2d0
vte2     = (test2.VTE_SE[*,0] + test2.VTE_SE[*,1])/2d0
rhoe2    = (test2.RHO_VTCE_SE[*,0] + test2.RHO_VTCE_SE[*,1])/2d0
vsw2     = (test2.VSW_ST + test2.VSW_EN)/2d0
vdr2     = (test2.VDRIFT_ST + test2.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf2    = (test2.MAGF_ST + test2.MAGF_EN)/2d0
dens2    = (test2.NE_SE[*,0] + test2.NE_SE[*,1])/2d0
bmag2    = SQRT(TOTAL(magf2^2,2L,/NAN))
betapa2  = (test2.BETA_PARCE_SE[*,0] + test2.BETA_PARCE_SE[*,1])/2d0
teavg2   = (test2.TE_AVG_SE[*,0] + test2.TE_AVG_SE[*,1])/2d0
tiavg2   = (test2.TI_AVG_SE[*,0] + test2.TI_AVG_SE[*,1])/2d0
vti2     = SQRT(2d0*tiavg2*K_eV*kB/mp)
tecavg2  = (test2.TEC_SE[*,0] + test2.TEC_SE[*,1])/2d0
tehavg2  = (test2.TEH_SE[*,0] + test2.TEH_SE[*,1])/2d0
tparc2   = (test2.TPAR_EC_SE[*,0] + test2.TPAR_EC_SE[*,1])/2d0
tperc2   = (test2.TPER_EC_SE[*,0] + test2.TPER_EC_SE[*,1])/2d0
tparh2   = (test2.TPAR_EH_SE[*,0] + test2.TPAR_EH_SE[*,1])/2d0
tperh2   = (test2.TPER_EH_SE[*,0] + test2.TPER_EH_SE[*,1])/2d0
qmag2    = (test2.QMAG_SE[*,0] + test2.QMAG_SE[*,1])/2d0
kvec2    = test2.KVEC
gnorm82  = [-0.914,-0.220,-0.341]   ; => Using RH08 from JCK's site
gnorm92  = [-0.939,-0.175,-0.296]   ; => Using RH09 from JCK's site
thkn82   = ACOS(my_dot_prod(kvec2,gnorm82,/NOM))*18d1/!DPI
thkn92   = ACOS(my_dot_prod(kvec2,gnorm92,/NOM))*18d1/!DPI
thbn82   = REPLICATE(82.1,N_ELEMENTS(evn2))
thbn92   = REPLICATE(78.6,N_ELEMENTS(evn2))

date     = '021100'
tramp    = '2000-02-11/23:33:55.319'
vshn     = 641.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test3    = tdss_lhw_stats_read(DATE=date)
evn3     = test3.EVENT_N
scet3    = test3.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t3   = time_double(scet3) - time_double(tramp)
dist_3   = del_t3*vshn[0]
avg_lfk3 = (test3.K_ST_LOWF_MP + test3.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk3 = (test3.K_ST_highF_MP + test3.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql3   = test3.FREQ_LOW_HIGH[*,0]
freqh3   = test3.FREQ_LOW_HIGH[*,1]
thkbl3   = test3.THETA_KB[*,0]
thkbh3   = test3.THETA_KB[*,1]
thkvl3   = test3.THETA_KV[*,0]
thkvh3   = test3.THETA_KV[*,1]
pkamp3   = test3.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp3 = test3.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce3     = (test3.WCE_SE[*,0] + test3.WCE_SE[*,1])/2d0
wpe3     = (test3.WPE_SE[*,0] + test3.WPE_SE[*,1])/2d0
wlh3     = (test3.WLH_SE[*,0] + test3.WLH_SE[*,1])/2d0
vte3     = (test3.VTE_SE[*,0] + test3.VTE_SE[*,1])/2d0
rhoe3    = (test3.RHO_VTCE_SE[*,0] + test3.RHO_VTCE_SE[*,1])/2d0
vsw3     = (test3.VSW_ST + test3.VSW_EN)/2d0
vdr3     = (test3.VDRIFT_ST + test3.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf3    = (test3.MAGF_ST + test3.MAGF_EN)/2d0
dens3    = (test3.NE_SE[*,0] + test3.NE_SE[*,1])/2d0
bmag3    = SQRT(TOTAL(magf3^2,2L,/NAN))
betapa3  = (test3.BETA_PARCE_SE[*,0] + test3.BETA_PARCE_SE[*,1])/3d0
teavg3   = (test3.TE_AVG_SE[*,0] + test3.TE_AVG_SE[*,1])/3d0
tiavg3   = (test3.TI_AVG_SE[*,0] + test3.TI_AVG_SE[*,1])/3d0
vti3     = SQRT(2d0*tiavg3*K_eV*kB/mp)
tecavg3  = (test3.TEC_SE[*,0] + test3.TEC_SE[*,1])/3d0
tehavg3  = (test3.TEH_SE[*,0] + test3.TEH_SE[*,1])/3d0
tparc3   = (test3.TPAR_EC_SE[*,0] + test3.TPAR_EC_SE[*,1])/3d0
tperc3   = (test3.TPER_EC_SE[*,0] + test3.TPER_EC_SE[*,1])/3d0
tparh3   = (test3.TPAR_EH_SE[*,0] + test3.TPAR_EH_SE[*,1])/3d0
tperh3   = (test3.TPER_EH_SE[*,0] + test3.TPER_EH_SE[*,1])/3d0
qmag3    = (test3.QMAG_SE[*,0] + test3.QMAG_SE[*,1])/3d0
kvec3    = test3.KVEC
gnorm83  = [-0.865,-0.452,0.218]   ; => Using RH08 from JCK's site
gnorm93  = [-0.930,-0.367,-0.028]   ; => Using RH09 from JCK's site
thkn83   = ACOS(my_dot_prod(kvec3,gnorm83,/NOM))*18d1/!DPI
thkn93   = ACOS(my_dot_prod(kvec3,gnorm93,/NOM))*18d1/!DPI
thbn83   = REPLICATE(86.5,N_ELEMENTS(evn3))
thbn93   = REPLICATE(89.9,N_ELEMENTS(evn3))

;-----------------------------------------------------------------------------------------
; => Combine terms
;-----------------------------------------------------------------------------------------
evns     = [evn0,evn1,evn2,evn3]
scets    = [scet0,scet1,scet2,scet3]
scete    = [test0.SCET_SE[*,1],test1.SCET_SE[*,1],test2.SCET_SE[*,1],test3.SCET_SE[*,1]]
kvecs    = [kvec0,kvec1,kvec2,kvec3]
kvecx    = [test0.KVEC[*,0],test1.KVEC[*,0],test2.KVEC[*,0],test3.KVEC[*,0]]
kvecy    = [test0.KVEC[*,1],test1.KVEC[*,1],test2.KVEC[*,1],test3.KVEC[*,1]]
kvecz    = [test0.KVEC[*,2],test1.KVEC[*,2],test2.KVEC[*,2],test3.KVEC[*,2]]
pkamps   = [pkamp0,pkamp1,pkamp2,pkamp3]/2d0      ; => change from Peak-to-Peak to Peak
filtamp  = [ftpkamp0,ftpkamp1,ftpkamp2,ftpkamp3]  ; => Filtered amplitudes
dist_r   = [dist_0,dist_1,dist_2,dist_3]          ; => normal distance from shock ramp (km)

thbn8    = [thbn80,thbn81,thbn82,thbn83]          ; => Theta_Bn (deg) [RH08 JCK's]
thbn9    = [thbn90,thbn91,thbn92,thbn93]          ; => Theta_Bn (deg) [RH08 JCK's]
thkbl    = [thkbl0,thkbl1,thkbl2,thkbl3]          ; => Theta_kB (deg) [low  freq. end of bandpass]
thkvl    = [thkvl0,thkvl1,thkvl2,thkvl3]          ; => Theta_kV (deg) [low  freq. end of bandpass]
thkbh    = [thkbh0,thkbh1,thkbh2,thkbh3]          ; => Theta_kB (deg) [high freq. end of bandpass]
thkvh    = [thkvh0,thkvh1,thkvh2,thkvh3]          ; => Theta_kV (deg) [high freq. end of bandpass]
vsw      = [vsw0,vsw1,vsw2,vsw3]                  ; => PL solar wind velocity (km/s) [GSE]
vmag     = SQRT(TOTAL(vsw^2,2L,/NAN))
vdrft    = [vdr0,vdr1,vdr2,vdr3]                  ; => (Vsw - Ve) (km/s) [SC-Frame]
vdrmg    = SQRT(TOTAL(vdrft^2,2L,/NAN))
freql    = [freql0,freql1,freql2,freql3]          ; => (Hz) low  freq. end of bandpass
freqh    = [freqh0,freqh1,freqh2,freqh3]          ; => (Hz) high freq. end of bandpass
wce      = [wce0,wce1,wce2,wce3]                  ; => Electron cyclotron frequency (rad/s)
wcp      = wce*me/mp                              ; => Proton   cyclotron frequency (rad/s)
wpe      = [wpe0,wpe1,wpe2,wpe3]                  ; => Electron plasma    frequency (rad/s)
wlh      = [wlh0,wlh1,wlh2,wlh3]                  ; => ES lower hybrid resonance frequency (rad/s)
vte      = [vte0,vte1,vte2,vte3]                  ; => Electron thermal speed (km/s)
vti      = [vti0,vti1,vti2,vti3]                  ; => Electron thermal speed (km/s)
rhoe     = [rhoe0,rhoe1,rhoe2,rhoe3]              ; => Electron thermal gyroradius (km)
rhop     = rhoe*SQRT(mp/me)                       ; => Proton thermal gyroradius (km)
avg_lfk  = [avg_lfk0,avg_lfk1,avg_lfk2,avg_lfk3]  ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk  = [avg_hfk0,avg_hfk1,avg_hfk2,avg_hfk3]  ; => [Avg. |k| from high freq. end of bandpass]
dens     = [dens0,dens1,dens2,dens3]              ; => Electron density [cm^(-3)] from TNR
magf     = [magf0,magf1,magf2,magf3]
bmag     = [bmag0,bmag1,bmag2,bmag3]              ; => Magnitude of the B-field (nT)

beta_pac = [betapa0,betapa1,betapa2,betapa3]      ; => core para. electron beta
teavg    = [teavg0,teavg1,teavg2,teavg3]          ; => EL electron avg. temp (eV)
tiavg    = [tiavg0,tiavg1,tiavg2,tiavg3]          ; => PL ion avg. temp (eV)
tecavg   = [tecavg0,tecavg1,tecavg2,tecavg3]      ; => core avg.  temp (eV)
tehavg   = [tehavg0,tehavg1,tehavg2,tehavg3]      ; => halo avg.  temp (eV)
tparc    = [tparc0,tparc1,tparc2,tparc3]          ; => core para. temp (eV)
tperc    = [tperc0,tperc1,tperc2,tperc3]          ; => core perp. temp (eV)
tparh    = [tparh0,tparh1,tparh2,tparh3]          ; => halo para. temp (eV)
tperh    = [tperh0,tperh1,tperh2,tperh3]          ; => halo perp. temp (eV)
qmag     = [qmag0,qmag1,qmag2,qmag3]              ; => heat flux magnitude [eV km/s cm^(-3)]

; => Calc. Alfven, IA, and magnetosonic speeds
valf     = (bmag*1d-9)/SQRT(mp*muo*1d6*dens)
cs_ia    = SQRT((teavg + 3d0*tiavg)*K_eV*kB/mp)
v2_vacs  = valf^2 + cs_ia^2
cbn08    = COS(thbn8*!DPI/18d1)
cbn09    = COS(thbn9*!DPI/18d1)
vf_08    = SQRT((v2_vacs + SQRT(v2_vacs^2 - 4d0*valf^2*cs_ia^2*cbn08^2))/2d0)
vf_09    = SQRT((v2_vacs + SQRT(v2_vacs^2 - 4d0*valf^2*cs_ia^2*cbn09^2))/2d0)

; => Calc. temperature ratios
te_tiav  = teavg/tiavg
tanis_c  = tperc/tparc
tanis_h  = tperh/tparh
thc_par  = tparh/tparc
thc_per  = tperh/tperc
tehc_avg = tehavg/tecavg

densc    = 9d-1*dens
densh    = 1d-1*dens
teff_avg = dens*tecavg*tehavg/(densh*tecavg + densc*tehavg)
cs_iaeff = SQRT((teff_avg + 3d0*tiavg)*K_eV*kB/mp)
; => Estimate current density [nA m^(-2)]
;     1d3 => converts speed to   [m/s]
;     1d6 => converts density to [m^(-3)]
;     1d9 => converts units to [nA m^(-2)] from [A m^(-2)]
jdrft    = qq*(vdrmg*1d3)*(dens*1d6)*1d9

; => Normalize the drift speed by the ion thermal speed
vdrvti   = vdrmg/vti

; => Normalize the wave number by the electron inertial length
kcwpelfm = avg_lfk[*,0]*c*1d-3/wpe
kcwpelfp = avg_lfk[*,1]*c*1d-3/wpe
kcwpehfm = avg_hfk[*,0]*c*1d-3/wpe
kcwpehfp = avg_hfk[*,1]*c*1d-3/wpe

; => Normalize the wave number by the electron thermal gyroradius
krhoelfm = avg_lfk[*,0]*rhoe
krhoelfp = avg_lfk[*,1]*rhoe
krhoehfm = avg_hfk[*,0]*rhoe
krhoehfp = avg_hfk[*,1]*rhoe
;---------------------------------------------------------------------
; => Wave number estimates from:
;
; => Calculations of Eq. 4 from Coroniti et al., [1982]
;  Coroniti, F. V., C. F. Kennel, F. L. Scarf, and E. J. Smith (1982),
;    Whistler mode turbulence in the disturbed solar wind, J. Geophys.
;    Res., 87, 6029–6044, doi:10.1029/JA087iA08p06029.
;---------------------------------------------------------------------
; => Separate by plus and minus sign
avg_lfkm = avg_lfk[*,0]  ; => [Avg. |k| (- sign) from low  freq. end of bandpass]
avg_lfkp = avg_lfk[*,1]  ; => [Avg. |k| (+ sign) from low  freq. end of bandpass]
avg_hfkm = avg_hfk[*,0]  ; => [Avg. |k| (- sign) from high freq. end of bandpass]
avg_hfkp = avg_hfk[*,1]  ; => [Avg. |k| (+ sign) from high freq. end of bandpass]
; => Calculate rest frame frequencies from wave number estimates
ckm        = (c*1d-3)
fac0l      = wce*ABS(COS(thkbl*!DPI/18d1))
fac0h      = wce*ABS(COS(thkbh*!DPI/18d1))
fac1lm     = (wpe/(ckm*avg_lfkm))^2
fac1lp     = (wpe/(ckm*avg_lfkp))^2
fac1hm     = (wpe/(ckm*avg_hfkm))^2
fac1hp     = (wpe/(ckm*avg_hfkp))^2
frest_lfkm = fac0l/(1d0 + fac1lm)  ; => Rest frame freq. (rad/s) [|k| (- sign) from low  freq. end of bandpass]
frest_lfkp = fac0l/(1d0 + fac1lp)  ; => Rest frame freq. (rad/s) [|k| (+ sign) from low  freq. end of bandpass]
frest_hfkm = fac0h/(1d0 + fac1hm)  ; => Rest frame freq. (rad/s) [|k| (- sign) from high freq. end of bandpass]
frest_hfkp = fac0h/(1d0 + fac1hp)  ; => Rest frame freq. (rad/s) [|k| (+ sign) from high freq. end of bandpass]

; => Calculate index of refraction
testlm   = cold_plasma_params_2d(bmag,dens,FREQF=frest_lfkm/(2d0*!DPI),ANGLE=thkb,/ONED)
testlp   = cold_plasma_params_2d(bmag,dens,FREQF=frest_lfkp/(2d0*!DPI),ANGLE=thkb,/ONED)
testhm   = cold_plasma_params_2d(bmag,dens,FREQF=frest_hfkm/(2d0*!DPI),ANGLE=thkb,/ONED)
testhp   = cold_plasma_params_2d(bmag,dens,FREQF=frest_hfkp/(2d0*!DPI),ANGLE=thkb,/ONED)
indexlm  = testlm.INDEX_REF_1
alfvinlm = testlm.INDEX_ALFVEN
bad      = WHERE(indexlm LT 0.,bd)
IF (bd GT 0) THEN indexlm[bad] = d
indexlp  = testlp.INDEX_REF_1
alfvinlp = testlp.INDEX_ALFVEN
bad      = WHERE(indexlp LT 0.,bd)
IF (bd GT 0) THEN indexlp[bad] = d
indexhm  = testhm.INDEX_REF_1
alfvinhm = testhm.INDEX_ALFVEN
bad      = WHERE(indexhm LT 0.,bd)
IF (bd GT 0) THEN indexhm[bad] = d
indexhp  = testhp.INDEX_REF_1
alfvinhp = testhp.INDEX_ALFVEN
bad      = WHERE(indexhp LT 0.,bd)
IF (bd GT 0) THEN indexhp[bad] = d
;-----------------------------------------------------------------------------------------
; => Look at S. Peter Gary's threshold conditions
;-----------------------------------------------------------------------------------------
HELP, WHERE(frest_lfkm GT wlh), WHERE(frest_lfkp GT wlh), $
      WHERE(frest_hfkm GT wlh), WHERE(frest_hfkp GT wlh)
;  <Expression>    LONG      = Array[109]
;  <Expression>    LONG      = Array[251]
;  <Expression>    LONG      = Array[237]
;  <Expression>    LONG      = Array[368]



HELP, WHERE(tanis_h GE 1.1 AND frest_lfkm GT wlh), WHERE(tanis_h GE 1.1 AND frest_lfkp GT wlh), $
      WHERE(tanis_h GE 1.1 AND frest_hfkm GT wlh), WHERE(tanis_h GE 1.1 AND frest_hfkp GT wlh)
;  <Expression>    LONG      = Array[81]
;  <Expression>    LONG      = Array[105]
;  <Expression>    LONG      = Array[106]
;  <Expression>    LONG      = Array[156]

PRINT,';   ',[81d0,105d0,106d0,156d0]/[109d0,251d0,237d0,368d0], [81d0,105d0,106d0,156d0]/431d0
;         0.74311927      0.41832669      0.44725738      0.42391304
;         0.18793503      0.24361949      0.24593968      0.36194896


evns_lhw = [00010618L,00010684L,02013066L,02014864L,02015635L,02015691L,$
            02017428L,02018091L]
evns_mix = [03408599L,00010488L,02011249L,02011723L,02011820L,02013165L,$
            02015299L,02015304L,02015650L,02017555L,23145465L,23145474L,$
            23145484L]
evns_whi = [00010807L,00010832L,00010868L,00010881L,00010888L,00010895L,$
            00010923L,00010937L,23145603L,23145610L,23153276L,23154909L,$
            23155087L]
good_lhw = array_where(evns,evns_lhw,/N_UNIQ)
good_mix = array_where(evns,evns_mix,/N_UNIQ)
good_whi = array_where(evns,evns_whi,/N_UNIQ)
HELP, good_lhw, good_whi, good_mix
;  GOOD_LHW        LONG      = Array[54, 2]
;  GOOD_WHI        LONG      = Array[138, 2]
;  GOOD_MIX        LONG      = Array[239, 2]

gdlhw    = good_lhw[*,0]
gdwhi    = good_whi[*,0]
gdmix    = good_mix[*,0]

HELP, WHERE(frest_lfkm[gdlhw] GT wlh), WHERE(frest_lfkp[gdlhw] GT wlh), $
      WHERE(frest_hfkm[gdlhw] GT wlh), WHERE(frest_hfkp[gdlhw] GT wlh)
;  <Expression>    LONG      =           -1
;  <Expression>    LONG      = Array[37]
;  <Expression>    LONG      = Array[38]
;  <Expression>    LONG      = Array[46]

HELP, WHERE(frest_lfkm[gdwhi] GT wlh), WHERE(frest_lfkp[gdwhi] GT wlh), $
      WHERE(frest_hfkm[gdwhi] GT wlh), WHERE(frest_hfkp[gdwhi] GT wlh)
;  <Expression>    LONG      = Array[106]
;  <Expression>    LONG      = Array[110]
;  <Expression>    LONG      = Array[129]
;  <Expression>    LONG      = Array[135]

HELP, WHERE(frest_lfkm[gdmix] GT wlh), WHERE(frest_lfkp[gdmix] GT wlh), $
      WHERE(frest_hfkm[gdmix] GT wlh), WHERE(frest_hfkp[gdmix] GT wlh)
;  <Expression>    LONG      = Array[1]
;  <Expression>    LONG      = Array[82]
;  <Expression>    LONG      = Array[106]
;  <Expression>    LONG      = Array[198]

HELP, WHERE(tanis_h[gdlhw] GE 1.1 AND frest_lfkm[gdlhw] GT wlh), WHERE(tanis_h[gdlhw] GE 1.1 AND frest_lfkp[gdlhw] GT wlh), $
      WHERE(tanis_h[gdlhw] GE 1.1 AND frest_hfkm[gdlhw] GT wlh), WHERE(tanis_h[gdlhw] GE 1.1 AND frest_hfkp[gdlhw] GT wlh)
;  <Expression>    LONG      =           -1
;  <Expression>    LONG      = Array[14]
;  <Expression>    LONG      = Array[11]
;  <Expression>    LONG      = Array[14]

HELP, WHERE(tanis_h[gdwhi] GE 1.1 AND frest_lfkm[gdwhi] GT wlh), WHERE(tanis_h[gdwhi] GE 1.1 AND frest_lfkp[gdwhi] GT wlh), $
      WHERE(tanis_h[gdwhi] GE 1.1 AND frest_hfkm[gdwhi] GT wlh), WHERE(tanis_h[gdwhi] GE 1.1 AND frest_hfkp[gdwhi] GT wlh)
;  <Expression>    LONG      = Array[81]
;  <Expression>    LONG      = Array[82]
;  <Expression>    LONG      = Array[95]
;  <Expression>    LONG      = Array[101]


HELP, WHERE(tanis_h[gdmix] GE 1.1 AND frest_lfkm[gdmix] GT wlh), WHERE(tanis_h[gdmix] GE 1.1 AND frest_lfkp[gdmix] GT wlh), $
      WHERE(tanis_h[gdmix] GE 1.1 AND frest_hfkm[gdmix] GT wlh), WHERE(tanis_h[gdmix] GE 1.1 AND frest_hfkp[gdmix] GT wlh)
;  <Expression>    LONG      =           -1
;  <Expression>    LONG      = Array[4]
;  <Expression>    LONG      = Array[30]
;  <Expression>    LONG      = Array[57]
;-----------------------------------------------------------------------------------------
; => Look at LH and/or linearly polarized examples
;-----------------------------------------------------------------------------------------
frlm   = frest_lfkm/(2d0*!DPI)
frlp   = frest_lfkp/(2d0*!DPI)
frhm   = frest_hfkm/(2d0*!DPI)
frhp   = frest_hfkp/(2d0*!DPI)
frlmlh = frest_lfkm/wlh
frlplh = frest_lfkp/wlh
frhmlh = frest_hfkm/wlh
frhplh = frest_hfkp/wlh


;t_scet = '1998-08-26/06:41:10.001'
;t_scet = '1998-09-24/23:43:18.951'
;t_scet = '1998-09-24/23:45:52.184'
;t_scet = '1998-09-24/23:45:53.379'
;t_scet = '1998-09-24/23:48:39.020'
;t_scet = '1998-09-24/23:48:51.622'
;t_scet = '1998-09-25/00:04:04.545'
;t_scet = '1998-09-25/00:05:23.432'
t_scet = '1998-09-25/00:14:50.603'
good   = WHERE(scets EQ t_scet[0],gd)

FOR j=0L, gd - 1L DO BEGIN $
  PRINT,';   ', t_scet[0],frlm[good[j]],frlp[good[j]],frhm[good[j]],frhp[good[j]],$
                frlmlh[good[j]],frlplh[good[j]],frhmlh[good[j]],frhplh[good[j]]

;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;       Date       SCET             frl(-)          frl(+)          frh(-)          frh(+)      frl(-)/flh       frl(+)/flh      frh(-)/flh      frh(+)/flh
;===============================================================================================================================================================
;   1998-08-26/06:41:10.001      0.58188658       93.080230       26.661060       163.30194     0.037718792       6.0336051       1.7282113       10.585486
;   1998-08-26/06:41:10.001       4.8358508       24.646526       73.561684       116.35863      0.31346736       1.5976261       4.7683826       7.5425474
;   1998-08-26/06:41:10.001     0.093293567       29.136274       9.6352064       68.178489    0.0060474339       1.8886585      0.62456904       4.4194356
;   1998-08-26/06:41:10.001      0.68527370       125.04020       33.632627       211.58184     0.044420506       8.1053002       2.1801191       13.715063
;   1998-08-26/06:41:10.001      0.59939424       217.88351       33.562534       292.05032     0.038853665       14.123547       2.1755756       18.931155
;   1998-08-26/06:41:10.001      0.80557821       308.18444       46.041035       378.37787     0.052218830       19.976994       2.9844514       24.527041
;   1998-08-26/06:41:10.001      0.25604974       26.977260       12.366003       62.388107     0.016597542       1.7487079      0.80158354       4.0440940
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;   1998-09-24/23:43:18.951      0.74438151       6.3089820       15.216878       30.102060     0.032083960      0.27192658      0.65587025       1.2974439
;   1998-09-24/23:43:18.951      0.50469493       18.358965       14.644193       48.764977     0.021753108      0.79129894      0.63118667       2.1018437
;   1998-09-24/23:43:18.951      0.18624068      0.67226571       1.5819284       2.3630710    0.0080272527     0.028975660     0.068183485      0.10185190
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;   1998-09-24/23:45:52.184       1.1368113       7.3434312       22.216556       40.047433     0.047362882      0.30594881      0.92560668       1.6684931
;   1998-09-24/23:45:52.184      0.75571637       4.1682594       6.8598094       11.762716     0.031485353      0.17366187      0.28579971      0.49006912
;   1998-09-24/23:45:52.184      0.65200698       14.739818       16.446292       46.780372     0.027164517      0.61410389      0.68520058       1.9490070
;   1998-09-24/23:45:52.184      0.43857316       17.947814       15.677326       55.443649     0.018272240      0.74775841      0.65316321       2.3099445
;   1998-09-24/23:45:52.184       1.6831917       4.6985715       26.426236       36.347145     0.070126687      0.19575622       1.1009942       1.5143283
;   1998-09-24/23:45:52.184       1.5492457       6.4883971       21.752296       33.979727     0.064546106      0.27032559      0.90626423       1.4156947
;   1998-09-24/23:45:52.184       1.8264415       4.3886345       26.802350       35.140321     0.076094890      0.18284334       1.1166643       1.4640485
;   1998-09-24/23:45:52.184       1.1687487       31.143178       29.328518       86.864756     0.048693488       1.2975158       1.2219118       3.6190396
;   1998-09-24/23:45:52.184       1.0013470       6.7832116       24.648351       45.074375     0.041719043      0.28260842       1.0269223       1.8779302
;   1998-09-24/23:45:52.184       1.9181430       226.95024       79.500626       401.18294     0.079915446       9.4554103       3.3122284       16.714454
;   1998-09-24/23:45:52.184    0.0049080103             NaN      0.71080230             NaN   0.00020448205             NaN     0.029614101             NaN
;   1998-09-24/23:45:52.184       2.5642344       3.4927954       27.749912       30.522212      0.10683350      0.14552006       1.1561424       1.2716445
;   1998-09-24/23:45:52.184       3.0689658       4.2529663       22.787963       25.155655      0.12786208      0.17719101      0.94941317       1.0480581
;   1998-09-24/23:45:52.184       1.7290367       4.7280877       26.072927       35.637925     0.072036723      0.19698595       1.0862744       1.4847801
;   1998-09-24/23:45:52.184       2.2137424       3.6144424       28.578345       33.239255     0.092230981      0.15058824       1.1906574       1.3848445
;   1998-09-24/23:45:52.184       1.2309550       7.0956855       22.297466       38.847311     0.051285185      0.29562700      0.92897760       1.6184925
;   1998-09-24/23:45:52.184       1.3889062       6.0244844       23.905308       37.903425     0.057865893      0.25099763      0.99596502       1.5791675
;   1998-09-24/23:45:52.184       1.2761873       7.0291851       22.169896       38.045189     0.053169695      0.29285640      0.92366266       1.5850738
;   1998-09-24/23:45:52.184      0.96020889       9.3358103       20.066981       41.826523     0.040005109      0.38895715      0.83604910       1.7426152
;   1998-09-24/23:45:52.184       5.7118106       7.6519983       13.768190       14.921192      0.23797072      0.31880462      0.57362303      0.62166046
;   1998-09-24/23:45:52.184       1.8468646       4.4603932       26.490308       34.818149     0.076945776      0.18583302       1.1036637       1.4506259
;   1998-09-24/23:45:52.184       2.2230307       3.7761934       27.722458       32.647305     0.092617958      0.15732725       1.1549986       1.3601822
;   1998-09-24/23:45:52.184       2.2668895       3.2939607       30.129858       33.793128     0.094445241      0.13723603       1.2552980       1.4079205
;   1998-09-24/23:45:52.184       1.0336881       8.1695929       21.467008       41.616077     0.043066469      0.34036912      0.89437831       1.7338474
;   1998-09-24/23:45:52.184       1.4981832       5.1551598       25.858998       38.005335     0.062418690      0.21477902       1.0773614       1.5834134
;   1998-09-24/23:45:52.184       1.1637900       6.4730152       24.177892       41.533231     0.048486894      0.26968473       1.0073217       1.7303958
;   1998-09-24/23:45:52.184      0.36504062       32.022549       10.810726       53.945857     0.015208659       1.3341530      0.45040646       2.2475421
;   1998-09-24/23:45:52.184      0.12772326       50.133256       8.1489978       82.302564    0.0053213242       2.0886980      0.33951107       3.4289654
;   1998-09-24/23:45:52.184      0.58082194       804.04277       44.204834       841.25280     0.024198740       33.498772       1.8417026       35.049050
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;       Date       SCET             frl(-)          frl(+)          frh(-)          frh(+)      frl(-)/flh       frl(+)/flh      frh(-)/flh      frh(+)/flh
;===============================================================================================================================================================
;   1998-09-24/23:45:53.379     0.074914723       42.271608       8.5601677       97.720148    0.0031780321       1.7932460      0.36313940       4.1454837
;   1998-09-24/23:45:53.379      0.75615518       25.193526       21.437589       70.050852     0.032077612       1.0687597      0.90942531       2.9716970
;   1998-09-24/23:45:53.379      0.65716168       128.99875       30.980839       218.47684     0.027878110       5.4723843       1.3142690       9.2682237
;   1998-09-24/23:45:53.379      0.11507146       39.763143       9.9415786       90.669751    0.0048815611       1.6868319      0.42174161       3.8463918
;   1998-09-24/23:45:53.379      0.14095563       36.956568       10.749900       86.652290    0.0059796190       1.5677714      0.45603221       3.6759631
;   1998-09-24/23:45:53.379       2.2714604       4.3596220       28.091517       34.285334     0.096359883      0.18494387       1.1916982       1.4544523
;   1998-09-24/23:45:53.379      0.71766199       35.521230       22.922581       87.947901     0.030444654       1.5068815      0.97242162       3.7309255
;   1998-09-24/23:45:53.379       1.4165655       5.8978874       23.967197       37.435594     0.060093535      0.25020016       1.0167363       1.5880926
;   1998-09-24/23:45:53.379      0.57363429             NaN       47.660049             NaN     0.024334712             NaN       2.0218344             NaN
;   1998-09-24/23:45:53.379      0.44277776       75.962992       22.052900       151.04626     0.018783517       3.2225017      0.93552803       6.4076838
;   1998-09-24/23:45:53.379      0.58367718       836.36352       2.9236851       53.601407     0.024760751       35.480210      0.12402856       2.2738787
;   1998-09-24/23:45:53.379     0.012331399             NaN       56.673025             NaN   0.00052312255             NaN       2.4041829             NaN
;   1998-09-24/23:45:53.379     0.093247793       42.106339       9.5934585       101.64195    0.0039557575       1.7862349      0.40697366       4.3118545
;   1998-09-24/23:45:53.379      0.56449086       13.508529       18.047212       51.852018     0.023946829      0.57305876      0.76559874       2.1996661
;   1998-09-24/23:45:53.379      0.21602308       28.985056       12.687675       75.146176    0.0091641303       1.2296039      0.53823652       3.1878508
;   1998-09-24/23:45:53.379      0.25364013       25.307410       13.078933       64.520385     0.010759921       1.0735909      0.55483445       2.7370835
;   1998-09-24/23:45:53.379     0.010773059             NaN       6.8152543             NaN   0.00045701468             NaN      0.28911669             NaN
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;   1998-09-24/23:48:39.020      0.37582483       20.733535       14.535229       57.824427     0.015826181      0.87310005      0.61208615       2.4350171
;   1998-09-24/23:48:39.020      0.20935599       43.410451       9.4691632       72.757511    0.0088160909       1.8280369      0.39875145       3.0638571
;   1998-09-24/23:48:39.020       1.8093647       5.7037853       21.623530       30.450490     0.076193299      0.24018940      0.91057825       1.2822861
;   1998-09-24/23:48:39.020      0.13303126       66.434461       6.4638577       76.781159    0.0056020165       2.7975901      0.27219645       3.2332950
;   1998-09-24/23:48:39.020      0.32201040       20.600349       15.058667       62.865032     0.013560027      0.86749155      0.63412841       2.6472796
;   1998-09-24/23:48:39.020      0.27876675       19.890657       10.854711       50.152105     0.011739015      0.83760605      0.45709759       2.1119315
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;   1998-09-24/23:48:51.622      0.30248154       44.792265       14.114455       92.038540     0.012695369       1.8799637      0.59239385       3.8629239
;   1998-09-24/23:48:51.622       4.9839022       72.269598       109.75533       238.16770      0.20917797       3.0332072       4.6065105       9.9960703
;   1998-09-24/23:48:51.622     0.093861879       58.153421       6.6590606       84.765781    0.0039394508       2.4407411      0.27948558       3.5576810
;   1998-09-24/23:48:51.622      0.54539226             NaN      0.39413149             NaN     0.022890507             NaN     0.016541983             NaN
;   1998-09-24/23:48:51.622       1.5638517       5.5831151       24.021112       35.693848     0.065635986      0.23432737       1.0081834       1.4980965
;   1998-09-24/23:48:51.622       1.1866684       4.6322413       19.278945       29.456050     0.049805327      0.19441851      0.80915125       1.2362917
;   1998-09-24/23:48:51.622       1.8571788       12.640756       33.212352       60.397534     0.077947134      0.53054163       1.3939464       2.5349281
;   1998-09-24/23:48:51.622      0.45952395       846.46427       37.848639       868.83118     0.019286552       35.526716       1.5885347       36.465471
;   1998-09-24/23:48:51.622       1.8126173       5.0229915       24.533666       33.647706     0.076076856      0.21081858       1.0296956       1.4122185
;   1998-09-24/23:48:51.622      0.38268171       276.40965       24.963914       366.29072     0.016061427       11.601112       1.0477535       15.373486
;   1998-09-24/23:48:51.622       1.6715300       5.3945583       24.124586       34.758969     0.070155322      0.22641350       1.0125263       1.4588590
;   1998-09-24/23:48:51.622      0.38546516       22.918638       13.820964       58.853865     0.016178251      0.96191178      0.58007584       2.4701392
;   1998-09-24/23:48:51.622      0.19736567       44.289441       9.3762315       74.925983    0.0082835796       1.8588598      0.39352720       3.1446975
;   1998-09-24/23:48:51.622      0.11453358       54.057185       7.3639672       80.913498    0.0048070570       2.2688191      0.30907101       3.3959979
;   1998-09-24/23:48:51.622      0.17928822       48.472121       8.7291288       76.331726    0.0075248560       2.0344099      0.36636783       3.2036976
;   1998-09-24/23:48:51.622       2.8384982       3.1477747       28.640067       29.565812      0.11913382      0.13211438       1.2020443       1.2408984
;   1998-09-24/23:48:51.622      0.70746775       46.250214       25.640256       110.39759     0.029692932       1.9411549       1.0761400       4.6334667
;   1998-09-24/23:48:51.622      0.66711197       6.0011294       12.913916       26.116417     0.027999171      0.25187173      0.54200638       1.0961248
;   1998-09-24/23:48:51.622      0.28736759       31.343580       11.606941       64.963451     0.012061025       1.3155126      0.48715168       2.7265629
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;       Date       SCET             frl(-)          frl(+)          frh(-)          frh(+)      frl(-)/flh       frl(+)/flh      frh(-)/flh      frh(+)/flh
;===============================================================================================================================================================
;   1998-09-25/00:04:04.545       2.0232715       6.3585324       28.596444       40.361567      0.13184736      0.41435648       1.8634995       2.6301788
;   1998-09-25/00:04:04.545      0.31174323             NaN       2.5777819             NaN     0.020314881             NaN      0.16798226             NaN
;   1998-09-25/00:04:04.545      0.34704928             NaN       2.0164690             NaN     0.022615615             NaN      0.13140407             NaN
;   1998-09-25/00:04:04.545     0.021417317             NaN       33.276696             NaN    0.0013956686             NaN       2.1684901             NaN
;   1998-09-25/00:04:04.545    0.0032552731             NaN       26.334385             NaN   0.00021213126             NaN       1.7160915             NaN
;   1998-09-25/00:04:04.545     0.044774976       82.703533       1.3421440       30.586644    0.0029177804       5.3894111     0.087461387       1.9931917
;   1998-09-25/00:04:04.545      0.30698675       457.84108       23.309737       479.36321     0.020004923       29.835410       1.5189890       31.237909
;   1998-09-25/00:04:04.545     0.023424849             NaN       33.013743             NaN    0.0015264903             NaN       2.1513547             NaN
;   1998-09-25/00:04:04.545      0.11321350       51.321227       8.2121374       91.412580    0.0073776059       3.3443697      0.53514744       5.9569399
;   1998-09-25/00:04:04.545      0.32214350       238.94461       21.702389       304.90130     0.020992619       15.570928       1.4142455       19.869024
;   1998-09-25/00:04:04.545      0.12864477       46.021529       8.7135943       82.775785    0.0083831914       2.9990126      0.56782510       5.3941194
;   1998-09-25/00:04:04.545    0.0022210756             NaN       2.7763867             NaN   0.00014473734             NaN      0.18092443             NaN
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;   1998-09-25/00:05:23.432       2.9094156       5.7820336       18.439100       22.473389      0.20279670      0.40302847       1.2852713       1.5664757
;   1998-09-25/00:05:23.432       1.0730190             NaN       13.687801             NaN     0.074793268             NaN      0.95408881             NaN
;   1998-09-25/00:05:23.432      0.45413162       275.72626       28.694922       330.14838     0.031654602       19.219108       2.0001389       23.012525
;   1998-09-25/00:05:23.432      0.82590624       9.5473714       19.960949       43.003305     0.057568625      0.66548601       1.3913497       2.9974845
;   1998-09-25/00:05:23.432      0.12345108       74.821261       5.3073911       66.995355    0.0086049827       5.2153101      0.36994418       4.6698164
;   1998-09-25/00:05:23.432      0.43119349       21.007546       14.088987       53.996338     0.030055732       1.4643013      0.98205291       3.7637383
;   1998-09-25/00:05:23.432      0.51603521       527.33657       4.1070440       55.977203     0.035969504       36.757249      0.28627569       3.9018117
;   1998-09-25/00:05:23.432      0.35724480       332.17598       25.407800       385.74679     0.024901243       23.153857       1.7710148       26.887934
;   1998-09-25/00:05:23.432     0.044134017       70.491483       1.2943135       25.539523    0.0030762992       4.9135091     0.090218290       1.7801963
;   1998-09-25/00:05:23.432      0.12393302       58.529062       7.3753110       85.592504    0.0086385757       4.0796854      0.51408562       5.9661043
;   1998-09-25/00:05:23.432      0.40188810             NaN      0.66678774             NaN     0.028013041             NaN     0.046477495             NaN
;   1998-09-25/00:05:23.432      0.45177931       405.98844       31.510941       436.14374     0.031490638       28.298850       2.1964256       30.400782
;   1998-09-25/00:05:23.432     0.065788179       63.132656       3.9614533       58.682571    0.0045856719       4.4005724      0.27612750       4.0903856
;   1998-09-25/00:05:23.432      0.38731228       444.17258       29.173933       469.21583     0.026997054       30.960421       2.0335277       32.706025
;   1998-09-25/00:05:23.432      0.38493394       392.19485       28.124161       429.53320     0.026831275       27.337387       1.9603549       29.940004
;   1998-09-25/00:05:23.432     0.033893532             NaN       32.719077             NaN    0.0023625007             NaN       2.2806370             NaN
;   1998-09-25/00:05:23.432     0.032109470       20.666053       50.757090       512.06316    0.0022381451       1.4404980       3.5379511       35.692638
;   1998-09-25/00:05:23.432      0.44622699             NaN       32.574883             NaN     0.031103621             NaN       2.2705861             NaN
;   1998-09-25/00:05:23.432      0.30486533       349.55341       22.507692       394.13310     0.021250206       24.365126       1.5688668       27.472490
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;   1998-09-25/00:14:50.603      0.77475126       135.66484       36.784719       221.79439     0.051180774       8.9621428       2.4300320       14.651939
;   1998-09-25/00:14:50.603     0.071795269       58.183709       4.7103430       62.998107    0.0047428608       3.8436688      0.31116955       4.1617123
;   1998-09-25/00:14:50.603      0.19043832       37.158758       9.5491443       62.887917     0.012580529       2.4547414      0.63082517       4.1544331
;   1998-09-25/00:14:50.603      0.29931878       28.371090       11.970774       60.151582     0.019773272       1.8742201      0.79080024       3.9736683
;   1998-09-25/00:14:50.603     0.070330172       43.410481       5.2226982       54.328705    0.0046460752       2.8677359      0.34501620       3.5890037
;---------------------------------------------------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------
; => Plot relationships
;-----------------------------------------------------------------------------------------
cbn080   = COS(thbn80*!DPI/18d1)
cbn081   = COS(thbn81*!DPI/18d1)
cbn082   = COS(thbn82*!DPI/18d1)
cbn083   = COS(thbn83*!DPI/18d1)

valf0    = (bmag0*1d-9)/SQRT(mp*muo*1d6*dens0)
valf1    = (bmag1*1d-9)/SQRT(mp*muo*1d6*dens1)
valf2    = (bmag2*1d-9)/SQRT(mp*muo*1d6*dens2)
valf3    = (bmag3*1d-9)/SQRT(mp*muo*1d6*dens3)

cs_ia0   = SQRT((teavg0 + 3d0*tiavg0)*K_eV*kB/mp)
cs_ia1   = SQRT((teavg1 + 3d0*tiavg1)*K_eV*kB/mp)
cs_ia2   = SQRT((teavg2 + 3d0*tiavg2)*K_eV*kB/mp)
cs_ia3   = SQRT((teavg3 + 3d0*tiavg3)*K_eV*kB/mp)

v2_vac0  = valf0^2 + cs_ia0^2
v2_vac1  = valf1^2 + cs_ia1^2
v2_vac2  = valf2^2 + cs_ia2^2
v2_vac3  = valf3^2 + cs_ia3^2
vf_080   = SQRT((v2_vac0 + SQRT(v2_vac0^2 - 4d0*valf0^2*cs_ia0^2*cbn080^2))/2d0)
vf_081   = SQRT((v2_vac1 + SQRT(v2_vac1^2 - 4d0*valf1^2*cs_ia1^2*cbn081^2))/2d0)
vf_082   = SQRT((v2_vac2 + SQRT(v2_vac2^2 - 4d0*valf2^2*cs_ia2^2*cbn082^2))/2d0)
vf_083   = SQRT((v2_vac3 + SQRT(v2_vac3^2 - 4d0*valf3^2*cs_ia3^2*cbn083^2))/2d0)

vdrmg0   = SQRT(TOTAL(vdr0^2,2L,/NAN))            ; => |(Vsw - Ve)| (km/s) [SC-Frame]
vdrmg1   = SQRT(TOTAL(vdr1^2,2L,/NAN))            ; => |(Vsw - Ve)| (km/s) [SC-Frame]
vdrmg2   = SQRT(TOTAL(vdr2^2,2L,/NAN))            ; => |(Vsw - Ve)| (km/s) [SC-Frame]
vdrmg3   = SQRT(TOTAL(vdr3^2,2L,/NAN))            ; => |(Vsw - Ve)| (km/s) [SC-Frame]

yra      = [0.01,15.0]
yttl     = 'Wave Amplitude'+'!C'+'[Filtered Peak, nT]'
yposi    = [8.,5.,2.,1.]
fpref    = 'Wave-Amp_vs_'
fsufx    = '_Avg-per-unique-Xvalue_plusminus-STDDEV'
ydat0    = ftpkamp0                               ; => Filtered amplitudes (nT)
ydat1    = ftpkamp1                               ; => Filtered amplitudes (nT)
ydat2    = ftpkamp2                               ; => Filtered amplitudes (nT)
ydat3    = ftpkamp3                               ; => Filtered amplitudes (nT)
;------------------------------------------------
; => Vd/C_f Plots
;------------------------------------------------
xra      = [1d-1,1d1]
xttl     = 'V!Ddei!N'+'/C!Df!N [unitless]'
xposi    = 0.3
xlog     = 1
fname    = fpref[0]+'V_drift-C_f'+fsufx[0]
xdat0    = vdrmg0/(vf_080*1d-3)                   ; => |(Vsw - Ve)|/C_f
xdat1    = vdrmg1/(vf_081*1d-3)                   ; => |(Vsw - Ve)|/C_f
xdat2    = vdrmg2/(vf_082*1d-3)                   ; => |(Vsw - Ve)|/C_f
xdat3    = vdrmg3/(vf_083*1d-3)                   ; => |(Vsw - Ve)|/C_f
;------------------------------------------------
; => Vd/V_A Plots
;------------------------------------------------
xra      = [1d-1,1d1]
xttl     = 'V!Ddei!N'+'/V!DA!N [unitless]'
xposi    = 0.3
xlog     = 1
fname    = fpref[0]+'V_drift-V_A'+fsufx[0]
xdat0    = vdrmg0/(valf0*1d-3)                    ; => |(Vsw - Ve)|/V_A
xdat1    = vdrmg1/(valf1*1d-3)                    ; => |(Vsw - Ve)|/V_A
xdat2    = vdrmg2/(valf2*1d-3)                    ; => |(Vsw - Ve)|/V_A
xdat3    = vdrmg3/(valf3*1d-3)                    ; => |(Vsw - Ve)|/V_A
;------------------------------------------------
; => Vd/VTi Plots
;------------------------------------------------
xra      = [1d-1,1d1]
xttl     = 'V!Ddei!N'+'/V!DTi!N [unitless]'
xposi    = 0.3
xlog     = 1
fname    = fpref[0]+'V_drift-V_Ti'+fsufx[0]
xdat0    = vdrmg0/(vti0*1d-3)                     ; => |(Vsw - Ve)|/V_Ti
xdat1    = vdrmg1/(vti1*1d-3)                     ; => |(Vsw - Ve)|/V_Ti
xdat2    = vdrmg2/(vti2*1d-3)                     ; => |(Vsw - Ve)|/V_Ti
xdat3    = vdrmg3/(vti3*1d-3)                     ; => |(Vsw - Ve)|/V_Ti
;------------------------------------------------
; => Vd/Cs Plots
;------------------------------------------------
xra      = [1d-1,1d1]
xttl     = 'V!Ddei!N'+'/C!Ds!N [unitless]'
xposi    = 0.3
xlog     = 1
fname    = fpref[0]+'V_drift-C_s'+fsufx[0]
xdat0    = vdrmg0/(cs_ia0*1d-3)                   ; => |(Vsw - Ve)|/C_s
xdat1    = vdrmg1/(cs_ia1*1d-3)                   ; => |(Vsw - Ve)|/C_s
xdat2    = vdrmg2/(cs_ia2*1d-3)                   ; => |(Vsw - Ve)|/C_s
xdat3    = vdrmg3/(cs_ia3*1d-3)                   ; => |(Vsw - Ve)|/C_s
;------------------------------------------------
; => j_de Plots
;------------------------------------------------
xra      = [1d2,2.5d3]
xposi    = 200.
xlog     = 1
xttl     = 'j!Dde!N [nA m!U-2!N'+']'
fname    = fpref[0]+'jdrift'+fsufx[0]
xdat0    = qq*(vdrmg0*1d3)*(dens0*1d6)*1d9        ; => Estimate current density [nA m^(-2)]
xdat1    = qq*(vdrmg1*1d3)*(dens1*1d6)*1d9        ; => Estimate current density [nA m^(-2)]
xdat2    = qq*(vdrmg2*1d3)*(dens2*1d6)*1d9        ; => Estimate current density [nA m^(-2)]
xdat3    = qq*(vdrmg3*1d3)*(dens3*1d6)*1d9        ; => Estimate current density [nA m^(-2)]
;------------------------------------------------
; => Qe Plots
;------------------------------------------------
xra      = [1d1,1d3]
xttl     = 'Q!De!N [keV km s!U-1!N cm!U-3!N'+']'
xposi    = 20.
xlog     = 1
fname    = fpref[0]+'Qe'+fsufx[0]
xdat0    = qmag0*1d-3                             ; => heat flux magnitude [keV km/s cm^(-3)]
xdat1    = qmag1*1d-3                             ; => heat flux magnitude [keV km/s cm^(-3)]
xdat2    = qmag2*1d-3                             ; => heat flux magnitude [keV km/s cm^(-3)]
xdat3    = qmag3*1d-3                             ; => heat flux magnitude [keV km/s cm^(-3)]
;------------------------------------------------
; => betaec_par Plots
;------------------------------------------------
xra      = [1d-1,1.2d0]
xttl     = '!7b!3'+'!Dce,par!N [unitless]'
xposi    = 0.3
xlog     = 1
fname    = fpref[0]+'Beta-ce-para'+fsufx[0]
xdat0    = betapa0                                ; => core para. electron beta
xdat1    = betapa1                                ; => core para. electron beta
xdat2    = betapa2                                ; => core para. electron beta
xdat3    = betapa3                                ; => core para. electron beta
;------------------------------------------------
; => w_pe/w_ce Plots
;------------------------------------------------
xra      = [2d1,1d2]
xttl     = '!7x!3'+'!Dpe!N'+'/!7X!3'+'!Dce!N [unitless]'
xposi    = 30.0
xlog     = 0
fname    = fpref[0]+'wpe_wce'+fsufx[0]
xdat0    = wpe0/wce0
xdat1    = wpe1/wce1
xdat2    = wpe2/wce2
xdat3    = wpe3/wce3
;------------------------------------------------
; => Te/Ti Plots
;------------------------------------------------
xra      = [0d0,2.5]
xttl     = 'T!De!N'+'/T!Di!N [unitless]'
xposi    = 0.3
xlog     = 0
fname    = fpref[0]+'Te_Ti'+fsufx[0]
xdat0    = teavg0/tiavg0
xdat1    = teavg1/tiavg1
xdat2    = teavg2/tiavg2
xdat3    = teavg3/tiavg3
;------------------------------------------------
; => T_ec,perp/T_ec,para Plots
;------------------------------------------------
xra      = [5d-1,2.0]
xttl     = 'T!Dec,perp!N'+'/T!Dec,para!N [unitless]'
xposi    = 1.5
xlog     = 0
fname    = fpref[0]+'Tanis_ec'+fsufx[0]
xdat0    = tperc0/tparc0
xdat1    = tperc1/tparc1
xdat2    = tperc2/tparc2
xdat3    = tperc3/tparc3
;------------------------------------------------
; => T_eh,perp/T_eh,para Plots
;------------------------------------------------
xra      = [5d-1,2.0]
xttl     = 'T!Deh,perp!N'+'/T!Deh,para!N [unitless]'
xposi    = 1.5
xlog     = 0
fname    = fpref[0]+'Tanis_eh'+fsufx[0]
xdat0    = tperh0/tparh0
xdat1    = tperh1/tparh1
xdat2    = tperh2/tparh2
xdat3    = tperh3/tparh3
;------------------------------------------------
; => Teh/Tec Plots
;------------------------------------------------
xra      = [2d0,1d1]
xttl     = 'T!Deh!N'+'/T!Dec!N [unitless]'
xposi    = 3.0
xlog     = 1
fname    = fpref[0]+'Teh_Tec'+fsufx[0]
xdat0    = tehavg0/tecavg0
xdat1    = tehavg1/tecavg1
xdat2    = tehavg2/tecavg2
xdat3    = tehavg3/tecavg3
;------------------------------------------------
; => T_eh,par/T_ec,par Plots
;------------------------------------------------
xra      = [2d0,1d1]
xttl     = 'T!Deh,par!N'+'/T!Dec,par!N [unitless]'
xposi    = 3.0
xlog     = 1
fname    = fpref[0]+'Teh-para_Tec-para'+fsufx[0]
xdat0    = tparh0/tparc0
xdat1    = tparh1/tparc1
xdat2    = tparh2/tparc2
xdat3    = tparh3/tparc3

xdata    = [xdat0,xdat1,xdat2,xdat3]
ydata    = [ydat0,ydat1,ydat2,ydat3]
sp       = SORT(xdata)
xdata    = xdata[sp]
ydata    = ydata[sp]
unq      = UNIQ(xdata,SORT(xdata))
xdatau   = xdata[unq]
gdu      = N_ELEMENTS(xdatau)
avg_yda  = REPLICATE(d,gdu)       ; => Array of avg. Y-values for each X-value
std_yda  = REPLICATE(d,gdu)       ; => Array of std. dev. of Y-values for each X-value
FOR j=0L, gdu - 1L DO BEGIN                                    $
  good0      = WHERE(xdata EQ xdatau[j],gd0)                 & $
  IF (gd0 GT 0) THEN avg_yda[j] = MEAN(ydata[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_yda[j] = STDDEV(ydata[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_yda[j] = 1d-1*avg_yda[j]

; => Determine y-ranges by high and low values
ylow   = avg_yda - std_yda
yhigh  = avg_yda + std_yda
bad    = WHERE(ylow LE 0d0,bd)
IF (bd GT 0) THEN ylow[bad] = 0.01

good0    = array_where(xdat0,xdatau,/N_UNIQ)
good1    = array_where(xdat1,xdatau,/N_UNIQ)
good2    = array_where(xdat2,xdatau,/N_UNIQ)
good3    = array_where(xdat3,xdatau,/N_UNIQ)
HELP, good0, good1, good2, good3
;  GOOD0           LONG      = Array[32, 2]
;  GOOD1           LONG      = Array[119, 2]
;  GOOD2           LONG      = Array[172, 2]
;  GOOD3           LONG      = Array[108, 2]
IF (good0[0] GE 0) THEN good0 = good0[UNIQ(REFORM(good0[*,1]),SORT(REFORM(good0[*,1]))),1]
IF (good1[0] GE 0) THEN good1 = good1[UNIQ(REFORM(good1[*,1]),SORT(REFORM(good1[*,1]))),1]
IF (good2[0] GE 0) THEN good2 = good2[UNIQ(REFORM(good2[*,1]),SORT(REFORM(good2[*,1]))),1]
IF (good3[0] GE 0) THEN good3 = good3[UNIQ(REFORM(good3[*,1]),SORT(REFORM(good3[*,1]))),1]
HELP, good0, good1, good2, good3
;  GOOD0           LONG      =            0
;  GOOD1           LONG      = Array[11]
;  GOOD2           LONG      = Array[13]
;  GOOD3           LONG      = Array[8]

; => Define data for 1997-12-10
xdat0  = [xdatau[good0]]
ydatl0 = [ylow[good0]]
ydath0 = [yhigh[good0]]
ydat0  = [avg_yda[good0]]
; => Define data for 1998-08-26
xdat1  = xdatau[good1]
ydatl1 = ylow[good1]
ydath1 = yhigh[good1]
ydat1  = [avg_yda[good1]]
; => Define data for 1998-09-24
xdat2  = xdatau[good2]
ydatl2 = ylow[good2]
ydath2 = yhigh[good2]
ydat2  = [avg_yda[good2]]
; => Define data for 2000-02-11
xdat3  = xdatau[good3]
ydatl3 = ylow[good3]
ydath3 = yhigh[good3]
ydat3  = [avg_yda[good3]]

IF (xlog) THEN xminor = 9 ELSE xminor = 10
pstr   = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl,NODATA:1,YLOG:1,$
          XLOG:xlog,YSTYLE:1,XSTYLE:1,XMINOR:xminor}
  PLOT,xdat0,ydatl0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl0,ydath0,/DATA,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl1,ydath1,/DATA,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl2,ydath2,/DATA,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl3,ydath3,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50

popen,fname[0],/LAND
  PLOT,xdat0,ydatl0,_EXTRA=pstr
    OPLOT,xdat0,ydat0,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl0,ydath0,/DATA,COLOR=250
    OPLOT,xdat1,ydat1,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl1,ydath1,/DATA,COLOR=200
    OPLOT,xdat2,ydat2,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl2,ydath2,/DATA,COLOR=150
    OPLOT,xdat3,ydat3,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl3,ydath3,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50
pclose


;-----------------------------------------------------------------------------------------
; => f_rest/flh vs. Params. Plots
;-----------------------------------------------------------------------------------------
tdates   = STRMID(STRTRIM(scets,2L),0L,10L)
tdatesu  = STRMID(tdates[UNIQ(tdates,SORT(tdates))],0L,10L)
good_0   = WHERE(tdates EQ tdatesu[0],gd_0)
good_1   = WHERE(tdates EQ tdatesu[1],gd_1)
good_2   = WHERE(tdates EQ tdatesu[2] OR tdates EQ tdatesu[3],gd_2)
good_3   = WHERE(tdates EQ tdatesu[4] OR tdates EQ tdatesu[5],gd_3)
PRINT,';   ',gd_0,gd_1,gd_2,gd_3
;             32         119         172         108
yposi    = [20.,10.,5.,1.]
yra      = [1d-2,5d1]
yttl     = '!7x!3'+'!Drest!N'+'/!7x!3'+'!Dlh!N (unitless)'
yttls0   = '!C'+'[f!Dsc!N'+'-low, (- sign)]'
yttls1   = '!C'+'[f!Dsc!N'+'-low, (+ sign)]'
yttls2   = '!C'+'[f!Dsc!N'+'-high, (- sign)]'
yttls3   = '!C'+'[f!Dsc!N'+'-high, (+ sign)]'
fpref    = 'RestFreq-wlh_vs_'
fsufx    = '_Avg-per-unique-Xvalue_plusminus-STDDEV'
suffx0   = '_fsc-lows_minus-sign'
suffx1   = '_fsc-lows_pluss-sign'
suffx2   = '_fsc-high_minus-sign'
suffx3   = '_fsc-high_pluss-sign'
; => f_sc,low  -> (- sign) |k| soln. for f_rest
ydat00   = frest_lfkm[good_0]/wlh[good_0]
ydat01   = frest_lfkm[good_1]/wlh[good_1]
ydat02   = frest_lfkm[good_2]/wlh[good_2]
ydat03   = frest_lfkm[good_3]/wlh[good_3]
; => f_sc,low  -> (+ sign) |k| soln. for f_rest
ydat10   = frest_lfkp[good_0]/wlh[good_0]
ydat11   = frest_lfkp[good_1]/wlh[good_1]
ydat12   = frest_lfkp[good_2]/wlh[good_2]
ydat13   = frest_lfkp[good_3]/wlh[good_3]
; => f_sc,high -> (- sign) |k| soln. for f_rest
ydat20   = frest_hfkm[good_0]/wlh[good_0]
ydat21   = frest_hfkm[good_1]/wlh[good_1]
ydat22   = frest_hfkm[good_2]/wlh[good_2]
ydat23   = frest_hfkm[good_3]/wlh[good_3]
; => f_sc,high -> (+ sign) |k| soln. for f_rest
ydat30   = frest_hfkp[good_0]/wlh[good_0]
ydat31   = frest_hfkp[good_1]/wlh[good_1]
ydat32   = frest_hfkp[good_2]/wlh[good_2]
ydat33   = frest_hfkp[good_3]/wlh[good_3]
;------------------------------------------------
; => T_eh,par/T_ec,par Plots
;------------------------------------------------
xra      = [2d0,1d1]
xttl     = 'T!Deh,par!N'+'/T!Dec,par!N [unitless]'
xposi    = 3.0
xlog     = 1
fname0   = fpref[0]+'Teh-para_Tec-para'+fsufx[0]+suffx0[0]
fname1   = fpref[0]+'Teh-para_Tec-para'+fsufx[0]+suffx1[0]
fname2   = fpref[0]+'Teh-para_Tec-para'+fsufx[0]+suffx2[0]
fname3   = fpref[0]+'Teh-para_Tec-para'+fsufx[0]+suffx3[0]
xdat0    = thc_par[good_0]
xdat1    = thc_par[good_1]
xdat2    = thc_par[good_2]
xdat3    = thc_par[good_3]
;------------------------------------------------
; => T_eh/T_i Plots
;------------------------------------------------
xra      = [1d0,1.2d1]
xttl     = 'T!Deh!N'+'/T!Di!N [unitless]'
xposi    = 3.0
xlog     = 1
fname0   = fpref[0]+'Teh_Ti'+fsufx[0]+suffx0[0]
fname1   = fpref[0]+'Teh_Ti'+fsufx[0]+suffx1[0]
fname2   = fpref[0]+'Teh_Ti'+fsufx[0]+suffx2[0]
fname3   = fpref[0]+'Teh_Ti'+fsufx[0]+suffx3[0]
xdat0    = tehavg[good_0]/tiavg[good_0]
xdat1    = tehavg[good_1]/tiavg[good_1]
xdat2    = tehavg[good_2]/tiavg[good_2]
xdat3    = tehavg[good_3]/tiavg[good_3]
;------------------------------------------------
; => T_ec/T_i Plots
;------------------------------------------------
xra      = [1d-1,2d0]
xttl     = 'T!Dec!N'+'/T!Di!N [unitless]'
xposi    = 0.3
xlog     = 1
fname0   = fpref[0]+'Tec_Ti'+fsufx[0]+suffx0[0]
fname1   = fpref[0]+'Tec_Ti'+fsufx[0]+suffx1[0]
fname2   = fpref[0]+'Tec_Ti'+fsufx[0]+suffx2[0]
fname3   = fpref[0]+'Tec_Ti'+fsufx[0]+suffx3[0]
xdat0    = tecavg[good_0]/tiavg[good_0]
xdat1    = tecavg[good_1]/tiavg[good_1]
xdat2    = tecavg[good_2]/tiavg[good_2]
xdat3    = tecavg[good_3]/tiavg[good_3]



xdata    = [xdat0,xdat1,xdat2,xdat3]
ydata0   = [ydat00,ydat01,ydat02,ydat03]
ydata1   = [ydat10,ydat11,ydat12,ydat13]
ydata2   = [ydat20,ydat21,ydat22,ydat23]
ydata3   = [ydat30,ydat31,ydat32,ydat33]
sp       = SORT(xdata)
xdata    = xdata[sp]
ydata0   = ydata0[sp]
ydata1   = ydata1[sp]
ydata2   = ydata2[sp]
ydata3   = ydata3[sp]
unq      = UNIQ(xdata,SORT(xdata))
xdatau   = xdata[unq]
gdu      = N_ELEMENTS(xdatau)

avg_yda0 = REPLICATE(d,gdu)       ; => Array of avg. Y-values for each X-value
std_yda0 = REPLICATE(d,gdu)       ; => Array of std. dev. of Y-values for each X-value
avg_yda1 = REPLICATE(d,gdu)       ; => Array of avg. Y-values for each X-value
std_yda1 = REPLICATE(d,gdu)       ; => Array of std. dev. of Y-values for each X-value
avg_yda2 = REPLICATE(d,gdu)       ; => Array of avg. Y-values for each X-value
std_yda2 = REPLICATE(d,gdu)       ; => Array of std. dev. of Y-values for each X-value
avg_yda3 = REPLICATE(d,gdu)       ; => Array of avg. Y-values for each X-value
std_yda3 = REPLICATE(d,gdu)       ; => Array of std. dev. of Y-values for each X-value
FOR j=0L, gdu - 1L DO BEGIN                                      $
  good0      = WHERE(xdata EQ xdatau[j],gd0)                   & $
  IF (gd0 GT 0) THEN avg_yda0[j] = MEAN(ydata0[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_yda0[j] = STDDEV(ydata0[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_yda0[j] = 1d-1*avg_yda0[j]            & $
  IF (gd0 GT 0) THEN avg_yda1[j] = MEAN(ydata1[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_yda1[j] = STDDEV(ydata1[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_yda1[j] = 1d-1*avg_yda1[j]            & $
  IF (gd0 GT 0) THEN avg_yda2[j] = MEAN(ydata2[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_yda2[j] = STDDEV(ydata2[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_yda2[j] = 1d-1*avg_yda2[j]            & $
  IF (gd0 GT 0) THEN avg_yda3[j] = MEAN(ydata3[good0],/NAN)    & $
  IF (gd0 GT 0) THEN std_yda3[j] = STDDEV(ydata3[good0],/NAN)  & $
  IF (gd0 EQ 1) THEN std_yda3[j] = 1d-1*avg_yda3[j]

; => Determine y-ranges by high and low values
ylow0  = avg_yda0 - std_yda0         ; => f_sc,low  -> (- sign) |k| soln. for f_rest
yhigh0 = avg_yda0 + std_yda0
ylow1  = avg_yda1 - std_yda1         ; => f_sc,low  -> (+ sign) |k| soln. for f_rest
yhigh1 = avg_yda1 + std_yda1
ylow2  = avg_yda2 - std_yda2         ; => f_sc,high -> (- sign) |k| soln. for f_rest
yhigh2 = avg_yda2 + std_yda2
ylow3  = avg_yda3 - std_yda3         ; => f_sc,high -> (+ sign) |k| soln. for f_rest
yhigh3 = avg_yda3 + std_yda3
bad    = WHERE(ylow0 LE 0d0,bd)
IF (bd GT 0) THEN ylow0[bad] = 0.01
bad    = WHERE(ylow1 LE 0d0,bd)
IF (bd GT 0) THEN ylow1[bad] = 0.01
bad    = WHERE(ylow2 LE 0d0,bd)
IF (bd GT 0) THEN ylow2[bad] = 0.01
bad    = WHERE(ylow3 LE 0d0,bd)
IF (bd GT 0) THEN ylow3[bad] = 0.01

good0    = array_where(xdat0,xdatau,/N_UNIQ)
good1    = array_where(xdat1,xdatau,/N_UNIQ)
good2    = array_where(xdat2,xdatau,/N_UNIQ)
good3    = array_where(xdat3,xdatau,/N_UNIQ)
HELP, good0, good1, good2, good3
;  GOOD0           LONG      = Array[32, 2]
;  GOOD1           LONG      = Array[119, 2]
;  GOOD2           LONG      = Array[172, 2]
;  GOOD3           LONG      = Array[108, 2]
IF (good0[0] GE 0) THEN good0 = good0[UNIQ(REFORM(good0[*,1]),SORT(REFORM(good0[*,1]))),1]
IF (good1[0] GE 0) THEN good1 = good1[UNIQ(REFORM(good1[*,1]),SORT(REFORM(good1[*,1]))),1]
IF (good2[0] GE 0) THEN good2 = good2[UNIQ(REFORM(good2[*,1]),SORT(REFORM(good2[*,1]))),1]
IF (good3[0] GE 0) THEN good3 = good3[UNIQ(REFORM(good3[*,1]),SORT(REFORM(good3[*,1]))),1]
HELP, good0, good1, good2, good3
;  GOOD0           LONG      =            0
;  GOOD1           LONG      = Array[11]
;  GOOD2           LONG      = Array[13]
;  GOOD3           LONG      = Array[8]

; => Define data for 1997-12-10
xdat0   = [xdatau[good0]]
ydat00  = [avg_yda0[good0]]         ; => f_sc,low  -> (- sign) |k| soln. for f_rest
ydat10  = [avg_yda1[good0]]         ; => f_sc,low  -> (+ sign) |k| soln. for f_rest
ydat20  = [avg_yda2[good0]]         ; => f_sc,high -> (- sign) |k| soln. for f_rest
ydat30  = [avg_yda3[good0]]         ; => f_sc,high -> (+ sign) |k| soln. for f_rest
ydatl00 = [ylow0[good0]]
ydatl10 = [ylow1[good0]]
ydatl20 = [ylow2[good0]]
ydatl30 = [ylow3[good0]]
ydath00 = [yhigh0[good0]]
ydath10 = [yhigh1[good0]]
ydath20 = [yhigh2[good0]]
ydath30 = [yhigh3[good0]]
; => Define data for 1998-08-26
xdat1   = [xdatau[good1]]
ydat01  = [avg_yda0[good1]]         ; => f_sc,low  -> (- sign) |k| soln. for f_rest
ydat11  = [avg_yda1[good1]]         ; => f_sc,low  -> (+ sign) |k| soln. for f_rest
ydat21  = [avg_yda2[good1]]         ; => f_sc,high -> (- sign) |k| soln. for f_rest
ydat31  = [avg_yda3[good1]]         ; => f_sc,high -> (+ sign) |k| soln. for f_rest
ydatl01 = [ylow0[good1]]
ydatl11 = [ylow1[good1]]
ydatl21 = [ylow2[good1]]
ydatl31 = [ylow3[good1]]
ydath01 = [yhigh0[good1]]
ydath11 = [yhigh1[good1]]
ydath21 = [yhigh2[good1]]
ydath31 = [yhigh3[good1]]
; => Define data for 1998-09-24
xdat2   = [xdatau[good2]]
ydat02  = [avg_yda0[good2]]         ; => f_sc,low  -> (- sign) |k| soln. for f_rest
ydat12  = [avg_yda1[good2]]         ; => f_sc,low  -> (+ sign) |k| soln. for f_rest
ydat22  = [avg_yda2[good2]]         ; => f_sc,high -> (- sign) |k| soln. for f_rest
ydat32  = [avg_yda3[good2]]         ; => f_sc,high -> (+ sign) |k| soln. for f_rest
ydatl02 = [ylow0[good2]]
ydatl12 = [ylow1[good2]]
ydatl22 = [ylow2[good2]]
ydatl32 = [ylow3[good2]]
ydath02 = [yhigh0[good2]]
ydath12 = [yhigh1[good2]]
ydath22 = [yhigh2[good2]]
ydath32 = [yhigh3[good2]]
; => Define data for 2000-02-11
xdat3   = [xdatau[good3]]
ydat03  = [avg_yda0[good3]]         ; => f_sc,low  -> (- sign) |k| soln. for f_rest
ydat13  = [avg_yda1[good3]]         ; => f_sc,low  -> (+ sign) |k| soln. for f_rest
ydat23  = [avg_yda2[good3]]         ; => f_sc,high -> (- sign) |k| soln. for f_rest
ydat33  = [avg_yda3[good3]]         ; => f_sc,high -> (+ sign) |k| soln. for f_rest
ydatl03 = [ylow0[good3]]
ydatl13 = [ylow1[good3]]
ydatl23 = [ylow2[good3]]
ydatl33 = [ylow3[good3]]
ydath03 = [yhigh0[good3]]
ydath13 = [yhigh1[good3]]
ydath23 = [yhigh2[good3]]
ydath33 = [yhigh3[good3]]


IF (xlog) THEN xminor = 9 ELSE xminor = 10
pstr0  = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl+yttls0,NODATA:1,YLOG:1,$
          XLOG:xlog,YSTYLE:1,XSTYLE:1,XMINOR:xminor}
pstr1  = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl+yttls1,NODATA:1,YLOG:1,$
          XLOG:xlog,YSTYLE:1,XSTYLE:1,XMINOR:xminor}
pstr2  = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl+yttls2,NODATA:1,YLOG:1,$
          XLOG:xlog,YSTYLE:1,XSTYLE:1,XMINOR:xminor}
pstr3  = {XRANGE:xra,YRANGE:yra,XTITLE:xttl,YTITLE:yttl+yttls3,NODATA:1,YLOG:1,$
          XLOG:xlog,YSTYLE:1,XSTYLE:1,XMINOR:xminor}

; => f_sc,low  -> (- sign) |k| soln. for f_rest
WSET,0
  PLOT,xdat0,ydat00,_EXTRA=pstr0
    ; => Plot data for 1997-12-10
    OPLOT,xdat0,ydat00,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl00,ydath00,/DATA,COLOR=250
    ; => Plot data for 1998-08-26
    OPLOT,xdat1,ydat01,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl01,ydath01,/DATA,COLOR=200
    ; => Plot data for 1998-09-24
    OPLOT,xdat2,ydat02,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl02,ydath02,/DATA,COLOR=150
    ; => Plot data for 2000-02-11
    OPLOT,xdat3,ydat03,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl03,ydath03,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50

popen,fname0[0],/LAND
  PLOT,xdat0,ydat00,_EXTRA=pstr0
    ; => Plot data for 1997-12-10
    OPLOT,xdat0,ydat00,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl00,ydath00,/DATA,COLOR=250
    ; => Plot data for 1998-08-26
    OPLOT,xdat1,ydat01,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl01,ydath01,/DATA,COLOR=200
    ; => Plot data for 1998-09-24
    OPLOT,xdat2,ydat02,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl02,ydath02,/DATA,COLOR=150
    ; => Plot data for 2000-02-11
    OPLOT,xdat3,ydat03,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl03,ydath03,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50
pclose


; => f_sc,low  -> (+ sign) |k| soln. for f_rest
WSET,1
  PLOT,xdat0,ydat10,_EXTRA=pstr1
    ; => Plot data for 1997-12-10
    OPLOT,xdat0,ydat10,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl10,ydath10,/DATA,COLOR=250
    ; => Plot data for 1998-08-26
    OPLOT,xdat1,ydat11,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl11,ydath11,/DATA,COLOR=200
    ; => Plot data for 1998-09-24
    OPLOT,xdat2,ydat12,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl12,ydath12,/DATA,COLOR=150
    ; => Plot data for 2000-12-11
    OPLOT,xdat3,ydat13,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl13,ydath13,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50

popen,fname1[0],/LAND
  PLOT,xdat0,ydat10,_EXTRA=pstr1
    ; => Plot data for 1997-12-10
    OPLOT,xdat0,ydat10,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl10,ydath10,/DATA,COLOR=250
    ; => Plot data for 1998-08-26
    OPLOT,xdat1,ydat11,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl11,ydath11,/DATA,COLOR=200
    ; => Plot data for 1998-09-24
    OPLOT,xdat2,ydat12,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl12,ydath12,/DATA,COLOR=150
    ; => Plot data for 2000-12-11
    OPLOT,xdat3,ydat13,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl13,ydath13,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50
pclose


; => f_sc,high -> (- sign) |k| soln. for f_rest
WSET,2
  PLOT,xdat0,ydat20,_EXTRA=pstr2
    ; => Plot data for 1997-22-20
    OPLOT,xdat0,ydat20,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl20,ydath20,/DATA,COLOR=250
    ; => Plot data for 1998-08-26
    OPLOT,xdat1,ydat21,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl21,ydath21,/DATA,COLOR=200
    ; => Plot data for 1998-09-24
    OPLOT,xdat2,ydat22,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl22,ydath22,/DATA,COLOR=150
    ; => Plot data for 2000-22-21
    OPLOT,xdat3,ydat23,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl23,ydath23,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50

popen,fname2[0],/LAND
  PLOT,xdat0,ydat20,_EXTRA=pstr2
    ; => Plot data for 1997-22-20
    OPLOT,xdat0,ydat20,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl20,ydath20,/DATA,COLOR=250
    ; => Plot data for 1998-08-26
    OPLOT,xdat1,ydat21,PSYM=6,COLOR=200
    ERRPLOT,xdat1,ydatl21,ydath21,/DATA,COLOR=200
    ; => Plot data for 1998-09-24
    OPLOT,xdat2,ydat22,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl22,ydath22,/DATA,COLOR=150
    ; => Plot data for 2000-22-21
    OPLOT,xdat3,ydat23,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl23,ydath23,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50
pclose


; => f_sc,high -> (+ sign) |k| soln. for f_rest
WSET,3
  PLOT,xdat0,ydat30,_EXTRA=pstr3
    ; => Plot data for 1997-32-30
    OPLOT,xdat0,ydat30,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl30,ydath30,/DATA,COLOR=250
    ; => Plot data for 1998-08-26
    OPLOT,xdat1,ydat31,PSYM=6,COLOR=300
    ERRPLOT,xdat1,ydatl31,ydath31,/DATA,COLOR=300
    ; => Plot data for 1998-09-24
    OPLOT,xdat2,ydat32,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl32,ydath32,/DATA,COLOR=150
    ; => Plot data for 3000-32-31
    OPLOT,xdat3,ydat33,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl33,ydath33,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50

popen,fname3[0],/LAND
  PLOT,xdat0,ydat30,_EXTRA=pstr3
    ; => Plot data for 1997-32-30
    OPLOT,xdat0,ydat30,PSYM=6,COLOR=250
    ERRPLOT,xdat0,ydatl30,ydath30,/DATA,COLOR=250
    ; => Plot data for 1998-08-26
    OPLOT,xdat1,ydat31,PSYM=6,COLOR=300
    ERRPLOT,xdat1,ydatl31,ydath31,/DATA,COLOR=300
    ; => Plot data for 1998-09-24
    OPLOT,xdat2,ydat32,PSYM=6,COLOR=150
    ERRPLOT,xdat2,ydatl32,ydath32,/DATA,COLOR=150
    ; => Plot data for 3000-32-31
    OPLOT,xdat3,ydat33,PSYM=6,COLOR= 50
    ERRPLOT,xdat3,ydatl33,ydath33,/DATA,COLOR= 50
    XYOUTS,xposi[0],yposi[0],/DATA,'1997-12-10 [All]',COLOR=250
    XYOUTS,xposi[0],yposi[1],/DATA,'1998-08-26 [All]',COLOR=200
    XYOUTS,xposi[0],yposi[2],/DATA,'1998-09-24 [All]',COLOR=150
    XYOUTS,xposi[0],yposi[3],/DATA,'2000-02-11 [All]',COLOR= 50
pclose






