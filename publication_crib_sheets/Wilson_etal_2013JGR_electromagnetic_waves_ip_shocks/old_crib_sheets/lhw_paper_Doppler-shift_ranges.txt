;-----------------------------------------------------------------------------------------
; => Constants
;-----------------------------------------------------------------------------------------
f        = !VALUES.F_NAN
d        = !VALUES.D_NAN
c        = 2.99792458d8      ; -Speed of light in vacuum (m/s)
kB       = 1.380658d-23      ; -Boltzmann Constant (J/K)
K_eV     = 1.160474d4        ; -Conversion = degree Kelvin/eV
epo      = 8.854187817d-12   ; -Permittivity of free space (F/m)
muo      = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)
me       = 9.1093897d-31     ; -Electron mass (kg)
mp       = 1.6726231d-27     ; -Proton mass (kg)
qq       = 1.60217733d-19    ; => Fundamental charge (C)
c        = 2.99792458d8      ; -Speed of light in vacuum (m/s)

date     = '121097'
tramp    = '1997-12-10/04:33:14.664'
vshn     = 391.2                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test0    = tdss_lhw_stats_read(DATE=date)
evn0     = test0.EVENT_N
scet0    = test0.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t0   = time_double(scet0) - time_double(tramp)
dist_0   = del_t0*vshn[0]
avg_lfk0 = (test0.K_ST_LOWF_MP + test0.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk0 = (test0.K_ST_highF_MP + test0.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql0   = test0.FREQ_LOW_HIGH[*,0]
freqh0   = test0.FREQ_LOW_HIGH[*,1]
pkamp0   = test0.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp0 = test0.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
thkbl0   = test0.THETA_KB[*,0]       ; => (k . B)[at start of TDSS sample, degrees]
thkbh0   = test0.THETA_KB[*,1]       ; => (k . B)[at end   of TDSS sample, degrees]
thkvl0   = test0.THETA_KV[*,0]       ; => (k . Vsw)[at start of TDSS sample, degrees]
thkvh0   = test0.THETA_KV[*,1]       ; => (k . Vsw)[at end   of TDSS sample, degrees]
wce0     = (test0.WCE_SE[*,0] + test0.WCE_SE[*,1])/2d0
wpe0     = (test0.WPE_SE[*,0] + test0.WPE_SE[*,1])/2d0
wlh0     = (test0.WLH_SE[*,0] + test0.WLH_SE[*,1])/2d0
vte0     = (test0.VTE_SE[*,0] + test0.VTE_SE[*,1])/2d0
rhoe0    = (test0.RHO_VTCE_SE[*,0] + test0.RHO_VTCE_SE[*,1])/2d0
vsw0     = (test0.VSW_ST + test0.VSW_EN)/2d0
vdr0     = (test0.VDRIFT_ST + test0.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf0    = (test0.MAGF_ST + test0.MAGF_EN)/2d0
dens0    = (test0.NE_SE[*,0] + test0.NE_SE[*,1])/2d0
bmag0    = SQRT(TOTAL(magf0^2,2L,/NAN))
betapa0  = (test0.BETA_PARCE_SE[*,0] + test0.BETA_PARCE_SE[*,1])/2d0
teavg0   = (test0.TE_AVG_SE[*,0] + test0.TE_AVG_SE[*,1])/2d0
tiavg0   = (test0.TI_AVG_SE[*,0] + test0.TI_AVG_SE[*,1])/2d0
vti0     = SQRT(2d0*tiavg0*K_eV*kB/mp)
tecavg0  = (test0.TEC_SE[*,0] + test0.TEC_SE[*,1])/2d0
tehavg0  = (test0.TEH_SE[*,0] + test0.TEH_SE[*,1])/2d0
tparc0   = (test0.TPAR_EC_SE[*,0] + test0.TPAR_EC_SE[*,1])/2d0
tperc0   = (test0.TPER_EC_SE[*,0] + test0.TPER_EC_SE[*,1])/2d0
tparh0   = (test0.TPAR_EH_SE[*,0] + test0.TPAR_EH_SE[*,1])/2d0
tperh0   = (test0.TPER_EH_SE[*,0] + test0.TPER_EH_SE[*,1])/2d0
qmag0    = (test0.QMAG_SE[*,0] + test0.QMAG_SE[*,1])/2d0
kvec0    = test0.KVEC
gnorm80  = [-0.903, 0.168,-0.397]   ; => Using RH08 from JCK's site
gnorm90  = [-0.971, 0.094,-0.218]   ; => Using RH08 from JCK's site
thkn80   = ACOS(my_dot_prod(kvec0,gnorm80,/NOM))*18d1/!DPI
thkn90   = ACOS(my_dot_prod(kvec0,gnorm90,/NOM))*18d1/!DPI
thbn80   = REPLICATE(70.9,N_ELEMENTS(evn0))
thbn90   = REPLICATE(71.9,N_ELEMENTS(evn0))

date     = '082698'
tramp    = '1998-08-26/06:40:24.972'
vshn     = 687.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test1    = tdss_lhw_stats_read(DATE=date)
evn1     = test1.EVENT_N
scet1    = test1.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t1   = time_double(scet1) - time_double(tramp)
dist_1   = del_t1*vshn[0]
avg_lfk1 = (test1.K_ST_LOWF_MP + test1.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk1 = (test1.K_ST_highF_MP + test1.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql1   = test1.FREQ_LOW_HIGH[*,0]
freqh1   = test1.FREQ_LOW_HIGH[*,1]
thkbl1   = test1.THETA_KB[*,0]
thkbh1   = test1.THETA_KB[*,1]
thkvl1   = test1.THETA_KV[*,0]
thkvh1   = test1.THETA_KV[*,1]
pkamp1   = test1.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp1 = test1.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce1     = (test1.WCE_SE[*,0] + test1.WCE_SE[*,1])/2d0
wpe1     = (test1.WPE_SE[*,0] + test1.WPE_SE[*,1])/2d0
wlh1     = (test1.WLH_SE[*,0] + test1.WLH_SE[*,1])/2d0
vte1     = (test1.VTE_SE[*,0] + test1.VTE_SE[*,1])/2d0
rhoe1    = (test1.RHO_VTCE_SE[*,0] + test1.RHO_VTCE_SE[*,1])/2d0
vsw1     = (test1.VSW_ST + test1.VSW_EN)/2d0
vdr1     = (test1.VDRIFT_ST + test1.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf1    = (test1.MAGF_ST + test1.MAGF_EN)/2d0
dens1    = (test1.NE_SE[*,0] + test1.NE_SE[*,1])/2d0
bmag1    = SQRT(TOTAL(magf1^2,2L,/NAN))
betapa1  = (test1.BETA_PARCE_SE[*,0] + test1.BETA_PARCE_SE[*,1])/2d0
teavg1   = (test1.TE_AVG_SE[*,0] + test1.TE_AVG_SE[*,1])/2d0
tiavg1   = (test1.TI_AVG_SE[*,0] + test1.TI_AVG_SE[*,1])/2d0
vti1     = SQRT(2d0*tiavg1*K_eV*kB/mp)
tecavg1  = (test1.TEC_SE[*,0] + test1.TEC_SE[*,1])/2d0
tehavg1  = (test1.TEH_SE[*,0] + test1.TEH_SE[*,1])/2d0
tparc1   = (test1.TPAR_EC_SE[*,0] + test1.TPAR_EC_SE[*,1])/2d0
tperc1   = (test1.TPER_EC_SE[*,0] + test1.TPER_EC_SE[*,1])/2d0
tparh1   = (test1.TPAR_EH_SE[*,0] + test1.TPAR_EH_SE[*,1])/2d0
tperh1   = (test1.TPER_EH_SE[*,0] + test1.TPER_EH_SE[*,1])/2d0
qmag1    = (test1.QMAG_SE[*,0] + test1.QMAG_SE[*,1])/2d0
kvec1    = test1.KVEC
gnorm81  = [-0.655,0.040,-0.754]   ; => Using RH08 from JCK's site
gnorm91  = [-0.822,0.138,-0.553]   ; => Using RH09 from JCK's site
thkn81   = ACOS(my_dot_prod(kvec1,gnorm81,/NOM))*18d1/!DPI
thkn91   = ACOS(my_dot_prod(kvec1,gnorm91,/NOM))*18d1/!DPI
thbn81   = REPLICATE(82.2,N_ELEMENTS(evn1))
thbn91   = REPLICATE(78.7,N_ELEMENTS(evn1))

date     = '092498'
tramp    = '1998-09-24/23:20:37.374'
vshn     = 772.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test2    = tdss_lhw_stats_read(DATE=date)
evn2     = test2.EVENT_N
scet2    = test2.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t2   = time_double(scet2) - time_double(tramp)
dist_2   = del_t2*vshn[0]
avg_lfk2 = (test2.K_ST_LOWF_MP + test2.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk2 = (test2.K_ST_highF_MP + test2.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql2   = test2.FREQ_LOW_HIGH[*,0]
freqh2   = test2.FREQ_LOW_HIGH[*,1]
thkbl2   = test2.THETA_KB[*,0]
thkbh2   = test2.THETA_KB[*,1]
thkvl2   = test2.THETA_KV[*,0]
thkvh2   = test2.THETA_KV[*,1]
pkamp2   = test2.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp2 = test2.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce2     = (test2.WCE_SE[*,0] + test2.WCE_SE[*,1])/2d0
wpe2     = (test2.WPE_SE[*,0] + test2.WPE_SE[*,1])/2d0
wlh2     = (test2.WLH_SE[*,0] + test2.WLH_SE[*,1])/2d0
vte2     = (test2.VTE_SE[*,0] + test2.VTE_SE[*,1])/2d0
rhoe2    = (test2.RHO_VTCE_SE[*,0] + test2.RHO_VTCE_SE[*,1])/2d0
vsw2     = (test2.VSW_ST + test2.VSW_EN)/2d0
vdr2     = (test2.VDRIFT_ST + test2.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf2    = (test2.MAGF_ST + test2.MAGF_EN)/2d0
dens2    = (test2.NE_SE[*,0] + test2.NE_SE[*,1])/2d0
bmag2    = SQRT(TOTAL(magf2^2,2L,/NAN))
betapa2  = (test2.BETA_PARCE_SE[*,0] + test2.BETA_PARCE_SE[*,1])/2d0
teavg2   = (test2.TE_AVG_SE[*,0] + test2.TE_AVG_SE[*,1])/2d0
tiavg2   = (test2.TI_AVG_SE[*,0] + test2.TI_AVG_SE[*,1])/2d0
vti2     = SQRT(2d0*tiavg2*K_eV*kB/mp)
tecavg2  = (test2.TEC_SE[*,0] + test2.TEC_SE[*,1])/2d0
tehavg2  = (test2.TEH_SE[*,0] + test2.TEH_SE[*,1])/2d0
tparc2   = (test2.TPAR_EC_SE[*,0] + test2.TPAR_EC_SE[*,1])/2d0
tperc2   = (test2.TPER_EC_SE[*,0] + test2.TPER_EC_SE[*,1])/2d0
tparh2   = (test2.TPAR_EH_SE[*,0] + test2.TPAR_EH_SE[*,1])/2d0
tperh2   = (test2.TPER_EH_SE[*,0] + test2.TPER_EH_SE[*,1])/2d0
qmag2    = (test2.QMAG_SE[*,0] + test2.QMAG_SE[*,1])/2d0
kvec2    = test2.KVEC
gnorm82  = [-0.914,-0.220,-0.341]   ; => Using RH08 from JCK's site
gnorm92  = [-0.939,-0.175,-0.296]   ; => Using RH09 from JCK's site
thkn82   = ACOS(my_dot_prod(kvec2,gnorm82,/NOM))*18d1/!DPI
thkn92   = ACOS(my_dot_prod(kvec2,gnorm92,/NOM))*18d1/!DPI
thbn82   = REPLICATE(82.1,N_ELEMENTS(evn2))
thbn92   = REPLICATE(78.6,N_ELEMENTS(evn2))

date     = '021100'
tramp    = '2000-02-11/23:33:55.319'
vshn     = 641.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test3    = tdss_lhw_stats_read(DATE=date)
evn3     = test3.EVENT_N
scet3    = test3.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t3   = time_double(scet3) - time_double(tramp)
dist_3   = del_t3*vshn[0]
avg_lfk3 = (test3.K_ST_LOWF_MP + test3.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk3 = (test3.K_ST_highF_MP + test3.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql3   = test3.FREQ_LOW_HIGH[*,0]
freqh3   = test3.FREQ_LOW_HIGH[*,1]
thkbl3   = test3.THETA_KB[*,0]
thkbh3   = test3.THETA_KB[*,1]
thkvl3   = test3.THETA_KV[*,0]
thkvh3   = test3.THETA_KV[*,1]
pkamp3   = test3.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp3 = test3.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce3     = (test3.WCE_SE[*,0] + test3.WCE_SE[*,1])/2d0
wpe3     = (test3.WPE_SE[*,0] + test3.WPE_SE[*,1])/2d0
wlh3     = (test3.WLH_SE[*,0] + test3.WLH_SE[*,1])/2d0
vte3     = (test3.VTE_SE[*,0] + test3.VTE_SE[*,1])/2d0
rhoe3    = (test3.RHO_VTCE_SE[*,0] + test3.RHO_VTCE_SE[*,1])/2d0
vsw3     = (test3.VSW_ST + test3.VSW_EN)/2d0
vdr3     = (test3.VDRIFT_ST + test3.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf3    = (test3.MAGF_ST + test3.MAGF_EN)/2d0
dens3    = (test3.NE_SE[*,0] + test3.NE_SE[*,1])/2d0
bmag3    = SQRT(TOTAL(magf3^2,2L,/NAN))
betapa3  = (test3.BETA_PARCE_SE[*,0] + test3.BETA_PARCE_SE[*,1])/3d0
teavg3   = (test3.TE_AVG_SE[*,0] + test3.TE_AVG_SE[*,1])/3d0
tiavg3   = (test3.TI_AVG_SE[*,0] + test3.TI_AVG_SE[*,1])/3d0
vti3     = SQRT(2d0*tiavg3*K_eV*kB/mp)
tecavg3  = (test3.TEC_SE[*,0] + test3.TEC_SE[*,1])/3d0
tehavg3  = (test3.TEH_SE[*,0] + test3.TEH_SE[*,1])/3d0
tparc3   = (test3.TPAR_EC_SE[*,0] + test3.TPAR_EC_SE[*,1])/3d0
tperc3   = (test3.TPER_EC_SE[*,0] + test3.TPER_EC_SE[*,1])/3d0
tparh3   = (test3.TPAR_EH_SE[*,0] + test3.TPAR_EH_SE[*,1])/3d0
tperh3   = (test3.TPER_EH_SE[*,0] + test3.TPER_EH_SE[*,1])/3d0
qmag3    = (test3.QMAG_SE[*,0] + test3.QMAG_SE[*,1])/3d0
kvec3    = test3.KVEC
gnorm83  = [-0.865,-0.452,0.218]   ; => Using RH08 from JCK's site
gnorm93  = [-0.930,-0.367,-0.028]   ; => Using RH09 from JCK's site
thkn83   = ACOS(my_dot_prod(kvec3,gnorm83,/NOM))*18d1/!DPI
thkn93   = ACOS(my_dot_prod(kvec3,gnorm93,/NOM))*18d1/!DPI
thbn83   = REPLICATE(86.5,N_ELEMENTS(evn3))
thbn93   = REPLICATE(89.9,N_ELEMENTS(evn3))
;-----------------------------------------------------------------------------------------
; => Combine terms
;-----------------------------------------------------------------------------------------
evns     = [evn0,evn1,evn2,evn3]
scets    = [scet0,scet1,scet2,scet3]
scete    = [test0.SCET_SE[*,1],test1.SCET_SE[*,1],test2.SCET_SE[*,1],test3.SCET_SE[*,1]]
kvecs    = [kvec0,kvec1,kvec2,kvec3]
kvecx    = [test0.KVEC[*,0],test1.KVEC[*,0],test2.KVEC[*,0],test3.KVEC[*,0]]
kvecy    = [test0.KVEC[*,1],test1.KVEC[*,1],test2.KVEC[*,1],test3.KVEC[*,1]]
kvecz    = [test0.KVEC[*,2],test1.KVEC[*,2],test2.KVEC[*,2],test3.KVEC[*,2]]
pkamps   = [pkamp0,pkamp1,pkamp2,pkamp3]/2d0      ; => change from Peak-to-Peak to Peak
filtamp  = [ftpkamp0,ftpkamp1,ftpkamp2,ftpkamp3]  ; => Filtered amplitudes
dist_r   = [dist_0,dist_1,dist_2,dist_3]          ; => normal distance from shock ramp (km)

thbn8    = [thbn80,thbn81,thbn82,thbn83]          ; => Theta_Bn (deg) [RH08 JCK's]
thbn9    = [thbn90,thbn91,thbn92,thbn93]          ; => Theta_Bn (deg) [RH08 JCK's]
thkbl    = [thkbl0,thkbl1,thkbl2,thkbl3]          ; => Theta_kB (deg) [low  freq. end of bandpass]
thkvl    = [thkvl0,thkvl1,thkvl2,thkvl3]          ; => Theta_kV (deg) [low  freq. end of bandpass]
thkbh    = [thkbh0,thkbh1,thkbh2,thkbh3]          ; => Theta_kB (deg) [high freq. end of bandpass]
thkvh    = [thkvh0,thkvh1,thkvh2,thkvh3]          ; => Theta_kV (deg) [high freq. end of bandpass]
thkbl90  = thkbl < (18d1 - thkbl)
thkbh90  = thkbh < (18d1 - thkbh)
thkvl90  = thkvl < (18d1 - thkvl)
thkvh90  = thkvh < (18d1 - thkvh)
thkb_av  = (thkbl90 + thkbh90)/2d0
thkv_av  = (thkvl90 + thkvh90)/2d0

vsw      = [vsw0,vsw1,vsw2,vsw3]                  ; => PL solar wind velocity (km/s) [GSE]
vmag     = SQRT(TOTAL(vsw^2,2L,/NAN))
freql    = [freql0,freql1,freql2,freql3]          ; => (Hz) low  freq. end of bandpass
freqh    = [freqh0,freqh1,freqh2,freqh3]          ; => (Hz) high freq. end of bandpass
wce      = [wce0,wce1,wce2,wce3]                  ; => Electron cyclotron frequency (rad/s)
wcp      = wce*me/mp                              ; => Proton   cyclotron frequency (rad/s)
wpe      = [wpe0,wpe1,wpe2,wpe3]                  ; => Electron plasma    frequency (rad/s)
wlh      = [wlh0,wlh1,wlh2,wlh3]                  ; => ES lower hybrid resonance frequency (rad/s)
rhoe     = [rhoe0,rhoe1,rhoe2,rhoe3]              ; => Electron thermal gyroradius (km)
rhop     = rhoe*SQRT(mp/me)                       ; => Proton thermal gyroradius (km)
avg_lfk  = [avg_lfk0,avg_lfk1,avg_lfk2,avg_lfk3]  ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk  = [avg_hfk0,avg_hfk1,avg_hfk2,avg_hfk3]  ; => [Avg. |k| from high freq. end of bandpass]
dens     = [dens0,dens1,dens2,dens3]              ; => Electron density [cm^(-3)] from TNR
magf     = [magf0,magf1,magf2,magf3]
bmag     = [bmag0,bmag1,bmag2,bmag3]              ; => Magnitude of the B-field (nT)

; => Calc. Alfven, IA, and magnetosonic speeds
valf     = (bmag*1d-9)/SQRT(mp*muo*1d6*dens)

; => Normalize the wave number by the electron inertial length
kcwpelfm = avg_lfk[*,0]*c*1d-3/wpe
kcwpelfp = avg_lfk[*,1]*c*1d-3/wpe
kcwpehfm = avg_hfk[*,0]*c*1d-3/wpe
kcwpehfp = avg_hfk[*,1]*c*1d-3/wpe

; => Normalize the wave number by the electron thermal gyroradius
krhoelfm = avg_lfk[*,0]*rhoe
krhoelfp = avg_lfk[*,1]*rhoe
krhoehfm = avg_hfk[*,0]*rhoe
krhoehfp = avg_hfk[*,1]*rhoe
;---------------------------------------------------------------------
; => Wave number estimates from:
;
; => Calculations of Eq. 4 from Coroniti et al., [1982]
;  Coroniti, F. V., C. F. Kennel, F. L. Scarf, and E. J. Smith (1982),
;    Whistler mode turbulence in the disturbed solar wind, J. Geophys.
;    Res., 87, 6029–6044, doi:10.1029/JA087iA08p06029.
;---------------------------------------------------------------------
; => Separate by plus and minus sign
avg_lfkm = avg_lfk[*,0]  ; => [Avg. |k| (- sign) from low  freq. end of bandpass]
avg_lfkp = avg_lfk[*,1]  ; => [Avg. |k| (+ sign) from low  freq. end of bandpass]
avg_hfkm = avg_hfk[*,0]  ; => [Avg. |k| (- sign) from high freq. end of bandpass]
avg_hfkp = avg_hfk[*,1]  ; => [Avg. |k| (+ sign) from high freq. end of bandpass]
; => Calculate rest frame frequencies from wave number estimates
ckm        = (c*1d-3)
fac0l      = wce*ABS(COS(thkbl*!DPI/18d1))
fac0h      = wce*ABS(COS(thkbh*!DPI/18d1))
fac1lm     = (wpe/(ckm*avg_lfkm))^2
fac1lp     = (wpe/(ckm*avg_lfkp))^2
fac1hm     = (wpe/(ckm*avg_hfkm))^2
fac1hp     = (wpe/(ckm*avg_hfkp))^2
frest_lfkm = fac0l/(1d0 + fac1lm)  ; => Rest frame freq. (rad/s) [|k| (- sign) from low  freq. end of bandpass]
frest_lfkp = fac0l/(1d0 + fac1lp)  ; => Rest frame freq. (rad/s) [|k| (+ sign) from low  freq. end of bandpass]
frest_hfkm = fac0h/(1d0 + fac1hm)  ; => Rest frame freq. (rad/s) [|k| (- sign) from high freq. end of bandpass]
frest_hfkp = fac0h/(1d0 + fac1hp)  ; => Rest frame freq. (rad/s) [|k| (+ sign) from high freq. end of bandpass]

; => Calculate index of refraction
testlm   = cold_plasma_params_2d(bmag,dens,FREQF=frest_lfkm/(2d0*!DPI),ANGLE=thkb,/ONED)
testlp   = cold_plasma_params_2d(bmag,dens,FREQF=frest_lfkp/(2d0*!DPI),ANGLE=thkb,/ONED)
testhm   = cold_plasma_params_2d(bmag,dens,FREQF=frest_hfkm/(2d0*!DPI),ANGLE=thkb,/ONED)
testhp   = cold_plasma_params_2d(bmag,dens,FREQF=frest_hfkp/(2d0*!DPI),ANGLE=thkb,/ONED)
indexlm  = testlm.INDEX_REF_1
alfvinlm = testlm.INDEX_ALFVEN
bad      = WHERE(indexlm LT 0.,bd)
IF (bd GT 0) THEN indexlm[bad] = d
indexlp  = testlp.INDEX_REF_1
alfvinlp = testlp.INDEX_ALFVEN
bad      = WHERE(indexlp LT 0.,bd)
IF (bd GT 0) THEN indexlp[bad] = d
indexhm  = testhm.INDEX_REF_1
alfvinhm = testhm.INDEX_ALFVEN
bad      = WHERE(indexhm LT 0.,bd)
IF (bd GT 0) THEN indexhm[bad] = d
indexhp  = testhp.INDEX_REF_1
alfvinhp = testhp.INDEX_ALFVEN
bad      = WHERE(indexhp LT 0.,bd)
IF (bd GT 0) THEN indexhp[bad] = d
;-----------------------------------------------------------------------------------------
; => Define frequency ranges
;-----------------------------------------------------------------------------------------
flh       = wlh/(2d0*!DPI)
delflow   = (freql - flh) LE 0
delfhigh  = (freqh - flh)
; => Define "Low"  as (freql LE flh) AND (freqh LE 40.)
; => Define "High" as (freql GT flh) AND (freqh GT 40.) AND (delfhigh GT 0.)
test_low  = delflow        AND (freqh LE 40.)
test_high = (freql GT flh) AND (freqh GT 40.) AND (delfhigh GT 0.)
good_low  = WHERE(test_low ,gdlw)
good_high = WHERE(test_high,gdhh)
PRINT,';   ',gdlw,gdhh
;            115         307


;-----------------------------------------------------------------------------------------
; => Define Doppler shift ranges
;-----------------------------------------------------------------------------------------

; => Define low/high values for each variable
thkb_la   = thkb_av[good_low]*!DPI/18d1
thkv_la   = thkv_av[good_low]*!DPI/18d1
thkb_ha   = thkb_av[good_high]*!DPI/18d1
thkv_ha   = thkv_av[good_high]*!DPI/18d1

vmagl     = vmag[good_low]    ; => km/s
vmagh     = vmag[good_high]

freqll    = freql[good_low]   ; => Hz
freqlh    = freql[good_high]  ; => Hz
freqhl    = freqh[good_low]   ; => Hz
freqhh    = freqh[good_high]  ; => Hz

; => Wave Numbers are in km^(-1)

; => [Avg. |k| (- sign) from low  freq. end of bandpass]
avg_lfkml = avg_lfkm[good_low]
avg_lfkmh = avg_lfkm[good_high]
PRINT,'; ',  MIN(avg_lfkml,/NAN),    MAX(avg_lfkml,/NAN), $
            MEAN(avg_lfkml,/NAN), STDDEV(avg_lfkml,/NAN)
PRINT,'; ',  MIN(avg_lfkmh,/NAN),    MAX(avg_lfkmh,/NAN), $
            MEAN(avg_lfkmh,/NAN), STDDEV(avg_lfkmh,/NAN)
;      0.018277001      0.12238700     0.033455231     0.015889705
;      0.017763000      0.31839699      0.10423413     0.080478004

; => [Avg. |k| (+ sign) from low  freq. end of bandpass]
avg_lfkpl = avg_lfkp[good_low]
avg_lfkph = avg_lfkp[good_high]
PRINT,'; ',  MIN(avg_lfkpl,/NAN),    MAX(avg_lfkpl,/NAN), $
            MEAN(avg_lfkpl,/NAN), STDDEV(avg_lfkpl,/NAN)
PRINT,'; ',  MIN(avg_lfkph,/NAN),    MAX(avg_lfkph,/NAN), $
            MEAN(avg_lfkph,/NAN), STDDEV(avg_lfkph,/NAN)
;      0.050055001       2.4518771      0.47640403      0.55336648
;      0.045581002       2.6929100      0.25225457      0.30519837


; => [Avg. |k| (- sign) from high freq. end of bandpass]
avg_hfkml = avg_hfkm[good_low]
avg_hfkmh = avg_hfkm[good_high]
PRINT,'; ',  MIN(avg_hfkml,/NAN),    MAX(avg_hfkml,/NAN), $
            MEAN(avg_hfkml,/NAN), STDDEV(avg_hfkml,/NAN)
PRINT,'; ',  MIN(avg_hfkmh,/NAN),    MAX(avg_hfkmh,/NAN), $
            MEAN(avg_hfkmh,/NAN), STDDEV(avg_hfkmh,/NAN)
;      0.098517500      0.33259299      0.16680064     0.047718739
;      0.087483004      0.50769448      0.26690567      0.13804112

; => [Avg. |k| (+ sign) from high freq. end of bandpass]
avg_hfkpl = avg_hfkp[good_low]
avg_hfkph = avg_hfkp[good_high]
PRINT,'; ',  MIN(avg_hfkpl,/NAN),    MAX(avg_hfkpl,/NAN), $
            MEAN(avg_hfkpl,/NAN), STDDEV(avg_hfkpl,/NAN)
PRINT,'; ',  MIN(avg_hfkph,/NAN),    MAX(avg_hfkph,/NAN), $
            MEAN(avg_hfkph,/NAN), STDDEV(avg_hfkph,/NAN)
;       0.12034700       2.6122646      0.60633906      0.56555522
;       0.11606050       2.8656504      0.41465812      0.32480239


;----------------------------------------------------
; => ∆f (Hz)
;----------------------------------------------------
;    [|k| (- sign)]
doppf_lml = avg_lfkml*vmagl*COS(thkv_la)/(2d0*!DPI)
doppf_lmh = avg_lfkmh*vmagh*COS(thkv_ha)/(2d0*!DPI)
PRINT,'; ',  MIN(doppf_lml,/NAN),    MAX(doppf_lml,/NAN), $
            MEAN(doppf_lml,/NAN), STDDEV(doppf_lml,/NAN)
PRINT,'; ',  MIN(doppf_lmh,/NAN),    MAX(doppf_lmh,/NAN), $
            MEAN(doppf_lmh,/NAN), STDDEV(doppf_lmh,/NAN)
;       0.10727463       4.8159235       1.8669306      0.71638447
;      0.094337902       12.963894       3.6696167       2.9545156

doppf_hml = avg_hfkml*vmagl*COS(thkv_la)/(2d0*!DPI)
doppf_hmh = avg_hfkmh*vmagh*COS(thkv_ha)/(2d0*!DPI)
PRINT,'; ',  MIN(doppf_hml,/NAN),    MAX(doppf_hml,/NAN), $
            MEAN(doppf_hml,/NAN), STDDEV(doppf_hml,/NAN)
PRINT,'; ',  MIN(doppf_hmh,/NAN),    MAX(doppf_hmh,/NAN), $
            MEAN(doppf_hmh,/NAN), STDDEV(doppf_hmh,/NAN)
;       0.34530089       20.521890       10.670536       5.2437423
;       0.24699639       29.045827       10.576832       6.7155434


;    [|k| (+ sign)]
doppf_lpl = avg_lfkpl*vmagl*COS(thkv_la)/(2d0*!DPI)
doppf_lph = avg_lfkph*vmagh*COS(thkv_ha)/(2d0*!DPI)
PRINT,'; ',  MIN(doppf_lpl,/NAN),    MAX(doppf_lpl,/NAN), $
            MEAN(doppf_lpl,/NAN), STDDEV(doppf_lpl,/NAN)
PRINT,'; ',  MIN(doppf_lph,/NAN),    MAX(doppf_lph,/NAN), $
            MEAN(doppf_lph,/NAN), STDDEV(doppf_lph,/NAN)
;       0.11298623       264.71456       37.796229       52.050112
;      0.098728384       270.51802       14.154858       29.462979

doppf_hpl = avg_hfkpl*vmagl*COS(thkv_la)/(2d0*!DPI)
doppf_hph = avg_hfkph*vmagh*COS(thkv_ha)/(2d0*!DPI)
PRINT,'; ',  MIN(doppf_hpl,/NAN),    MAX(doppf_hpl,/NAN), $
            MEAN(doppf_hpl,/NAN), STDDEV(doppf_hpl,/NAN)
PRINT,'; ',  MIN(doppf_hph,/NAN),    MAX(doppf_hph,/NAN), $
            MEAN(doppf_hph,/NAN), STDDEV(doppf_hph,/NAN)
;       0.35101353       282.03065       46.007284       54.819312
;       0.25138688       287.87078       20.842357       32.088215



;----------------------------------------------------
; => ∆f_max (Hz)
;----------------------------------------------------
;    [|k| (- sign)]
doppf_lml_max = avg_lfkml*vmagl/(2d0*!DPI)
doppf_lmh_max = avg_lfkmh*vmagh/(2d0*!DPI)
PRINT,'; ',  MIN(doppf_lml_max,/NAN),    MAX(doppf_lml_max,/NAN), $
            MEAN(doppf_lml_max,/NAN), STDDEV(doppf_lml_max,/NAN)
PRINT,'; ',  MIN(doppf_lmh_max,/NAN),    MAX(doppf_lmh_max,/NAN), $
            MEAN(doppf_lmh_max,/NAN), STDDEV(doppf_lmh_max,/NAN)
;        1.7679775       10.549889       3.3009211       1.5466592
;        1.5965812       28.357898       10.060293       7.7599154

doppf_hml_max = avg_hfkml*vmagl/(2d0*!DPI)
doppf_hmh_max = avg_hfkmh*vmagh/(2d0*!DPI)
PRINT,'; ',  MIN(doppf_hml_max,/NAN),    MAX(doppf_hml_max,/NAN), $
            MEAN(doppf_hml_max,/NAN), STDDEV(doppf_hml_max,/NAN)
PRINT,'; ',  MIN(doppf_hmh_max,/NAN),    MAX(doppf_hmh_max,/NAN), $
            MEAN(doppf_hmh_max,/NAN), STDDEV(doppf_hmh_max,/NAN)
;        7.6617621       36.790480       16.655142       5.4191945
;        7.4165298       50.125963       25.903303       14.064953

;    [|k| (+ sign)]
doppf_lpl_max = avg_lfkpl*vmagl/(2d0*!DPI)
doppf_lph_max = avg_lfkph*vmagh/(2d0*!DPI)
PRINT,'; ',  MIN(doppf_lpl_max,/NAN),    MAX(doppf_lpl_max,/NAN), $
            MEAN(doppf_lpl_max,/NAN), STDDEV(doppf_lpl_max,/NAN)
PRINT,'; ',  MIN(doppf_lph_max,/NAN),    MAX(doppf_lph_max,/NAN), $
            MEAN(doppf_lph_max,/NAN), STDDEV(doppf_lph_max,/NAN)
;        4.2881446       275.39137       45.795071       54.847656
;        3.1708040       309.46869       24.763153       33.817933

doppf_hpl_max = avg_hfkpl*vmagl/(2d0*!DPI)
doppf_hph_max = avg_hfkph*vmagh/(2d0*!DPI)
PRINT,'; ',  MIN(doppf_hpl_max,/NAN),    MAX(doppf_hpl_max,/NAN), $
            MEAN(doppf_hpl_max,/NAN), STDDEV(doppf_hpl_max,/NAN)
PRINT,'; ',  MIN(doppf_hph_max,/NAN),    MAX(doppf_hph_max,/NAN), $
            MEAN(doppf_hph_max,/NAN), STDDEV(doppf_hph_max,/NAN)
;        10.168795       293.40587       58.669718       55.992376
;        8.7892677       329.31999       40.530616       36.310939

;----------------------------------------------------
; => ∆f_max/f_sc (unitless)
;----------------------------------------------------
;    [|k| (- sign)]
doppff_lml_max = doppf_lml_max/freqll  ; => f_sc,low  for [good_low ]
doppff_hmh_max = doppf_hmh_max/freqhh  ; => f_sc,high for [good_high]
PRINT,'; ',  MIN(doppff_lml_max,/NAN),    MAX(doppff_lml_max,/NAN), $
            MEAN(doppff_lml_max,/NAN), STDDEV(doppff_lml_max,/NAN)
PRINT,'; ',  MIN(doppff_hmh_max,/NAN),    MAX(doppff_hmh_max,/NAN), $
            MEAN(doppff_hmh_max,/NAN), STDDEV(doppff_hmh_max,/NAN)
;       0.20201929       3.0455857      0.81005283      0.50910297
;      0.020918071      0.37236851      0.14843033     0.096799202


;    [|k| (+ sign)]
doppff_lpl_max = doppf_lpl_max/freqll  ; => f_sc,low  for [good_low ]
doppff_hph_max = doppf_hph_max/freqhh  ; => f_sc,high for [good_high]
PRINT,'; ',  MIN(doppff_lpl_max,/NAN),    MAX(doppff_lpl_max,/NAN), $
            MEAN(doppff_lpl_max,/NAN), STDDEV(doppff_lpl_max,/NAN)
PRINT,'; ',  MIN(doppff_hph_max,/NAN),    MAX(doppff_hph_max,/NAN), $
            MEAN(doppff_hph_max,/NAN), STDDEV(doppff_hph_max,/NAN)
;       0.70009047       91.797123       11.074570       15.623713
;      0.027827269       2.1635683      0.22765029      0.22026221



;----------------------------
; => f_sc,low for [good_high]
;----------------------------
doppff_lmh_max = doppf_lmh_max/freqlh
doppff_lph_max = doppf_lph_max/freqlh
PRINT,'; ',  MIN(doppff_lmh_max,/NAN),    MAX(doppff_lmh_max,/NAN), $
            MEAN(doppff_lmh_max,/NAN), STDDEV(doppff_lmh_max,/NAN)
PRINT,'; ',  MIN(doppff_lph_max,/NAN),    MAX(doppff_lph_max,/NAN), $
            MEAN(doppff_lph_max,/NAN), STDDEV(doppff_lph_max,/NAN)
;      0.012575529      0.63470978      0.24713532      0.20501653
;      0.042166037       7.7367172      0.60310774      0.88257507

;----------------------------
; => f_sc,high for [good_low]
;----------------------------
doppff_hml_max = doppf_hml_max/freqhl
doppff_hpl_max = doppf_hpl_max/freqhl
PRINT,'; ',  MIN(doppff_hml_max,/NAN),    MAX(doppff_hml_max,/NAN), $
            MEAN(doppff_hml_max,/NAN), STDDEV(doppff_hml_max,/NAN)
PRINT,'; ',  MIN(doppff_hpl_max,/NAN),    MAX(doppff_hpl_max,/NAN), $
            MEAN(doppff_hpl_max,/NAN), STDDEV(doppff_hpl_max,/NAN)
;       0.33138152       1.2263493      0.57794476      0.17614734
;       0.43788887       9.7801956       2.0546482       1.9201133

;-----------------------------------------------------------------------------------------
; => Range of wave normal angles for Event #:  10488L
;       SCET:  1998-08-26/06:40:26.120 UT
;-----------------------------------------------------------------------------------------
f        = !VALUES.F_NAN
d        = !VALUES.D_NAN
c        = 2.99792458d8      ; -Speed of light in vacuum (m/s)
kB       = 1.380658d-23      ; -Boltzmann Constant (J/K)
K_eV     = 1.160474d4        ; -Conversion = degree Kelvin/eV
epo      = 8.854187817d-12   ; -Permittivity of free space (F/m)
muo      = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)
me       = 9.1093897d-31     ; -Electron mass (kg)
mp       = 1.6726231d-27     ; -Proton mass (kg)
qq       = 1.60217733d-19    ; => Fundamental charge (C)
c        = 2.99792458d8      ; -Speed of light in vacuum (m/s)
wcefac   = qq*1d-9/me
wcpfac   = qq*1d-9/mp
wpefac   = SQRT(qq^2*1d6/(epo*me))

;date     = '121097'
magfs0   = test0.MAGF_ST
magfe0   = test0.MAGF_EN
bmags0   = SQRT(TOTAL(magfs0^2,2L,/NAN))
bmage0   = SQRT(TOTAL(magfe0^2,2L,/NAN))
denss0   = test0.NE_SE[*,0]
dense0   = test0.NE_SE[*,1]
rhoes0   = test0.RHO_VTCE_SE[*,0]
rhoee0   = test0.RHO_VTCE_SE[*,1]
vsws0    = test0.VSW_ST
vswe0    = test0.VSW_EN
;date     = '082698'
magfs1   = test1.MAGF_ST
magfe1   = test1.MAGF_EN
bmags1   = SQRT(TOTAL(magfs1^2,2L,/NAN))
bmage1   = SQRT(TOTAL(magfe1^2,2L,/NAN))
denss1   = test1.NE_SE[*,0]
dense1   = test1.NE_SE[*,1]
rhoes1   = test1.RHO_VTCE_SE[*,0]
rhoee1   = test1.RHO_VTCE_SE[*,1]
vsws1    = test1.VSW_ST
vswe1    = test1.VSW_EN
;date     = '092498'
magfs2   = test2.MAGF_ST
magfe2   = test2.MAGF_EN
bmags2   = SQRT(TOTAL(magfs2^2,2L,/NAN))
bmage2   = SQRT(TOTAL(magfe2^2,2L,/NAN))
denss2   = test2.NE_SE[*,0]
dense2   = test2.NE_SE[*,1]
rhoes2   = test2.RHO_VTCE_SE[*,0]
rhoee2   = test2.RHO_VTCE_SE[*,1]
vsws2    = test2.VSW_ST
vswe2    = test2.VSW_EN
;date     = '021100'
magfs3   = test3.MAGF_ST
magfe3   = test3.MAGF_EN
bmags3   = SQRT(TOTAL(magfs3^2,2L,/NAN))
bmage3   = SQRT(TOTAL(magfe3^2,2L,/NAN))
denss3   = test3.NE_SE[*,0]
dense3   = test3.NE_SE[*,1]
rhoes3   = test3.RHO_VTCE_SE[*,0]
rhoee3   = test3.RHO_VTCE_SE[*,1]
vsws3    = test3.VSW_ST
vswe3    = test3.VSW_EN


vsws     = [vsws0,vsws1,vsws2,vsws3]              ; => PL solar wind velocity (km/s) [GSE]
vswe     = [vswe0,vswe1,vswe2,vswe3]              ; => PL solar wind velocity (km/s) [GSE]
;vmags    = SQRT(TOTAL(vsws^2,2L,/NAN))
;vmage    = SQRT(TOTAL(vswe^2,2L,/NAN))
rhoes    = [rhoes0,rhoes1,rhoes2,rhoes3]          ; => Electron thermal gyroradius (km)
rhoee    = [rhoee0,rhoee1,rhoee2,rhoee3]          ; => Electron thermal gyroradius (km)
;denss    = [denss0,denss1,denss2,denss3]          ; => Electron density [cm^(-3)] from TNR
;dense    = [dense0,dense1,dense2,dense3]          ; => Electron density [cm^(-3)] from TNR
;bmags    = [bmags0,bmags1,bmags2,bmags3]          ; => Magnitude of the B-field (nT)
;bmage    = [bmage0,bmage1,bmage2,bmage3]          ; => Magnitude of the B-field (nT)
;wce_s    = wcefac[0]*bmags
;wce_e    = wcefac[0]*bmage
;wcp_s    = wcpfac[0]*bmags
;wcp_e    = wcpfac[0]*bmage
;wlh_s    = SQRT(wce_s*wcp_s)
;wlh_e    = SQRT(wce_e*wcp_e)
;wpe_s    = wpefac[0]*SQRT(denss)
;wpe_e    = wpefac[0]*SQRT(dense)
; => Use values from Table 2 in paper
bmags    = 17.7d0
bmage    = 20.1d0
denss    = 14.2d0
dense    = 22.0d0
vmags    = 560d0
vmage    = 650d0


wce_se   = wcefac[0]*[bmags[0],bmage[0]]
wcp_se   = wcpfac[0]*[bmags[0],bmage[0]]
wlh_se   = SQRT(wce_se*wcp_se)
wpe_se   = wpefac[0]*SQRT([denss[0],dense[0]])

good_0   = array_where(evns,evn1[0],/N_UNIQ)

thkb_av0 = thkb_av[good_0[*,0]]
thkv_av0 = thkv_av[good_0[*,0]]
freql_0  = freql[good_0[*,0]]                ; => (Hz) low  freq. end of bandpass
freqh_0  = freqh[good_0[*,0]]                ; => (Hz) high freq. end of bandpass
rhoes_0  = rhoes[good_0[*,0]]                ; => Electron thermal gyroradius (km)
rhoee_0  = rhoee[good_0[*,0]]                ; => Electron thermal gyroradius (km)
;wces_0   = wce_s[good_0[*,0]]                ; => Electron cyclotron frequency (rad/s)
;wcee_0   = wce_e[good_0[*,0]]                ; => Electron cyclotron frequency (rad/s)
;wcps_0   = wcp_s[good_0[*,0]]                ; => Proton   cyclotron frequency (rad/s)
;wcpe_0   = wcp_e[good_0[*,0]]                ; => Proton   cyclotron frequency (rad/s)
;wlhs_0   = wlh_s[good_0[*,0]]                ; => ES lower hybrid resonance frequency (rad/s)
;wlhe_0   = wlh_e[good_0[*,0]]                ; => ES lower hybrid resonance frequency (rad/s)
;wpes_0   = wpe_s[good_0[*,0]]                ; => Electron plasma    frequency (rad/s)
;wpee_0   = wpe_e[good_0[*,0]]                ; => Electron plasma    frequency (rad/s)
;denss_0  = denss[good_0[*,0]]                ; => Electron density [cm^(-3)] from TNR
;dense_0  = dense[good_0[*,0]]                ; => Electron density [cm^(-3)] from TNR
;bmags_0  = bmags[good_0[*,0]]                ; => Magnitude of the B-field (nT)
;bmage_0  = bmage[good_0[*,0]]                ; => Magnitude of the B-field (nT)
;vmags_0  = vmags[good_0[*,0]]
;vmage_0  = vmage[good_0[*,0]]
;einers_0 = (c/wpes_0)*1d-3
;einere_0 = (c/wpee_0)*1d-3
PRINT,'; ',  MIN([wces_0,wcee_0],/NAN)/(2d0*!DPI), MAX([wces_0,wcee_0],/NAN)/(2d0*!DPI)
;        483.69043       520.47392
PRINT,'; ',  MIN([wcps_0,wcpe_0],/NAN)/(2d0*!DPI), MAX([wcps_0,wcpe_0],/NAN)/(2d0*!DPI)
;       0.26342603      0.28345894
PRINT,'; ',  MIN([wlhs_0,wlhe_0],/NAN)/(2d0*!DPI), MAX([wlhs_0,wlhe_0],/NAN)/(2d0*!DPI)
;        11.287898       12.146316
PRINT,'; ',  MIN([denss_0,dense_0],/NAN), MAX([denss_0,dense_0],/NAN)
;       14.1470      17.0010
PRINT,'; ',  MIN([bmags_0,bmage_0],/NAN), MAX([bmags_0,bmage_0],/NAN)
;       17.2793      18.5933
PRINT,'; ',  MIN([vmags_0,vmage_0],/NAN), MAX([vmags_0,vmage_0],/NAN)
;       559.370      613.132
PRINT,'; ',  MIN([einers_0,einere_0],/NAN), MAX([einers_0,einere_0],/NAN)
;        1.2888190       1.4128529
PRINT,'; ',  MIN([rhoes_0,rhoee_0],/NAN), MAX([rhoes_0,rhoee_0],/NAN)
;       1.33567      1.40689

einer_se = (c/wpe_se)*1d-3
valf_es0 = ((bmags[0]*1d-9)/SQRT(muo*me*1d6*denss[0]))*1d-3  ; => Electron Alfven speed (km/s)
valf_ee0 = ((bmage[0]*1d-9)/SQRT(muo*me*1d6*dense[0]))*1d-3  ; => Electron Alfven speed (km/s)

PRINT,'; ',  MIN(thkb_av0,/NAN),    MAX(thkb_av0,/NAN), $
            MEAN(thkb_av0,/NAN), STDDEV(thkb_av0,/NAN)
PRINT,'; ',  MIN(thkv_av0,/NAN),    MAX(thkv_av0,/NAN), $
            MEAN(thkv_av0,/NAN), STDDEV(thkv_av0,/NAN)
;        11.214500       85.926498       53.022167       29.278174
;        12.462502       88.702000       41.977084       27.973099

PRINT,'; ',  MEAN(thkb_av0,/NAN) - STDDEV(thkb_av0,/NAN), MEAN(thkb_av0,/NAN) + STDDEV(thkb_av0,/NAN)
PRINT,'; ',  MEAN(thkv_av0,/NAN) - STDDEV(thkv_av0,/NAN), MEAN(thkv_av0,/NAN) + STDDEV(thkv_av0,/NAN)
; =>  <ø_kB> +/- ∑  [deg]
;        23.743992       82.300341
; =>  <ø_kV> +/- ∑  [deg]
;        14.003985       69.950182

thkb_lowhigh = [MEAN(thkb_av0,/NAN) - STDDEV(thkb_av0,/NAN), MEAN(thkb_av0,/NAN) + STDDEV(thkb_av0,/NAN)]*!DPI/18d1
PRINT,'; ',  TAN(thkb_lowhigh)
PRINT,'; ',  TAN(thkb_lowhigh)*SQRT(me/mp)
; => k_perp/k_para
;       0.43988539       7.3964913
;      0.010265619      0.17261214


PRINT,'; ',  MIN(freql_0,/NAN), MAX(freql_0,/NAN)
;       4.00000      150.000
PRINT,'; ',  MIN(freqh_0,/NAN), MAX(freqh_0,/NAN)
;       20.0000      400.000
PRINT,'; ',  MIN([freql_0,freqh_0],/NAN), MAX([freql_0,freqh_0],/NAN)
;       4.00000      400.000

cthkvkba     = ABS(COS(thkv_av0*!DPI/18d1)/COS(thkb_av0*!DPI/18d1))
; => Determine factors in Eq. 4 of Coroniti et al., [1982]
cfac_00s     = vmags[0]*cthkvkba/(2d0*valf_es0[0])
cfac_00e     = vmage[0]*cthkvkba/(2d0*valf_ee0[0])

cfac_01ls    = (2d0*!DPI*freql_0)/(wce_se[0]*ABS(COS(thkb_av0*!DPI/18d1)))
cfac_01hs    = (2d0*!DPI*freqh_0)/(wce_se[0]*ABS(COS(thkb_av0*!DPI/18d1)))
cfac_01le    = (2d0*!DPI*freql_0)/(wce_se[1]*ABS(COS(thkb_av0*!DPI/18d1)))
cfac_01he    = (2d0*!DPI*freqh_0)/(wce_se[1]*ABS(COS(thkb_av0*!DPI/18d1)))

; => - sign at start
kminus_st_lf = (-1d0*cfac_00s + SQRT(cfac_00s^2 + cfac_01ls))/einer_se[0]
kminus_st_hf = (-1d0*cfac_00s + SQRT(cfac_00s^2 + cfac_01hs))/einer_se[0]
; => - sign at end
kminus_en_lf = (-1d0*cfac_00e + SQRT(cfac_00e^2 + cfac_01le))/einer_se[1]
kminus_en_hf = (-1d0*cfac_00e + SQRT(cfac_00e^2 + cfac_01he))/einer_se[1]

PRINT,'; ',  MIN([kminus_st_lf,kminus_st_hf],/NAN), MAX([kminus_st_lf,kminus_st_hf],/NAN)
PRINT,'; ',  MIN([kminus_en_lf,kminus_en_hf],/NAN), MAX([kminus_en_lf,kminus_en_hf],/NAN)
;      0.042546321       1.2154205
;      0.040661150       1.3481443

; => + sign at start
kpluss_st_lf = ( 1d0*cfac_00s + SQRT(cfac_00s^2 + cfac_01ls))/einer_se[0]
kpluss_st_hf = ( 1d0*cfac_00s + SQRT(cfac_00s^2 + cfac_01hs))/einer_se[0]
; => + sign at end
kpluss_en_lf = ( 1d0*cfac_00e + SQRT(cfac_00e^2 + cfac_01le))/einer_se[1]
kpluss_en_hf = ( 1d0*cfac_00e + SQRT(cfac_00e^2 + cfac_01he))/einer_se[1]

PRINT,'; ',  MIN([kpluss_st_lf,kpluss_st_hf],/NAN), MAX([kpluss_st_lf,kpluss_st_hf],/NAN)
PRINT,'; ',  MIN([kpluss_en_lf,kpluss_en_hf],/NAN), MAX([kpluss_en_lf,kpluss_en_hf],/NAN)
;       0.17123162       1.6306359
;       0.24444314       2.1855482


kminus = [0.040661150d0,1.3481443d0]
kpluss = [0.17123162d0,2.1855482d0]
tan_th = TAN(thkb_lowhigh)
one_th = 1d0 + tan_th^2

kpara  = DBLARR(2,2,2)
kperp  = DBLARR(2,2,2)
for i=0L, 1L do begin $
  for j=0L, 1L do begin $
    kpara[i,j,0] = SQRT(kminus[j]^2/one_th[i]) & $
    kpara[i,j,1] = SQRT(kpluss[j]^2/one_th[i]) & $
    kperp[i,j,0] = SQRT(kminus[j]^2 - kpara[i,j,0]^2) & $
    kperp[i,j,1] = SQRT(kpluss[j]^2 - kpara[i,j,1]^2)

; => k_para
PRINT,'; ',  MIN(kpara[*,*,0],/NAN), MAX(kpara[*,*,0],/NAN)
PRINT,'; ',  MIN(kpara[*,*,1],/NAN), MAX(kpara[*,*,1],/NAN)
;     0.0054477924       1.2340289
;      0.022941661       2.0005496

PRINT, kpara
;     - sign
;     0.037219334    0.0054477924   ; => Low  |k|
;       1.2340289      0.18062475   ; => High |k|
;
;     + sign
;      0.15673750     0.022941661   ; => Low  |k|
;       2.0005496      0.29282037   ; => High |k|
;
;------------------------------------
;        23 deg           82 deg


; => k_perp
PRINT,'; ',  MIN(kperp[*,*,0],/NAN), MAX(kperp[*,*,0],/NAN)
PRINT,'; ',  MIN(kperp[*,*,1],/NAN), MAX(kperp[*,*,1],/NAN)
;      0.016372241       1.3359894
;      0.068946534       2.1658433

PRINT, kperp
;     - sign
;     0.016372241     0.040294549   ; => Low  |k|
;      0.54283127       1.3359894   ; => High |k|
;
;     + sign
;     0.068946534      0.16968780   ; => Low  |k|
;      0.88001255       2.1658433   ; => High |k|
;
;------------------------------------
;        23 deg           82 deg

;PRINT,'; ',  MIN([wlhs_0,wlhe_0],/NAN)/MIN(kpara[1,*,*],/NAN), $
;             MIN([wlhs_0,wlhe_0],/NAN)/MAX(kpara[1,*,*],/NAN), $
;             MAX([wlhs_0,wlhe_0],/NAN)/MIN(kpara[1,*,*],/NAN), $
;             MAX([wlhs_0,wlhe_0],/NAN)/MAX(kpara[1,*,*],/NAN)

PRINT,'; ',  MIN(wlh_se,/NAN)/MIN(kpara[1,*,*],/NAN), $
             MIN(wlh_se,/NAN)/MAX(kpara[1,*,*],/NAN), $
             MAX(wlh_se,/NAN)/MIN(kpara[1,*,*],/NAN), $
             MAX(wlh_se,/NAN)/MAX(kpara[1,*,*],/NAN)
;        13335.817       248.10692       15144.063       281.74854

PRINT,'; ',  MIN(wlh_se,/NAN)/MIN(kperp[1,*,*],/NAN), $
             MIN(wlh_se,/NAN)/MAX(kperp[1,*,*],/NAN), $
             MAX(wlh_se,/NAN)/MIN(kperp[1,*,*],/NAN), $
             MAX(wlh_se,/NAN)/MAX(kperp[1,*,*],/NAN)
;        1802.9923       33.543867       2047.4658       38.092188

