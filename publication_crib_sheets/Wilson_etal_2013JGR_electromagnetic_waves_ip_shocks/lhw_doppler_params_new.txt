;-----------------------------------------------------------------------------------------
; => Plot results
;-----------------------------------------------------------------------------------------
; => histograms
wavet       = 'all'
startendavg = 'avg'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'all'
startendavg = 'start'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'all'
startendavg = 'end'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'pre'
startendavg = 'avg'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'pre'
startendavg = 'start'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'pre'
startendavg = 'end'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'mix'
startendavg = 'avg'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'mix'
startendavg = 'start'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'mix'
startendavg = 'end'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'lhw'
startendavg = 'avg'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'lhw'
startendavg = 'start'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'lhw'
startendavg = 'end'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'whi'
startendavg = 'avg'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'whi'
startendavg = 'start'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'whi'
startendavg = 'end'
temp_lhw_doppler_params_histograms,WAVET=wavet,START_END_AVG=startendavg


; => Plots
wavet       = 'all'
startendavg = 'avg'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'all'
startendavg = 'start'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'all'
startendavg = 'end'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'pre'
startendavg = 'avg'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'pre'
startendavg = 'start'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'pre'
startendavg = 'end'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'mix'
startendavg = 'avg'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'mix'
startendavg = 'start'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'mix'
startendavg = 'end'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'lhw'
startendavg = 'avg'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'lhw'
startendavg = 'start'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'lhw'
startendavg = 'end'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'whi'
startendavg = 'avg'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'whi'
startendavg = 'start'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

wavet       = 'whi'
startendavg = 'end'
temp_lhw_doppler_params_plots_2,WAVET=wavet,START_END_AVG=startendavg

;-----------------------------------------------------------------------------------------
; => Constants
;-----------------------------------------------------------------------------------------
f        = !VALUES.F_NAN
d        = !VALUES.D_NAN
c        = 2.99792458d8      ; -Speed of light in vacuum (m/s)
kB       = 1.380658d-23      ; -Boltzmann Constant (J/K)
K_eV     = 1.160474d4        ; -Conversion = degree Kelvin/eV
epo      = 8.854187817d-12   ; -Permittivity of free space (F/m)
muo      = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)
me       = 9.1093897d-31     ; -Electron mass (kg)
mp       = 1.6726231d-27     ; -Proton mass (kg)
qq       = 1.60217733d-19    ; => Fundamental charge (C)

date     = '121097'
tramp    = '1997-12-10/04:33:14.664'
vshn     = 391.2                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test0    = tdss_lhw_stats_read(DATE=date)
evn0     = test0.EVENT_N
scet0    = test0.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t0   = time_double(scet0) - time_double(tramp)
dist_0   = del_t0*vshn[0]
avg_lfk0 = (test0.K_ST_LOWF_MP + test0.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk0 = (test0.K_ST_highF_MP + test0.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql0   = test0.FREQ_LOW_HIGH[*,0]
freqh0   = test0.FREQ_LOW_HIGH[*,1]
pkamp0   = test0.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp0 = test0.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
thkbs0   = test0.THETA_KB[*,0]       ; => Theta_kB at start [deg]
thkbe0   = test0.THETA_KB[*,1]       ; => Theta_kB at end   [deg]
thkvs0   = test0.THETA_KV[*,0]       ; => Theta_kV at start [deg]
thkve0   = test0.THETA_KV[*,1]       ; => Theta_kV at end   [deg]
wce0     = (test0.WCE_SE[*,0] + test0.WCE_SE[*,1])/2d0
wpe0     = (test0.WPE_SE[*,0] + test0.WPE_SE[*,1])/2d0
wlh0     = (test0.WLH_SE[*,0] + test0.WLH_SE[*,1])/2d0
vte0     = (test0.VTE_SE[*,0] + test0.VTE_SE[*,1])/2d0
rhoe0    = (test0.RHO_VTCE_SE[*,0] + test0.RHO_VTCE_SE[*,1])/2d0
vsw0     = (test0.VSW_ST + test0.VSW_EN)/2d0
vdr0     = (test0.VDRIFT_ST + test0.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf0    = (test0.MAGF_ST + test0.MAGF_EN)/2d0
dens0    = (test0.NE_SE[*,0] + test0.NE_SE[*,1])/2d0
bmag0    = SQRT(TOTAL(magf0^2,2L,/NAN))
betapa0  = (test0.BETA_PARCE_SE[*,0] + test0.BETA_PARCE_SE[*,1])/2d0
teavg0   = (test0.TE_AVG_SE[*,0] + test0.TE_AVG_SE[*,1])/2d0
tiavg0   = (test0.TI_AVG_SE[*,0] + test0.TI_AVG_SE[*,1])/2d0
vti0     = SQRT(2d0*tiavg0*K_eV*kB/mp)
tecavg0  = (test0.TEC_SE[*,0] + test0.TEC_SE[*,1])/2d0
tehavg0  = (test0.TEH_SE[*,0] + test0.TEH_SE[*,1])/2d0
tparc0   = (test0.TPAR_EC_SE[*,0] + test0.TPAR_EC_SE[*,1])/2d0
tperc0   = (test0.TPER_EC_SE[*,0] + test0.TPER_EC_SE[*,1])/2d0
tparh0   = (test0.TPAR_EH_SE[*,0] + test0.TPAR_EH_SE[*,1])/2d0
tperh0   = (test0.TPER_EH_SE[*,0] + test0.TPER_EH_SE[*,1])/2d0
qmag0    = (test0.QMAG_SE[*,0] + test0.QMAG_SE[*,1])/2d0
kvec0    = test0.KVEC
gnorm80  = [-0.903, 0.168,-0.397]   ; => Using RH08 from JCK's site
gnorm90  = [-0.971, 0.094,-0.218]   ; => Using RH08 from JCK's site
thkn80   = ACOS(my_dot_prod(kvec0,gnorm80,/NOM))*18d1/!DPI
thkn90   = ACOS(my_dot_prod(kvec0,gnorm90,/NOM))*18d1/!DPI
thbn80   = REPLICATE(70.9,N_ELEMENTS(evn0))
thbn90   = REPLICATE(71.9,N_ELEMENTS(evn0))

date     = '082698'
tramp    = '1998-08-26/06:40:24.972'
vshn     = 687.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test1    = tdss_lhw_stats_read(DATE=date)
evn1     = test1.EVENT_N
scet1    = test1.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t1   = time_double(scet1) - time_double(tramp)
dist_1   = del_t1*vshn[0]
avg_lfk1 = (test1.K_ST_LOWF_MP + test1.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk1 = (test1.K_ST_highF_MP + test1.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql1   = test1.FREQ_LOW_HIGH[*,0]
freqh1   = test1.FREQ_LOW_HIGH[*,1]
thkbs1   = test1.THETA_KB[*,0]
thkbe1   = test1.THETA_KB[*,1]
thkvs1   = test1.THETA_KV[*,0]
thkve1   = test1.THETA_KV[*,1]
pkamp1   = test1.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp1 = test1.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce1     = (test1.WCE_SE[*,0] + test1.WCE_SE[*,1])/2d0
wpe1     = (test1.WPE_SE[*,0] + test1.WPE_SE[*,1])/2d0
wlh1     = (test1.WLH_SE[*,0] + test1.WLH_SE[*,1])/2d0
vte1     = (test1.VTE_SE[*,0] + test1.VTE_SE[*,1])/2d0
rhoe1    = (test1.RHO_VTCE_SE[*,0] + test1.RHO_VTCE_SE[*,1])/2d0
vsw1     = (test1.VSW_ST + test1.VSW_EN)/2d0
vdr1     = (test1.VDRIFT_ST + test1.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf1    = (test1.MAGF_ST + test1.MAGF_EN)/2d0
dens1    = (test1.NE_SE[*,0] + test1.NE_SE[*,1])/2d0
bmag1    = SQRT(TOTAL(magf1^2,2L,/NAN))
betapa1  = (test1.BETA_PARCE_SE[*,0] + test1.BETA_PARCE_SE[*,1])/2d0
teavg1   = (test1.TE_AVG_SE[*,0] + test1.TE_AVG_SE[*,1])/2d0
tiavg1   = (test1.TI_AVG_SE[*,0] + test1.TI_AVG_SE[*,1])/2d0
vti1     = SQRT(2d0*tiavg1*K_eV*kB/mp)
tecavg1  = (test1.TEC_SE[*,0] + test1.TEC_SE[*,1])/2d0
tehavg1  = (test1.TEH_SE[*,0] + test1.TEH_SE[*,1])/2d0
tparc1   = (test1.TPAR_EC_SE[*,0] + test1.TPAR_EC_SE[*,1])/2d0
tperc1   = (test1.TPER_EC_SE[*,0] + test1.TPER_EC_SE[*,1])/2d0
tparh1   = (test1.TPAR_EH_SE[*,0] + test1.TPAR_EH_SE[*,1])/2d0
tperh1   = (test1.TPER_EH_SE[*,0] + test1.TPER_EH_SE[*,1])/2d0
qmag1    = (test1.QMAG_SE[*,0] + test1.QMAG_SE[*,1])/2d0
kvec1    = test1.KVEC
gnorm81  = [-0.655,0.040,-0.754]   ; => Using RH08 from JCK's site
gnorm91  = [-0.822,0.138,-0.553]   ; => Using RH09 from JCK's site
thkn81   = ACOS(my_dot_prod(kvec1,gnorm81,/NOM))*18d1/!DPI
thkn91   = ACOS(my_dot_prod(kvec1,gnorm91,/NOM))*18d1/!DPI
thbn81   = REPLICATE(82.2,N_ELEMENTS(evn1))
thbn91   = REPLICATE(78.7,N_ELEMENTS(evn1))

date     = '092498'
tramp    = '1998-09-24/23:20:37.374'
vshn     = 772.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test2    = tdss_lhw_stats_read(DATE=date)
evn2     = test2.EVENT_N
scet2    = test2.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t2   = time_double(scet2) - time_double(tramp)
dist_2   = del_t2*vshn[0]
avg_lfk2 = (test2.K_ST_LOWF_MP + test2.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk2 = (test2.K_ST_highF_MP + test2.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql2   = test2.FREQ_LOW_HIGH[*,0]
freqh2   = test2.FREQ_LOW_HIGH[*,1]
thkbs2   = test2.THETA_KB[*,0]
thkbe2   = test2.THETA_KB[*,1]
thkvs2   = test2.THETA_KV[*,0]
thkve2   = test2.THETA_KV[*,1]
pkamp2   = test2.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp2 = test2.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce2     = (test2.WCE_SE[*,0] + test2.WCE_SE[*,1])/2d0
wpe2     = (test2.WPE_SE[*,0] + test2.WPE_SE[*,1])/2d0
wlh2     = (test2.WLH_SE[*,0] + test2.WLH_SE[*,1])/2d0
vte2     = (test2.VTE_SE[*,0] + test2.VTE_SE[*,1])/2d0
rhoe2    = (test2.RHO_VTCE_SE[*,0] + test2.RHO_VTCE_SE[*,1])/2d0
vsw2     = (test2.VSW_ST + test2.VSW_EN)/2d0
vdr2     = (test2.VDRIFT_ST + test2.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf2    = (test2.MAGF_ST + test2.MAGF_EN)/2d0
dens2    = (test2.NE_SE[*,0] + test2.NE_SE[*,1])/2d0
bmag2    = SQRT(TOTAL(magf2^2,2L,/NAN))
betapa2  = (test2.BETA_PARCE_SE[*,0] + test2.BETA_PARCE_SE[*,1])/2d0
teavg2   = (test2.TE_AVG_SE[*,0] + test2.TE_AVG_SE[*,1])/2d0
tiavg2   = (test2.TI_AVG_SE[*,0] + test2.TI_AVG_SE[*,1])/2d0
vti2     = SQRT(2d0*tiavg2*K_eV*kB/mp)
tecavg2  = (test2.TEC_SE[*,0] + test2.TEC_SE[*,1])/2d0
tehavg2  = (test2.TEH_SE[*,0] + test2.TEH_SE[*,1])/2d0
tparc2   = (test2.TPAR_EC_SE[*,0] + test2.TPAR_EC_SE[*,1])/2d0
tperc2   = (test2.TPER_EC_SE[*,0] + test2.TPER_EC_SE[*,1])/2d0
tparh2   = (test2.TPAR_EH_SE[*,0] + test2.TPAR_EH_SE[*,1])/2d0
tperh2   = (test2.TPER_EH_SE[*,0] + test2.TPER_EH_SE[*,1])/2d0
qmag2    = (test2.QMAG_SE[*,0] + test2.QMAG_SE[*,1])/2d0
kvec2    = test2.KVEC
gnorm82  = [-0.914,-0.220,-0.341]   ; => Using RH08 from JCK's site
gnorm92  = [-0.939,-0.175,-0.296]   ; => Using RH09 from JCK's site
thkn82   = ACOS(my_dot_prod(kvec2,gnorm82,/NOM))*18d1/!DPI
thkn92   = ACOS(my_dot_prod(kvec2,gnorm92,/NOM))*18d1/!DPI
thbn82   = REPLICATE(82.1,N_ELEMENTS(evn2))
thbn92   = REPLICATE(78.6,N_ELEMENTS(evn2))

date     = '021100'
tramp    = '2000-02-11/23:33:55.319'
vshn     = 641.4                   ; => Up/Downstream normal flow speed [SC frame] RHO8
test3    = tdss_lhw_stats_read(DATE=date)
evn3     = test3.EVENT_N
scet3    = test3.SCET_SE[*,0]
; => Calc. dist. from ramp
del_t3   = time_double(scet3) - time_double(tramp)
dist_3   = del_t3*vshn[0]
avg_lfk3 = (test3.K_ST_LOWF_MP + test3.K_EN_LOWF_MP)/2d0      ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk3 = (test3.K_ST_highF_MP + test3.K_EN_highF_MP)/2d0    ; => [Avg. |k| from high freq. end of bandpass]
freql3   = test3.FREQ_LOW_HIGH[*,0]
freqh3   = test3.FREQ_LOW_HIGH[*,1]
thkbs3   = test3.THETA_KB[*,0]
thkbe3   = test3.THETA_KB[*,1]
thkvs3   = test3.THETA_KV[*,0]
thkve3   = test3.THETA_KV[*,1]
pkamp3   = test3.PEAK_AMP            ; => [Unfiltered] Peak-to-Peak wave amplitude (nT) from TDSS
ftpkamp3 = test3.PEAK_AMP_FILT       ; => [Filtered]   Peak wave amplitude (nT) from TDSS
wce3     = (test3.WCE_SE[*,0] + test3.WCE_SE[*,1])/2d0
wpe3     = (test3.WPE_SE[*,0] + test3.WPE_SE[*,1])/2d0
wlh3     = (test3.WLH_SE[*,0] + test3.WLH_SE[*,1])/2d0
vte3     = (test3.VTE_SE[*,0] + test3.VTE_SE[*,1])/2d0
rhoe3    = (test3.RHO_VTCE_SE[*,0] + test3.RHO_VTCE_SE[*,1])/2d0
vsw3     = (test3.VSW_ST + test3.VSW_EN)/2d0
vdr3     = (test3.VDRIFT_ST + test3.VDRIFT_EN)/2d0   ; => (Vsw - Ve) (km/s) [SC-Frame]
magf3    = (test3.MAGF_ST + test3.MAGF_EN)/2d0
dens3    = (test3.NE_SE[*,0] + test3.NE_SE[*,1])/2d0
bmag3    = SQRT(TOTAL(magf3^2,2L,/NAN))
betapa3  = (test3.BETA_PARCE_SE[*,0] + test3.BETA_PARCE_SE[*,1])/2d0
teavg3   = (test3.TE_AVG_SE[*,0] + test3.TE_AVG_SE[*,1])/2d0
tiavg3   = (test3.TI_AVG_SE[*,0] + test3.TI_AVG_SE[*,1])/2d0
vti3     = SQRT(2d0*tiavg3*K_eV*kB/mp)
tecavg3  = (test3.TEC_SE[*,0] + test3.TEC_SE[*,1])/2d0
tehavg3  = (test3.TEH_SE[*,0] + test3.TEH_SE[*,1])/2d0
tparc3   = (test3.TPAR_EC_SE[*,0] + test3.TPAR_EC_SE[*,1])/2d0
tperc3   = (test3.TPER_EC_SE[*,0] + test3.TPER_EC_SE[*,1])/2d0
tparh3   = (test3.TPAR_EH_SE[*,0] + test3.TPAR_EH_SE[*,1])/2d0
tperh3   = (test3.TPER_EH_SE[*,0] + test3.TPER_EH_SE[*,1])/2d0
qmag3    = (test3.QMAG_SE[*,0] + test3.QMAG_SE[*,1])/2d0
kvec3    = test3.KVEC
gnorm83  = [-0.865,-0.452,0.218]   ; => Using RH08 from JCK's site
gnorm93  = [-0.930,-0.367,-0.028]   ; => Using RH09 from JCK's site
thkn83   = ACOS(my_dot_prod(kvec3,gnorm83,/NOM))*18d1/!DPI
thkn93   = ACOS(my_dot_prod(kvec3,gnorm93,/NOM))*18d1/!DPI
thbn83   = REPLICATE(86.5,N_ELEMENTS(evn3))
thbn93   = REPLICATE(89.9,N_ELEMENTS(evn3))
;-----------------------------------------------------------------------------------------
; => Combine terms
;-----------------------------------------------------------------------------------------
evns     = [evn0,evn1,evn2,evn3]
n_all    = N_ELEMENTS(evns)
scets    = [scet0,scet1,scet2,scet3]
scete    = [test0.SCET_SE[*,1],test1.SCET_SE[*,1],test2.SCET_SE[*,1],test3.SCET_SE[*,1]]
kvecs    = [kvec0,kvec1,kvec2,kvec3]
kvecx    = [test0.KVEC[*,0],test1.KVEC[*,0],test2.KVEC[*,0],test3.KVEC[*,0]]
kvecy    = [test0.KVEC[*,1],test1.KVEC[*,1],test2.KVEC[*,1],test3.KVEC[*,1]]
kvecz    = [test0.KVEC[*,2],test1.KVEC[*,2],test2.KVEC[*,2],test3.KVEC[*,2]]
pkamps   = [pkamp0,pkamp1,pkamp2,pkamp3]              ; => Peak-to-Peak amplitudes
filtamp  = [ftpkamp0,ftpkamp1,ftpkamp2,ftpkamp3]*2d0  ; => Filtered amplitudes [change to Peak-to-Peak]
dist_r   = [dist_0,dist_1,dist_2,dist_3]              ; => normal distance from shock ramp (km)

thbn8    = [thbn80,thbn81,thbn82,thbn83]          ; => Theta_Bn (deg) [RH08 JCK's]
thbn9    = [thbn90,thbn91,thbn92,thbn93]          ; => Theta_Bn (deg) [RH09 JCK's]
thkn8    = [thkn80,thkn81,thkn82,thkn83]          ; => Theta_kn (deg) [RH08 JCK's]
thkn9    = [thkn90,thkn91,thkn92,thkn93]          ; => Theta_kn (deg) [RH09 JCK's]
thkbs    = [thkbs0,thkbs1,thkbs2,thkbs3]          ; => Theta_kB (deg) [at start of TDSS]
thkvs    = [thkvs0,thkvs1,thkvs2,thkvs3]          ; => Theta_kV (deg) [at start of TDSS]
thkbe    = [thkbe0,thkbe1,thkbe2,thkbe3]          ; => Theta_kB (deg) [at end   of TDSS]
thkve    = [thkve0,thkve1,thkve2,thkve3]          ; => Theta_kV (deg) [at end   of TDSS]
vsw      = [vsw0,vsw1,vsw2,vsw3]                  ; => PL solar wind velocity (km/s) [GSE]
vmag     = SQRT(TOTAL(vsw^2,2L,/NAN))
vdrft    = [vdr0,vdr1,vdr2,vdr3]                  ; => (Vsw - Ve) (km/s) [SC-Frame]
vdrmg    = SQRT(TOTAL(vdrft^2,2L,/NAN))
freql    = [freql0,freql1,freql2,freql3]          ; => (Hz) low  freq. end of bandpass
freqh    = [freqh0,freqh1,freqh2,freqh3]          ; => (Hz) high freq. end of bandpass
wce      = [wce0,wce1,wce2,wce3]                  ; => Electron cyclotron frequency (rad/s)
wcp      = wce*me/mp                              ; => Proton   cyclotron frequency (rad/s)
wpe      = [wpe0,wpe1,wpe2,wpe3]                  ; => Electron plasma    frequency (rad/s)
wlh      = [wlh0,wlh1,wlh2,wlh3]                  ; => ES lower hybrid resonance frequency (rad/s)
vte      = [vte0,vte1,vte2,vte3]                  ; => Electron thermal speed (km/s)
vti      = [vti0,vti1,vti2,vti3]                  ; => Proton thermal speed (km/s)
rhoe     = [rhoe0,rhoe1,rhoe2,rhoe3]              ; => Electron thermal gyroradius (km)
rhop     = rhoe*SQRT(mp/me)                       ; => Proton thermal gyroradius (km)
avg_lfk  = [avg_lfk0,avg_lfk1,avg_lfk2,avg_lfk3]  ; => [Avg. |k| from low  freq. end of bandpass]
avg_hfk  = [avg_hfk0,avg_hfk1,avg_hfk2,avg_hfk3]  ; => [Avg. |k| from high freq. end of bandpass]
dens     = [dens0,dens1,dens2,dens3]              ; => Electron density [cm^(-3)] from TNR
magf     = [magf0,magf1,magf2,magf3]
bmag     = [bmag0,bmag1,bmag2,bmag3]              ; => Magnitude of the B-field (nT)

beta_pac = [betapa0,betapa1,betapa2,betapa3]      ; => core para. electron beta
teavg    = [teavg0,teavg1,teavg2,teavg3]          ; => EL electron avg. temp (eV)
tiavg    = [tiavg0,tiavg1,tiavg2,tiavg3]          ; => PL ion avg. temp (eV)
tecavg   = [tecavg0,tecavg1,tecavg2,tecavg3]      ; => core avg.  temp (eV)
tehavg   = [tehavg0,tehavg1,tehavg2,tehavg3]      ; => halo avg.  temp (eV)
tparc    = [tparc0,tparc1,tparc2,tparc3]          ; => core para. temp (eV)
tperc    = [tperc0,tperc1,tperc2,tperc3]          ; => core perp. temp (eV)
tparh    = [tparh0,tparh1,tparh2,tparh3]          ; => halo para. temp (eV)
tperh    = [tperh0,tperh1,tperh2,tperh3]          ; => halo perp. temp (eV)
qmag     = [qmag0,qmag1,qmag2,qmag3]              ; => heat flux magnitude [eV km/s cm^(-3)]

; => Calc. temperature ratios
te_tiav  = teavg/tiavg
tanis_c  = tperc/tparc
tanis_h  = tperh/tparh
thc_par  = tparh/tparc
thc_per  = tperh/tperc
tehc_avg = tehavg/tecavg
; => Normalize the wave number by the electron inertial length
kcwpelfm = avg_lfk[*,0]*c*1d-3/wpe
kcwpelfp = avg_lfk[*,1]*c*1d-3/wpe
kcwpehfm = avg_hfk[*,0]*c*1d-3/wpe
kcwpehfp = avg_hfk[*,1]*c*1d-3/wpe

PRINT,';  ',  MIN(kcwpelfm,/NAN),    MAX(kcwpelfm,/NAN), $
             MEAN(kcwpelfm,/NAN), STDDEV(kcwpelfm,/NAN)
;       0.019315006      0.33633576      0.10907426     0.096031347
PRINT,';  ',  MIN(kcwpelfp,/NAN),    MAX(kcwpelfp,/NAN), $
             MEAN(kcwpelfp,/NAN), STDDEV(kcwpelfp,/NAN)
;       0.054050483       4.0111910      0.36799450      0.49964598
PRINT,';  ',  MIN(kcwpehfm,/NAN),    MAX(kcwpehfm,/NAN), $
             MEAN(kcwpehfm,/NAN), STDDEV(kcwpehfm,/NAN)
;        0.10420530      0.65612310      0.30273660      0.16844181
PRINT,';  ',  MIN(kcwpehfp,/NAN),    MAX(kcwpehfp,/NAN), $
             MEAN(kcwpehfp,/NAN), STDDEV(kcwpehfp,/NAN)
;        0.13629427       4.2756883      0.56094612      0.51783990

; => Normalize the wave number by the electron thermal gyroradius
krhoelfm = avg_lfk[*,0]*rhoe
krhoelfp = avg_lfk[*,1]*rhoe
krhoehfm = avg_hfk[*,0]*rhoe
krhoehfp = avg_hfk[*,1]*rhoe

PRINT,';  ',  MIN(krhoelfm,/NAN),    MAX(krhoelfm,/NAN), $
             MEAN(krhoelfm,/NAN), STDDEV(krhoelfm,/NAN)
;       0.011476048      0.49423372      0.10406571     0.091776650
PRINT,';  ',  MIN(krhoelfp,/NAN),    MAX(krhoelfp,/NAN), $
             MEAN(krhoelfp,/NAN), STDDEV(krhoelfp,/NAN)
;       0.026891861       4.6963204      0.36256134      0.53772461
PRINT,';  ',  MIN(krhoehfm,/NAN),    MAX(krhoehfm,/NAN), $
             MEAN(krhoehfm,/NAN), STDDEV(krhoehfm,/NAN)
;       0.051845502      0.89538532      0.28232267      0.16490871
PRINT,';  ',  MIN(krhoehfp,/NAN),    MAX(krhoehfp,/NAN), $
             MEAN(krhoehfp,/NAN), STDDEV(krhoehfp,/NAN)
;       0.067810800       5.0059950      0.53911588      0.56716390

;---------------------------------------------------------------------
; => Wave number estimates from:
;
; => Calculations of Eq. 4 from Coroniti et al., [1982]
;  Coroniti, F. V., C. F. Kennel, F. L. Scarf, and E. J. Smith (1982),
;    Whistler mode turbulence in the disturbed solar wind, J. Geophys.
;    Res., 87, 6029–6044, doi:10.1029/JA087iA08p06029.
;---------------------------------------------------------------------
; => Separate by plus and minus sign
avg_lfkm = avg_lfk[*,0]  ; => [Avg. |k| (- sign) from low  freq. end of bandpass]
avg_lfkp = avg_lfk[*,1]  ; => [Avg. |k| (+ sign) from low  freq. end of bandpass]
avg_hfkm = avg_hfk[*,0]  ; => [Avg. |k| (- sign) from high freq. end of bandpass]
avg_hfkp = avg_hfk[*,1]  ; => [Avg. |k| (+ sign) from high freq. end of bandpass]
; => Calculate rest frame frequencies from wave number estimates
ckm        = (c*1d-3)
fac0l      = wce*ABS(COS(thkbs*!DPI/18d1))
fac0h      = wce*ABS(COS(thkbe*!DPI/18d1))
fac1lm     = (wpe/(ckm*avg_lfkm))^2
fac1lp     = (wpe/(ckm*avg_lfkp))^2
fac1hm     = (wpe/(ckm*avg_hfkm))^2
fac1hp     = (wpe/(ckm*avg_hfkp))^2
frest_lfkm = fac0l/(1d0 + fac1lm)  ; => Rest frame freq. (rad/s) [|k| (- sign) from low  freq. end of bandpass]
frest_lfkp = fac0l/(1d0 + fac1lp)  ; => Rest frame freq. (rad/s) [|k| (+ sign) from low  freq. end of bandpass]
frest_hfkm = fac0h/(1d0 + fac1hm)  ; => Rest frame freq. (rad/s) [|k| (- sign) from high freq. end of bandpass]
frest_hfkp = fac0h/(1d0 + fac1hp)  ; => Rest frame freq. (rad/s) [|k| (+ sign) from high freq. end of bandpass]
;-----------------------------------------------------------------------------------------
; => Look at 
;-----------------------------------------------------------------------------------------
good_lfkm  = WHERE(frest_lfkm GT wlh,gdlfkm)
good_lfkp  = WHERE(frest_lfkp GT wlh,gdlfkp)
good_hfkm  = WHERE(frest_hfkm GT wlh,gdhfkm)
good_hfkp  = WHERE(frest_hfkp GT wlh,gdhfkp)
PRINT,';  ', gdlfkm, gdlfkp, gdhfkm, gdhfkp
PRINT,';  ', 1d0*[gdlfkm, gdlfkp, gdhfkm, gdhfkp]/(1d0*n_all)
;           138             287             237             409
;        0.32018561      0.66589327      0.54988399      0.94895592


good_lfkm  = WHERE(tanis_h GE 1.1 AND frest_lfkm GT wlh,gdlfkm)
good_lfkp  = WHERE(tanis_h GE 1.1 AND frest_lfkp GT wlh,gdlfkp)
good_hfkm  = WHERE(tanis_h GE 1.1 AND frest_hfkm GT wlh,gdhfkm)
good_hfkp  = WHERE(tanis_h GE 1.1 AND frest_hfkp GT wlh,gdhfkp)
PRINT,';  ', gdlfkm, gdlfkp, gdhfkm, gdhfkp
PRINT,';  ', 1d0*[gdlfkm, gdlfkp, gdhfkm, gdhfkp]/(1d0*n_all)
;           110             122             115             162
;        0.25522042      0.28306265      0.26682135      0.37587007


;-----------------------------------------------------------------------------------------
; => Look at each wave type
;-----------------------------------------------------------------------------------------
evns_lhw   = [00010618L,00010684L,02013066L,02014864L,02015635L,02015691L,$
              02017428L,02018091L]
evns_mix   = [03408599L,00010488L,02011249L,02011723L,02011820L,02013165L,$
              02015299L,02015304L,02015650L,02017555L,23145465L,23145474L,$
              23145484L]
evns_whi   = [00010807L,00010832L,00010868L,00010881L,00010888L,00010895L,$
              00010923L,00010937L,23145603L,23145610L,23153276L,23154909L,$
              23155087L]

good_lhw   = array_where(evns,evns_lhw,/N_UNIQ)
good_mix   = array_where(evns,evns_mix,/N_UNIQ)
good_whi   = array_where(evns,evns_whi,/N_UNIQ)

good_lhw   = good_lhw[*,0]
good_mix   = good_mix[*,0]
good_whi   = good_whi[*,0]

xtt_kb     = '!DkB!N'
fnm_kb     = '_kB_'
xtt_kv     = '!DkV!N'
fnm_kv     = '_kV_'

xdatl_lhw  = thkbs[good_lhw] < (18d1 - thkbs[good_lhw])
xdath_lhw  = thkbe[good_lhw] < (18d1 - thkbe[good_lhw])
;xdatl_lhw  = thkvs[good_lhw] < (18d1 - thkvs[good_lhw])
;xdath_lhw  = thkve[good_lhw] < (18d1 - thkve[good_lhw])

xdatl_mix  = thkbs[good_mix] < (18d1 - thkbs[good_mix])
xdath_mix  = thkbe[good_mix] < (18d1 - thkbe[good_mix])
;xdatl_mix  = thkvs[good_mix] < (18d1 - thkvs[good_mix])
;xdath_mix  = thkve[good_mix] < (18d1 - thkve[good_mix])

xdatl_whi  = thkbs[good_whi] < (18d1 - thkbs[good_whi])
xdath_whi  = thkbe[good_whi] < (18d1 - thkbe[good_whi])
;xdatl_whi  = thkvs[good_whi] < (18d1 - thkvs[good_whi])
;xdath_whi  = thkve[good_whi] < (18d1 - thkve[good_whi])



xr         = [0d0,9d1]
nb         = 7
suffxall   = 'All Waves]'
suffxlhw   = 'LHWs     ]'
suffxwhi   = 'WWs      ]'
suffxmix   = 'MIXED    ]'
suff_lhw   = '[LHWs , Both]'
suff_whi   = '[WWs  , Both]'
suff_mix   = '[MIXED, Both]'

xtt_mid    = xtt_kb[0]
fnm_mid    = fnm_kb[0]
;xtt_mid    = xtt_kv[0]
;fnm_mid    = fnm_kv[0]
xttl8a     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxall[0]
xttl8l     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxlhw[0]
xttl8w     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxwhi[0]
xttl8m     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxmix[0]
ttle8      = 'Angle between Wave Normal Vector and Magnetic Field '
fpref      = 'Theta'+fnm_mid[0]+'Both_stats_'

xdat       = [xdatl_lhw,xdath_lhw]
xttl       = xttl8l
ttle       = ttle8[0]+suff_lhw[0]
fsuffx     = 'LHWs-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

xdat       = [xdatl_mix,xdath_mix]
xttl       = xttl8m
ttle       = ttle8[0]+suff_mix[0]
fsuffx     = 'MIXED-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

xdat       = [xdatl_whi,xdath_whi]
xttl       = xttl8w
ttle       = ttle8[0]+suff_whi[0]
fsuffx     = 'WWs-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose


; => At Start of TDSS
fpref      = 'Theta'+fnm_mid[0]+'Start_stats_'
suff_lhw   = '[LHWs , Start]'
suff_whi   = '[WWs  , Start]'
suff_mix   = '[MIXED, Start]'

xdat       = xdatl_lhw
xttl       = xttl8l
ttle       = ttle8[0]+suff_lhw[0]
fsuffx     = 'LHWs-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

xdat       = xdatl_mix
xttl       = xttl8m
ttle       = ttle8[0]+suff_mix[0]
fsuffx     = 'MIXED-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

xdat       = xdatl_whi
xttl       = xttl8w
ttle       = ttle8[0]+suff_whi[0]
fsuffx     = 'WWs-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

; => At End   of TDSS
fpref      = 'Theta'+fnm_mid[0]+'End___stats_'
suff_lhw   = '[LHWs , End]'
suff_whi   = '[WWs  , End]'
suff_mix   = '[MIXED, End]'

xdat       = xdath_lhw
xttl       = xttl8l
ttle       = ttle8[0]+suff_lhw[0]
fsuffx     = 'LHWs-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

xdat       = xdath_mix
xttl       = xttl8m
ttle       = ttle8[0]+suff_mix[0]
fsuffx     = 'MIXED-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

xdat       = xdath_whi
xttl       = xttl8w
ttle       = ttle8[0]+suff_whi[0]
fsuffx     = 'WWs-Only_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose
;-----------------------------------------------------------------------------------------
; => Look at only the precursors
;-----------------------------------------------------------------------------------------
evns_pre   = [03408599L,00010488L,02011249L,23145465L]
good_pre   = array_where(evns,evns_pre,/N_UNIQ)
good_pre   = good_pre[*,0]

xtt_kb     = '!DkB!N'
fnm_kb     = '_kB_'
xtt_kv     = '!DkV!N'
fnm_kv     = '_kV_'

;theta_l    = thkbs
;theta_h    = thkbe
theta_l    = thkvs
theta_h    = thkve

xr         = [0d0,9d1]
nb         = 7
suffxpre   = 'Precursors]'
suff_pre   = '[Precursors, Both]'

;xtt_mid    = xtt_kb[0]
;fnm_mid    = fnm_kb[0]
xtt_mid    = xtt_kv[0]
fnm_mid    = fnm_kv[0]
xttl8p     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxpre[0]
ttle8      = 'Angle between Wave Normal Vector and Magnetic Field '
fpref      = 'Theta'+fnm_mid[0]+'Both_stats_'
fsuffx     = 'Precursors-Only_histogram'

xdatl      = theta_l[good_pre] < (18d1 - theta_l[good_pre])
xdath      = theta_h[good_pre] < (18d1 - theta_h[good_pre])
xdat       = [xdatl,xdath]
xttl       = xttl8p
ttle       = ttle8[0]+suff_pre[0]
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

; => At Start of TDSS
fpref      = 'Theta'+fnm_mid[0]+'Start_stats_'
suff_pre   = '[Precursors, Start]'
xdat       = theta_l[good_pre] < (18d1 - theta_l[good_pre])
xttl       = xttl8p
ttle       = ttle8[0]+suff_pre[0]
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

; => At End   of TDSS
fpref      = 'Theta'+fnm_mid[0]+'End___stats_'
suff_pre   = '[Precursors, End]'
xdat       = theta_h[good_pre] < (18d1 - theta_h[good_pre])
xttl       = xttl8p
ttle       = ttle8[0]+suff_pre[0]
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose


; => Theta_kn (deg) [RH08 and RH09 JCK's]
;freql    = [freql0,freql1,freql2,freql3]          ; => (Hz) low  freq. end of bandpass
;freqh    = [freqh0,freqh1,freqh2,freqh3]          ; => (Hz) high freq. end of bandpass
freql_pre = freql[good_pre]
freqh_pre = freqh[good_pre]
wlh_pre   = wlh[good_pre]/(2d0*!DPI)
good_lpre = WHERE(freql_pre LE wlh_pre AND freqh_pre LE 40.,gdlpre)
good_hpre = WHERE(freql_pre GT wlh_pre AND freqh_pre GT 40.,gdhpre)
PRINT,';  ', gdlpre, gdhpre, N_ELEMENTS(good_pre)
;            24          58          89

xr         = [0d0,9d1]
nb         = 7
suffxpre   = 'Precursors]'
xtt_kn8    = '!Dkn!N'+' [RH08, '
xtt_kn9    = '!Dkn!N'+' [RH09, '
fnm_kn8    = '_kn_RH08_'
fnm_kn9    = '_kn_RH09_'
;xtt_mid    = xtt_kn8[0]
;fnm_mid    = fnm_kn8[0]
xtt_mid    = xtt_kn9[0]
fnm_mid    = fnm_kn9[0]

;xdat       = thkn8[good_pre] < (18d1 - thkn8[good_pre])
;xdat       = thkn9[good_pre] < (18d1 - thkn9[good_pre])
;xdat       = thkn8[good_lpre] < (18d1 - thkn8[good_lpre])
;xdat       = thkn9[good_lpre] < (18d1 - thkn9[good_lpre])
;xdat       = thkn8[good_hpre] < (18d1 - thkn8[good_hpre])
xdat       = thkn9[good_hpre] < (18d1 - thkn9[good_hpre])

;suff_pre   = '[Precursors, Both]'
;fpref      = 'Theta'+fnm_mid[0]+'Both_stats_'
;suff_pre   = '[Precursors, Start]'
;fpref      = 'Theta'+fnm_mid[0]+'Start_stats_'
suff_pre   = '[Precursors, End]'
fpref      = 'Theta'+fnm_mid[0]+'End___stats_'

xttl8p     = '!7h!3'+xtt_mid[0]+suffxpre[0]
ttle8      = 'Angle between Wave Normal and Shock Normal Vectors '
xttl       = xttl8p
ttle       = ttle8[0]+suff_pre[0]
fname      = fpref[0]+'Precursors-Only_histogram'
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose
;-----------------------------------------------------------------------------------------
; => Look at everything but the precursors
;-----------------------------------------------------------------------------------------
evns_pre   = [03408599L,00010488L,02011249L,23145465L]
good_pre   = array_where(evns,evns_pre,/N_UNIQ,NCOMP1=comp1,NCOMP2=comp2)
good_not   = comp1

xtt_kb     = '!DkB!N'
fnm_kb     = '_kB_'
xtt_kv     = '!DkV!N'
fnm_kv     = '_kV_'

xdatl      = thkbs[good_not] < (18d1 - thkbs[good_not])
xdath      = thkbe[good_not] < (18d1 - thkbe[good_not])
;xdatl      = thkvs[good_not] < (18d1 - thkvs[good_not])
;xdath      = thkve[good_not] < (18d1 - thkve[good_not])

xr         = [0d0,9d1]
nb         = 7
suffxpre   = 'All Except Precursors]'
suff_pre   = '[All Except Precursors, Both]'
xtt_mid    = xtt_kb[0]
fnm_mid    = fnm_kb[0]
;xtt_mid    = xtt_kv[0]
;fnm_mid    = fnm_kv[0]
xttl8p     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxpre[0]
ttle8      = 'Angle between Wave Normal Vector and Magnetic Field '
fpref      = 'Theta'+fnm_mid[0]+'Both_stats_'
fsuffx     = 'All-Except-Precursors_histogram'

xdat       = [xdatl,xdath]
xttl       = xttl8p
ttle       = ttle8[0]+suff_pre[0]
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

; => At Start of TDSS
fpref      = 'Theta'+fnm_mid[0]+'Start_stats_'
suff_pre   = '[All Except Precursors, Start]'
xdat       = xdatl
xttl       = xttl8p
ttle       = ttle8[0]+suff_pre[0]
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

; => At End   of TDSS
fpref      = 'Theta'+fnm_mid[0]+'End___stats_'
suff_pre   = '[All Except Precursors, End]'
xdat       = xdath
xttl       = xttl8p
ttle       = ttle8[0]+suff_pre[0]
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose
;-----------------------------------------------------------------------------------------
; => Look at each wave type for everything but the precursors
;-----------------------------------------------------------------------------------------
evns_lhw   = [00010618L,00010684L,02013066L,02014864L,02015635L,02015691L,$
              02017428L,02018091L]
evns_mix   = [02011723L,02011820L,02013165L,02015299L,02015304L,02015650L,$
              02017555L,23145474L,23145484L]
evns_whi   = [00010807L,00010832L,00010868L,00010881L,00010888L,00010895L,$
              00010923L,00010937L,23145603L,23145610L,23153276L,23154909L,$
              23155087L]

good_lhw   = array_where(evns,evns_lhw,/N_UNIQ)
good_mix   = array_where(evns,evns_mix,/N_UNIQ)
good_whi   = array_where(evns,evns_whi,/N_UNIQ)

good_lhw   = good_lhw[*,0]
good_mix   = good_mix[*,0]
good_whi   = good_whi[*,0]

xtt_kb     = '!DkB!N'
fnm_kb     = '_kB_'
xtt_kv     = '!DkV!N'
fnm_kv     = '_kV_'

;xdatl_lhw  = thkbs[good_lhw] < (18d1 - thkbs[good_lhw])
;xdath_lhw  = thkbe[good_lhw] < (18d1 - thkbe[good_lhw])
;xdatl_mix  = thkbs[good_mix] < (18d1 - thkbs[good_mix])
;xdath_mix  = thkbe[good_mix] < (18d1 - thkbe[good_mix])
;xdatl_whi  = thkbs[good_whi] < (18d1 - thkbs[good_whi])
;xdath_whi  = thkbe[good_whi] < (18d1 - thkbe[good_whi])

xdatl_lhw  = thkvs[good_lhw] < (18d1 - thkvs[good_lhw])
xdath_lhw  = thkve[good_lhw] < (18d1 - thkve[good_lhw])
xdatl_mix  = thkvs[good_mix] < (18d1 - thkvs[good_mix])
xdath_mix  = thkve[good_mix] < (18d1 - thkve[good_mix])
xdatl_whi  = thkvs[good_whi] < (18d1 - thkvs[good_whi])
xdath_whi  = thkve[good_whi] < (18d1 - thkve[good_whi])

xdat_mix   = (xdatl_mix + xdath_mix)/2d0
xdat_lhw   = (xdatl_lhw + xdath_lhw)/2d0
xdat_whi   = (xdatl_whi + xdath_whi)/2d0

xr         = [0d0,9d1]
nb         = 7
suffxall   = 'All Except Precursors]'
suffxlhw   = 'LHWs  Except Precursors]'
suffxwhi   = 'WWs  Except Precursors]'
suffxmix   = 'MIXED  Except Precursors]'
suff_lhw   = '[LHWs Except Precursors, Both]'
suff_whi   = '[WWs Except Precursors, Both]'
suff_mix   = '[MIXED Except Precursors, Both]'

;xtt_mid    = xtt_kb[0]
;fnm_mid    = fnm_kb[0]
xtt_mid    = xtt_kv[0]
fnm_mid    = fnm_kv[0]
xttl8a     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxall[0]
xttl8l     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxlhw[0]
xttl8w     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxwhi[0]
xttl8m     = '!7h!3'+xtt_mid[0]+' [RH08, '+suffxmix[0]
ttle8      = 'Angle between Wave Normal Vector and Magnetic Field '
fpref      = 'Theta'+fnm_mid[0]+'Both_stats_'

xdat       = xdat_lhw
xttl       = xttl8l
ttle       = ttle8[0]+suff_lhw[0]
fsuffx     = 'LHWs-Only-Except-Precursors_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

xdat       = xdat_mix
xttl       = xttl8m
ttle       = ttle8[0]+suff_mix[0]
fsuffx     = 'MIXED-Only-Except-Precursors_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose

xdat       = xdat_whi
xttl       = xttl8w
ttle       = ttle8[0]+suff_whi[0]
fsuffx     = 'WWs-Only-Except-Precursors_histogram'
fname      = fpref[0]+fsuffx[0]
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
popen,fname[0],/LAND
  my_histogram_plot,xdat,NBINS=nb,XTTL=xttl,TTLE=ttle,DRANGE=xr
pclose
;-----------------------------------------------------------------------------------------
; => Look at theta_kV vs. theta_BV
;-----------------------------------------------------------------------------------------
vmag       = SQRT(TOTAL(vsw^2,2L,/NAN))             ; => Magnitude of solar wind velocity (km/s)
bmag       = SQRT(TOTAL(magf^2,2L,/NAN))            ; => Magnitude of the B-field (nT)
; => find unit vectors
magfu      = magf/(bmag # REPLICATE(1d0,3L))
vswu       = vsw/(vmag # REPLICATE(1d0,3L))
; => now find dot product and angle
b_dot_v    = my_dot_prod(vswu,magfu,/NOM)
theta_bv   = ACOS(b_dot_v)*18d1/!DPI
thkv_avg   = (thkvs + thkve)/2d0

xdat_lhw   = theta_bv[good_lhw] < (18d1 - theta_bv[good_lhw])
xdat_mix   = theta_bv[good_mix] < (18d1 - theta_bv[good_mix])
xdat_whi   = theta_bv[good_whi] < (18d1 - theta_bv[good_whi])

ydat_lhw   = thkv_avg[good_lhw] < (18d1 - thkv_avg[good_lhw])
ydat_mix   = thkv_avg[good_mix] < (18d1 - thkv_avg[good_mix])
ydat_whi   = thkv_avg[good_whi] < (18d1 - thkv_avg[good_whi])


xtt_kb     = '!DBV!N'
fnm_kb     = '_BV_'
xtt_kv     = '!DkV!N'
fnm_kv     = '_kV_'
suff_all   = '[All Except Precursors]'
suff_lhw   = '[LHWs Except Precursors]'
suff_whi   = '[WWs Except Precursors]'
suff_mix   = '[MIXED Except Precursors]'
ttle0      = '!7h!3'+'!DkV!N vs. !7h!3'+'!DBV!N '

xtt_mid    = xtt_kb[0]
xttl8a     = '!7h!3'+xtt_mid[0]+' '+suff_all[0]
xttl8l     = '!7h!3'+xtt_mid[0]+' '+suff_lhw[0]
xttl8w     = '!7h!3'+xtt_mid[0]+' '+suff_whi[0]
xttl8m     = '!7h!3'+xtt_mid[0]+' '+suff_mix[0]

xtt_mid    = xtt_kv[0]
yttl8a     = '!7h!3'+xtt_mid[0]+' '+suff_all[0]
yttl8l     = '!7h!3'+xtt_mid[0]+' '+suff_lhw[0]
yttl8w     = '!7h!3'+xtt_mid[0]+' '+suff_whi[0]
yttl8m     = '!7h!3'+xtt_mid[0]+' '+suff_mix[0]

fpref      = 'Theta_BV-vs-Theta_kV_stats_'

xyra       = [0d0,9d1]
xminor     = 10L
xtn        = ['0','10','20','30','40','50','60','70','80','90']
xtv        = [0d0,1d1,2d1,3d1,4d1,5d1,6d1,7d1,8d1,9d1]
xts        = N_ELEMENTS(xtv) - 1L
pstr_lhw   = {XRANGE:xyra,YRANGE:xyra,XSTYLE:1,YSTYLE:1,NODATA:1,     $
              XMINOR:xminor,YMINOR:xminor,XTICKLEN:0.04,YTICKLEN:0.04,$
              TITLE:ttle0[0]+suff_lhw[0],XTITLE:xttl8l,YTITLE:yttl8l, $
              XTICKNAME:xtn,XTICKV:xtv,XTICKS:xts,                    $
              YTICKNAME:xtn,YTICKV:xtv,YTICKS:xts}
pstr_mix   = {XRANGE:xyra,YRANGE:xyra,XSTYLE:1,YSTYLE:1,NODATA:1,     $
              XMINOR:xminor,YMINOR:xminor,XTICKLEN:0.04,YTICKLEN:0.04,$
              TITLE:ttle0[0]+suff_mix[0],XTITLE:xttl8m,YTITLE:yttl8m, $
              XTICKNAME:xtn,XTICKV:xtv,XTICKS:xts,                    $
              YTICKNAME:xtn,YTICKV:xtv,YTICKS:xts}
pstr_whi   = {XRANGE:xyra,YRANGE:xyra,XSTYLE:1,YSTYLE:1,NODATA:1,     $
              XMINOR:xminor,YMINOR:xminor,XTICKLEN:0.04,YTICKLEN:0.04,$
              TITLE:ttle0[0]+suff_whi[0],XTITLE:xttl8w,YTITLE:yttl8w, $
              XTICKNAME:xtn,XTICKV:xtv,XTICKS:xts,                    $
              YTICKNAME:xtn,YTICKV:xtv,YTICKS:xts}

fsuffx     = 'LHWs-Only-Except-Precursors_plot'
fname      = fpref[0]+fsuffx[0]
!P.MULTI   = 0
  PLOT,xdat_lhw,ydat_lhw,_EXTRA=pstr_lhw
    OPLOT,xdat_lhw,ydat_lhw,PSYM=2,COLOR= 50
popen,fname[0],/LAND
  PLOT,xdat_lhw,ydat_lhw,_EXTRA=pstr_lhw
    OPLOT,xdat_lhw,ydat_lhw,PSYM=2,COLOR= 50
pclose


fsuffx     = 'MIXED-Only-Except-Precursors_plot'
fname      = fpref[0]+fsuffx[0]
!P.MULTI   = 0
  PLOT,xdat_mix,ydat_mix,_EXTRA=pstr_mix
    OPLOT,xdat_mix,ydat_mix,PSYM=2,COLOR= 50
popen,fname[0],/LAND
  PLOT,xdat_mix,ydat_mix,_EXTRA=pstr_mix
    OPLOT,xdat_mix,ydat_mix,PSYM=2,COLOR= 50
pclose


fsuffx     = 'WWs-Only-Except-Precursors_plot'
fname      = fpref[0]+fsuffx[0]
!P.MULTI   = 0
  PLOT,xdat_whi,ydat_whi,_EXTRA=pstr_whi
    OPLOT,xdat_whi,ydat_whi,PSYM=2,COLOR= 50
popen,fname[0],/LAND
  PLOT,xdat_whi,ydat_whi,_EXTRA=pstr_whi
    OPLOT,xdat_whi,ydat_whi,PSYM=2,COLOR= 50
pclose


; => Get unique elements only
unq_lhw      = UNIQ(xdat_lhw,SORT(xdat_lhw))
unq_mix      = UNIQ(xdat_mix,SORT(xdat_mix))
unq_whi      = UNIQ(xdat_whi,SORT(xdat_whi))

xdat_lhwu    = xdat_lhw[unq_lhw]
xdat_mixu    = xdat_mix[unq_mix]
xdat_whiu    = xdat_whi[unq_whi]
avg_thkv_lhw = DBLARR(N_ELEMENTS(unq_lhw))
avg_thkv_mix = DBLARR(N_ELEMENTS(unq_mix))
avg_thkv_whi = DBLARR(N_ELEMENTS(unq_whi))
mnmxthkv_lhw = DBLARR(N_ELEMENTS(unq_lhw),2L)
mnmxthkv_mix = DBLARR(N_ELEMENTS(unq_mix),2L)
mnmxthkv_whi = DBLARR(N_ELEMENTS(unq_whi),2L)

FOR j=0L, N_ELEMENTS(unq_lhw) - 1L DO BEGIN                                 $
  good              = WHERE(xdat_lhw EQ xdat_lhw[unq_lhw[j]])             & $
  avg_thkv_lhw[j]   = MEAN(ydat_lhw[good],/NAN,/DOUBLE)                   & $
  mnmxthkv_lhw[j,*] = [MIN(ydat_lhw[good],/NAN),MAX(ydat_lhw[good],/NAN)]

FOR j=0L, N_ELEMENTS(unq_mix) - 1L DO BEGIN                                 $
  good              = WHERE(xdat_mix EQ xdat_mix[unq_mix[j]])             & $
  avg_thkv_mix[j]   = MEAN(ydat_mix[good],/NAN,/DOUBLE)                   & $
  mnmxthkv_mix[j,*] = [MIN(ydat_mix[good],/NAN),MAX(ydat_mix[good],/NAN)]

FOR j=0L, N_ELEMENTS(unq_whi) - 1L DO BEGIN                                 $
  good              = WHERE(xdat_whi EQ xdat_whi[unq_whi[j]])             & $
  avg_thkv_whi[j]   = MEAN(ydat_whi[good],/NAN,/DOUBLE)                   & $
  mnmxthkv_whi[j,*] = [MIN(ydat_whi[good],/NAN),MAX(ydat_whi[good],/NAN)]


suff_all   = ' [All Except Precursors]'
xtt_mid    = xtt_kb[0]
xttl8a     = '!7h!3'+xtt_mid[0]+' '+suff_all[0]
xtt_mid    = xtt_kv[0]
yttl8a     = '!7h!3'+xtt_mid[0]+' '+suff_all[0]
ttlea      = '!7h!3'+'!DkV!N vs. !7h!3'+'!DBV!N '+'[LHWs = Red, MIXED = Green, WWs = Blue]'

fpref      = 'Theta_BV-vs-Theta_kV_mean-plus-minus-maxmin_'
fsuffx     = 'ALL-Except-Precursors_plot'
fname      = fpref[0]+fsuffx[0]

xra        = [5d1,9d1]
yra        = [0d0,9d1]
xminor     = 10L
xtn        = ['50','60','70','80','90']
xtv        = [5d1,6d1,7d1,8d1,9d1]
xts        = N_ELEMENTS(xtv) - 1L
ytn        = ['0','10','20','30','40','50','60','70','80','90']
ytv        = [0d0,1d1,2d1,3d1,4d1,5d1,6d1,7d1,8d1,9d1]
yts        = N_ELEMENTS(ytv) - 1L

pstr_all   = {XRANGE:xra,YRANGE:yra,XSTYLE:1,YSTYLE:1,NODATA:1,       $
              XMINOR:xminor,YMINOR:xminor,XTICKLEN:0.04,YTICKLEN:0.04,$
              TITLE:ttlea[0],XTITLE:xttl8a,YTITLE:yttl8a,             $
              XTICKNAME:xtn,XTICKV:xtv,XTICKS:xts,                    $
              YTICKNAME:ytn,YTICKV:ytv,YTICKS:yts}

!P.MULTI   = 0
  PLOT,xdat_lhwu,avg_thkv_lhw,_EXTRA=pstr_all
    OPLOT,xdat_lhwu,avg_thkv_lhw,PSYM=2,COLOR=250
    ERRPLOT,xdat_lhwu,mnmxthkv_lhw[*,0],mnmxthkv_lhw[*,1],/DATA,COLOR=250
    OPLOT,xdat_mixu,avg_thkv_mix,PSYM=2,COLOR=150
    ERRPLOT,xdat_mixu,mnmxthkv_mix[*,0],mnmxthkv_mix[*,1],/DATA,COLOR=150
    OPLOT,xdat_whiu,avg_thkv_whi,PSYM=2,COLOR= 50
    ERRPLOT,xdat_whiu,mnmxthkv_whi[*,0],mnmxthkv_whi[*,1],/DATA,COLOR= 50
popen,fname[0],/LAND
  PLOT,xdat_lhwu,avg_thkv_lhw,_EXTRA=pstr_all
    OPLOT,xdat_lhwu,avg_thkv_lhw,PSYM=2,COLOR=250
    ERRPLOT,xdat_lhwu,mnmxthkv_lhw[*,0],mnmxthkv_lhw[*,1],/DATA,COLOR=250
    OPLOT,xdat_mixu,avg_thkv_mix,PSYM=2,COLOR=150
    ERRPLOT,xdat_mixu,mnmxthkv_mix[*,0],mnmxthkv_mix[*,1],/DATA,COLOR=150
    OPLOT,xdat_whiu,avg_thkv_whi,PSYM=2,COLOR= 50
    ERRPLOT,xdat_whiu,mnmxthkv_whi[*,0],mnmxthkv_whi[*,1],/DATA,COLOR= 50
pclose








