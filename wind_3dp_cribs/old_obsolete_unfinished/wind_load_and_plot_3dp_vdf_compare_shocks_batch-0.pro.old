;;  Plot VDFs for comparison between weak and strong shocks
;;  @/Users/lbwilson/Desktop/temp_idl/wind_load_and_plot_3dp_vdf_compare_shocks_batch.pro

;;----------------------------------------------------------------------------------------
;;  IDL system and OS stuff
;;----------------------------------------------------------------------------------------
vers           = !VERSION.OS_FAMILY   ;;  e.g., 'unix'
vern           = !VERSION.RELEASE     ;;  e.g., '7.1.1'
slash          = get_os_slash()       ;;  '/' for Unix, '\' for Windows
;;----------------------------------------------------------------------------------------
;;  Constants
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;  Fundamental
c              = 2.9979245800d+08         ;;  Speed of light in vacuum [m s^(-1), 2014 CODATA/NIST]
kB             = 1.3806485200d-23         ;;  Boltzmann Constant [J K^(-1), 2014 CODATA/NIST]
hh             = 6.6260700400d-34         ;;  Planck Constant [J s, 2014 CODATA/NIST]
;;  Electromagnetic
qq             = 1.6021766208d-19         ;;  Fundamental charge [C, 2014 CODATA/NIST]
epo            = 8.8541878170d-12         ;;  Permittivity of free space [F m^(-1), 2014 CODATA/NIST]
muo            = !DPI*4.00000d-07         ;;  Permeability of free space [N A^(-2) or H m^(-1), 2014 CODATA/NIST]
;;  Atomic
me             = 9.1093835600d-31         ;;  Electron mass [kg, 2014 CODATA/NIST]
mp             = 1.6726218980d-27         ;;  Proton mass [kg, 2014 CODATA/NIST]
mn             = 1.6749274710d-27         ;;  Neutron mass [kg, 2014 CODATA/NIST]
ma             = 6.6446572300d-27         ;;  Alpha particle mass [kg, 2014 CODATA/NIST]
;;  --> Define mass of particles in units of energy [eV]
ma_eV          = ma[0]*c[0]^2/qq[0]       ;;  ~3727.379378(23) [MeV, 2014 CODATA/NIST]
me_eV          = me[0]*c[0]^2/qq[0]       ;;  ~0.5109989461(31) [MeV, 2014 CODATA/NIST]
mn_eV          = mn[0]*c[0]^2/qq[0]       ;;  ~939.5654133(58) [MeV, 2014 CODATA/NIST]
mp_eV          = mp[0]*c[0]^2/qq[0]       ;;  ~938.2720813(58) [MeV, 2014 CODATA/NIST]
;;  Astronomical
R_S___m        = 6.9600000d08             ;;  Sun's Mean Equatorial Radius [m, 2015 AA values]
R_Ea__m        = 6.3781366d06             ;;  Earth's Mean Equatorial Radius [m, 2015 AA values]
M_E            = 5.9722000d24             ;;  Earth's mass [kg, 2015 AA values]
M_S__kg        = 1.9884000d30             ;;  Sun's mass [kg, 2015 AA values]
au             = 1.49597870700d+11        ;;  1 astronomical unit or AU [m, from Mathematica 10.1 on 2015-04-21]
R_E            = R_Ea__m[0]*1d-3          ;;  m --> km
;;----------------------------------------------------------------------------------------
;;  Conversion Factors
;;----------------------------------------------------------------------------------------
;;  Energy and Temperature
f_1eV          = qq[0]/hh[0]          ;;  Freq. associated with 1 eV of energy [ Hz --> f_1eV*energy{eV} = freq{Hz} ]
eV2J           = hh[0]*f_1eV[0]       ;;  Energy associated with 1 eV of energy [ J --> J_1eV*energy{eV} = energy{J} ]
eV2K           = qq[0]/kB[0]          ;;  Temp. associated with 1 eV of energy [11,604.5221 K/eV, 2014 CODATA/NIST --> K_eV*energy{eV} = Temp{K}]
K2eV           = kB[0]/qq[0]          ;;  Energy associated with 1 K Temp. [8.6173303 x 10^(-5) eV/K, 2014 CODATA/NIST --> eV_K*Temp{K} = energy{eV}]
;;----------------------------------------------------------------------------------------
;;  Coordinates and vectors
;;----------------------------------------------------------------------------------------
;;  Define some coordinate strings
coord_dsl      = 'dsl'
coord_gse      = 'gse'
coord_gsm      = 'gsm'
coord_fac      = 'fac'
coord_mag      = 'mag'
coord_gseu     = STRUPCASE(coord_gse[0])
vec_str        = ['x','y','z']
tensor_str     = ['x'+vec_str,'y'+vec_str[1:2],'zz']
fac_vec_str    = ['perp1','perp2','para']
fac_dir_str    = ['para','perp','anti']
vec_col        = [250,150, 50]
;;----------------------------------------------------------------------------------------
;;  Define some general variables
;;----------------------------------------------------------------------------------------
start_of_day_t = '00:00:00.000000000'
end___of_day_t = '23:59:59.999999999'
start_of_day   = '00:00:00.000000'
end___of_day   = '23:59:59.999999'

def__lim       = {YSTYLE:1,PANEL_SIZE:2.,XMINOR:5,XTICKLEN:0.04,YTICKLEN:0.01}
def_dlim       = {SPEC:0,COLORS:50L,LABELS:'1',LABFLAG:2}

sc             = 'Wind'
scpref         = sc[0]+'_'

;;  Default plot stuff
x_inds         = [0L,2L,1L]
y_inds         = [1L,0L,2L]
dumb_exv       = {VEC:REPLICATE(0e0,3L),NAME:''}
ex_vecs        = REPLICATE(dumb_exv[0],4L)
;;  Define popen structure
popen_str      = {PORT:1,UNITS:'inches',XSIZE:8e0,YSIZE:11e0,ASPECT:0}
plane          = 'xy'                        ;;  Y vs. X plane
IF (plane[0] EQ 'xy') THEN k = 0L ELSE   $
  IF (plane[0] EQ 'xz') THEN k = 1L ELSE $
  IF (plane[0] EQ 'yz') THEN k = 2L
xyind          = [x_inds[k],y_inds[k]]
vec1           = [1d0,0d0,0d0]               ;;  V1
vec2           = [0d0,1d0,0d0]               ;;  V2
xname          = 'Xgse'                      ;;  Name of V1
yname          = 'Ygse'                      ;;  Name of V2
nlev           = 30L                         ;;  # of contour levels to show
ngrid          = 101L                        ;;  # of grid points

;;  Require date and ramp center time inputs
test           = (SIZE(tramp,/TYPE) NE 7)
IF (test[0]) THEN STOP
tura           = time_double(tramp[0])
trange         = tura[0] + [-1,1]*2d0*36d2       ;;  Use 2 hour window around ramp
;;----------------------------------------------------------------------------------------
;;  Load 3DP data
;;----------------------------------------------------------------------------------------
;;  Define a start date and time
start_t        = tdate[0]+'/'+start_of_day[0]
;;  Define a duration of time to load [hours]
dur            = 200.
;;  Define the memory size to limit to [mostly for older systems]
memsz          = 200.
;;  Define the packet quality [2 allows "invalid" distributions through]
qual           = 2
;;  Load the level zero data files and store in pointer memory
load_3dp_data,start_t[0],dur[0],QUALITY=qual[0],MEMSIZE=memsz[0]
;;  Define the default TPLOT handle used by load_wi_h0_mfi.pro
def_wibmag_tpn = 'wi_B3_MAG(GSE)'
def_wibgse_tpn = 'wi_B3(GSE)'
;;  Set TPLOT time range
delt           = trange[1] - trange[0]
timespan,trange[0],delt[0],/SECONDS
;;----------------------------------------------------------------------------------------
;;  Open window and plot MFI data
;;----------------------------------------------------------------------------------------
DEVICE,GET_SCREEN_SIZE=s_size
wsz            = s_size*7d-1
win_ttl        = 'Wind Plots ['+tdate[0]+']'
win_str        = {RETAIN:2,XSIZE:wsz[0],YSIZE:wsz[1],TITLE:win_ttl[0],XPOS:10,YPOS:10}
lbw_window,WIND_N=0,_EXTRA=win_str
;;  Plot MFI data
tplot,[def_wibmag_tpn[0],def_wibgse_tpn[0]],TRANGE=trange
;;----------------------------------------------------------------------------------------
;;  Rename MFI TPLOT handles from default
;;----------------------------------------------------------------------------------------
;;  Get |Bo|
get_data,def_wibmag_tpn[0],DATA=temp_bo,DLIMIT=dlim_bo,LIMIT=lim_bo
;;  Get Bo
get_data,def_wibgse_tpn[0],DATA=temp_bb,DLIMIT=dlim_bb,LIMIT=lim_bb
;;  Define new TPLOT handles
new_wibmag_tpn = scpref[0]+'magf_3s_'+coord_mag[0]
new_wibgse_tpn = scpref[0]+'magf_3s_'+coord_gse[0]
;;  Store new TPLOT variables and remove old
store_data,DELETE=tnames()
store_data,new_wibmag_tpn[0],DATA=temp_bo,DLIMIT=dlim_bo,LIMIT=lim_bo
store_data,new_wibgse_tpn[0],DATA=temp_bb,DLIMIT=dlim_bb,LIMIT=lim_bb
;;  Erase old YTITLEs
options,[new_wibmag_tpn[0],new_wibgse_tpn[0]],'YTITLE'
options,[new_wibmag_tpn[0],new_wibgse_tpn[0]],'YTITLE',/DEF
;;  Define new
options,new_wibmag_tpn[0],YTITLE='|Bo| [nT]',/DEF
options,new_wibgse_tpn[0],YTITLE='Bo [nT,'+coord_gseu[0]+']',/DEF
;;  Replot
tplot,[new_wibmag_tpn[0],new_wibgse_tpn[0]],TRANGE=trange
;;----------------------------------------------------------------------------------------
;;  Find strahl direction
;;----------------------------------------------------------------------------------------
;;  Define params
magf_t         = t_get_struc_unix(temp_bb)
toff           = MIN(magf_t,/NAN)
tsec           = magf_t - toff[0]
magf_v         = temp_bb.Y
nt             = N_ELEMENTS(magf_t)
dumb           = REPLICATE(f,nt[0],2L)
;;  Call strahl finding routine
strahl_dir     = find_strahl_direction(magf_v)
good_para      = WHERE(FINITE(strahl_dir) AND strahl_dir EQ 1,gd_para)
good_perp      = WHERE(FINITE(strahl_dir) AND strahl_dir EQ -1,gd_perp)
IF (gd_para[0] GT 0) THEN dumb[good_para,0] = 1e0
IF (gd_perp[0] GT 0) THEN dumb[good_perp,1] = -1e0
;;  Define a dummy TPLOT structure
struc          = {X:tsec,Y:dumb,TSHIFT:toff[0]}
tpn            = 'solar_strahl_dir'
;;  Send to TPLOT
store_data,tpn[0],DATA=struc,DLIMIT=def_dlim,LIMIT=def__lim
;;  Define YTITLEs, YRANGE, etc.
options,tpn[0],YTITLE='Strahl Dir.',YRANGE=[-1,1]*1.5,YSUBTITLE='[Para/Anti]',$
               COLORS=vec_col[[0,2]],LABELS=fac_dir_str[[0,2]],/DEF
;;  Remove any pre-existing options in the LIMIT structure
options,tpn[0],'YTITLE' & options,tpn[0],'YRANGE' & options,tpn[0],'YSUBTITLE'
options,tpn[0],'COLORS' & options,tpn[0],'LABELS'
;;----------------------------------------------------------------------------------------
;;  Load orbit data  [***  Optional  ***]
;;----------------------------------------------------------------------------------------
wind_orbit_to_tplot,BNAME=new_wibgse_tpn[0],TRANGE=trange
;;  Change Y-Axis titles
options,'Wind_Radial_Distance','YTITLE','Radial Dist. (R!DE!N)'
options,'Wind_GSE_Latitude','YTITLE','GSE Lat. [deg]'
options,'Wind_GSE_Longitude','YTITLE','GSE Lon. [deg]'
;;  Add these variables as tick mark labels
gnames         = ['Wind_Radial_Distance','Wind_GSE_Latitude','Wind_GSE_Longitude','Wind_MLT']
tplot_options,VAR_LABEL=gnames
;;  Update plot
tplot
;;----------------------------------------------------------------------------------------
;;  Get Rankine-Hugoniot results, if available, from CfA Harvard Wind shock database at:
;;    https://www.cfa.harvard.edu/shocks/wi_data/
;;
;;  Let use define the following:
;;      SCF   :  spacecraft frame of reference
;;      SHF   :  shock rest frame of reference
;;
;;
;;  They assume several things, as they only use the SWE Faraday cup data (i.e., only
;;    ions).  They must assume Te ~ Ti, for instance.  Let use define the following:
;;      Cs    :  ion-acoustic sound speed or just sound speed
;;      VA    :  Alfvén speed
;;      W_j   :  thermal speed (i.e., rms speed) of species j
;;      ß     :  Total plasma beta
;;      Zi    :  Charge state of ion
;;      ¥j    :  polytrope index of species j (i.e., ratio of specific heats)
;;      T_j   :  Temperature of species j
;;      M_j   :  Mass " "
;;      kB    :  Boltzmann constant
;;    Then we can define these in terms of their parameter dependencies as:
;;      Cs^2  = [kB ( Zi ¥e T_e + ¥i T_i )/M_i]
;;            = (5/3)*W_i^2 [for CfA database results]
;;      W_e^2 = kB T_e/M_e = (M_i/2 M_e) W_i^2
;;      W_i^2 = kB T_i/M_i
;;      ß     = (3/5)*Cs^2/VA^2
;;----------------------------------------------------------------------------------------
;;  Return results only using the CfA method listed on each page
test_bst       = read_shocks_jck_database_new(/CFA_METH_ONLY,GIND_3D=gind_3d_bst)
;;  Define internal structures
gen_info_str   = test_bst.GEN_INFO
asy_info_str   = test_bst.ASY_INFO
bvn_info_str   = test_bst.BVN_INFO
key_info_str   = test_bst.KEY_INFO
ups_info_str   = test_bst.UPS_INFO
dns_info_str   = test_bst.DNS_INFO
;;  Define general info
tdates_bst     = gen_info_str.TDATES                  ;;  Dates of events ['YYYY-MM-DD']
rhmeth_bst     = gen_info_str.RH_METHOD               ;;  Defines method used to determine shock normal
unix_ra        = gen_info_str.ARRT_UNIX.Y             ;;  Unix times at center of ramps
;;  Define Key Shock Analysis parameters
thetbn_up      = key_info_str.THETA_BN.Y              ;;  Avg. upstream shock normal angle [deg]
vshn___up      = ABS(key_info_str.VSHN_UP.Y)          ;;  " " shock normal speed [SCF, km/s]
N2_N1__up      = ABS(key_info_str.NIDN_NIUP.Y)        ;;  Shock compression ratio [unitless]
nsh____up      = bvn_info_str.SH_N_GSE.Y              ;;  Shock normal unit vectors [GSE, unitless]
;;  Determine which shock to use
gshock         = WHERE(tdates_bst EQ tdate[0],gsh)
PRINT,';; ',gsh[0]

;;  Some dates have two shocks per date, so choose which one to use
;;    [see two commented examples below]
IF (SIZE(kk,/TYPE) EQ 0) THEN kk = 0
IF (gsh[0] GT 0) THEN gcomp = N2_N1__up[gshock[kk]]
IF (gsh[0] GT 0) THEN tura  = unix_ra[gshock[kk]]  
IF (gsh[0] GT 0) THEN gthbn = thetbn_up[gshock[kk]]
IF (gsh[0] GT 0) THEN gnorm = REFORM(nsh____up[gshock[kk],*]) ELSE gnorm = REPLICATE(f,3)
;;----------------------------------------------------------------------------------------
;;  Load ion moments
;;----------------------------------------------------------------------------------------
pesa_low_moment_calibrate,DATE=date,TRANGE=trange,BNAME=new_wibgse_tpn[0],$
                          COMPRESS=gcomp,MIDRA=tura
;;----------------------------------------------------------------------------------------
;;  Load SWE ion moments
;;----------------------------------------------------------------------------------------
wind_h1_swe_to_tplot,TRANGE=trange,/COMBINE_PA,/NO_SWE_B
;;----------------------------------------------------------------------------------------
;;  Set some of my preferred defaults for TPLOT
;;----------------------------------------------------------------------------------------
lbw_tplot_set_defaults              ;;  Load some of my personal defaults
tplot_options,'XMARGIN',[ 20, 15]
tplot_options,'YMARGIN',[ 5, 5]
;;----------------------------------------------------------------------------------------
;;  Get thermal [PESA Low] and suprathermal [PESA High]
;;    ion velocity distribution functions (VDFs)
;;
;;    Low   :  ~0.1-10.0 keV ions
;;    High  :  ~0.5-28.0 keV ions
;;----------------------------------------------------------------------------------------
pldat          = get_3dp_structs('pl' ,TRANGE=trange)      ;;  PESA  Low
plbdat         = get_3dp_structs('plb',TRANGE=trange)      ;;  PESA  Low Burst
phdat          = get_3dp_structs('ph' ,TRANGE=trange)      ;;  PESA High
phbdat         = get_3dp_structs('phb',TRANGE=trange)      ;;  PESA High Burst
IF (SIZE( pldat,/TYPE) EQ 8) THEN apl_ =  pldat.DATA ELSE apl_ = 0
IF (SIZE( phdat,/TYPE) EQ 8) THEN aph_ =  phdat.DATA ELSE aph_ = 0
IF (SIZE(plbdat,/TYPE) EQ 8) THEN aplb = plbdat.DATA ELSE aplb = 0
IF (SIZE(phbdat,/TYPE) EQ 8) THEN aphb = phbdat.DATA ELSE aphb = 0
;;----------------------------------------------------------------------------------------
;;  Get thermal [EESA Low] and suprathermal [EESA High]
;;    electron velocity distribution functions (VDFs)
;;
;;    Low   :     ~5-1100  eV electrons
;;    High  :  ~0.14-28.0 keV electrons
;;----------------------------------------------------------------------------------------
eldat          = get_3dp_structs('el' ,TRANGE=trange)      ;;  EESA  Low
elbdat         = get_3dp_structs('elb',TRANGE=trange)      ;;  EESA  Low Burst
ehdat          = get_3dp_structs('eh' ,TRANGE=trange)      ;;  EESA High
ehbdat         = get_3dp_structs('ehb',TRANGE=trange)      ;;  EESA High Burst
IF (SIZE( eldat,/TYPE) EQ 8) THEN ael_ =  eldat.DATA ELSE ael_ = 0
IF (SIZE( ehdat,/TYPE) EQ 8) THEN aeh_ =  ehdat.DATA ELSE aeh_ = 0
IF (SIZE(elbdat,/TYPE) EQ 8) THEN aelb = elbdat.DATA ELSE aelb = 0
IF (SIZE(ehbdat,/TYPE) EQ 8) THEN aehb = ehbdat.DATA ELSE aehb = 0
;;----------------------------------------------------------------------------------------
;;  Define number of structures and add VSW, MAGF, and SC_POT values
;;----------------------------------------------------------------------------------------
;;  Define some TPLOT handles for later use
Vgse_tpnm      = 'V_sw2'             ;;  TPLOT handle associated with Vsw [GSE, km/s]
Bgse_tpnm      = new_wibgse_tpn[0]   ;;  TPLOT handle associated with Bo [GSE, nT]
;;  Determine which TPLOT handle to use for estimate of spacecraft potential [eV]
IF (tnames('sc_pot_3') EQ '') THEN scp_tpn = 'sc_pot_2' ELSE scp_tpn = 'sc_pot_3'
;;  Define number of structures
IF (SIZE(apl_,/TYPE) EQ 8) THEN n_pl_ = N_ELEMENTS(apl_) ELSE n_pl_ = 0L
IF (SIZE(aph_,/TYPE) EQ 8) THEN n_ph_ = N_ELEMENTS(aph_) ELSE n_ph_ = 0L
IF (SIZE(aplb,/TYPE) EQ 8) THEN n_plb = N_ELEMENTS(aplb) ELSE n_plb = 0L
IF (SIZE(aphb,/TYPE) EQ 8) THEN n_phb = N_ELEMENTS(aphb) ELSE n_phb = 0L
IF (SIZE(ael_,/TYPE) EQ 8) THEN n_el_ = N_ELEMENTS(ael_) ELSE n_el_ = 0L
IF (SIZE(aeh_,/TYPE) EQ 8) THEN n_eh_ = N_ELEMENTS(aeh_) ELSE n_eh_ = 0L
IF (SIZE(aelb,/TYPE) EQ 8) THEN n_elb = N_ELEMENTS(aelb) ELSE n_elb = 0L
IF (SIZE(aehb,/TYPE) EQ 8) THEN n_ehb = N_ELEMENTS(aehb) ELSE n_ehb = 0L
;;  Clean up
DELVAR,pldat,plbdat,phdat,phbdat,eldat,elbdat,ehdat,ehbdat,sfdat,sfbdat,sodat,sobdat
;;  Sort by time (just in case)
IF (n_pl_[0] GT 0) THEN sp_pl_ = SORT(apl_.TIME )
IF (n_plb[0] GT 0) THEN sp_plb = SORT(aplb.TIME)
IF (n_ph_[0] GT 0) THEN sp_ph_ = SORT(aph_.TIME )
IF (n_phb[0] GT 0) THEN sp_phb = SORT(aphb.TIME)
IF (n_el_[0] GT 0) THEN sp_el_ = SORT(ael_.TIME )
IF (n_elb[0] GT 0) THEN sp_elb = SORT(aelb.TIME)
IF (n_eh_[0] GT 0) THEN sp_eh_ = SORT(aeh_.TIME )
IF (n_ehb[0] GT 0) THEN sp_ehb = SORT(aehb.TIME)

IF (n_pl_[0] GT 0) THEN apl_ = TEMPORARY(apl_[sp_pl_])
IF (n_plb[0] GT 0) THEN aplb = TEMPORARY(aplb[sp_plb])
IF (n_ph_[0] GT 0) THEN aph_ = TEMPORARY(aph_[sp_ph_])
IF (n_phb[0] GT 0) THEN aphb = TEMPORARY(aphb[sp_phb])
IF (n_el_[0] GT 0) THEN ael_ = TEMPORARY(ael_[sp_el_])
IF (n_elb[0] GT 0) THEN aelb = TEMPORARY(aelb[sp_elb])
IF (n_eh_[0] GT 0) THEN aeh_ = TEMPORARY(aeh_[sp_eh_])
IF (n_ehb[0] GT 0) THEN aehb = TEMPORARY(aehb[sp_ehb])
;;  Add bulk flow velocity [km/s] to structures
IF (n_pl_[0] GT 0) THEN add_vsw2,apl_,Vgse_tpnm[0],/LEAVE_ALONE
IF (n_plb[0] GT 0) THEN add_vsw2,aplb,Vgse_tpnm[0],/LEAVE_ALONE
IF (n_ph_[0] GT 0) THEN add_vsw2,aph_,Vgse_tpnm[0],/LEAVE_ALONE
IF (n_phb[0] GT 0) THEN add_vsw2,aphb,Vgse_tpnm[0],/LEAVE_ALONE
IF (n_el_[0] GT 0) THEN add_vsw2,ael_,Vgse_tpnm[0],/LEAVE_ALONE
IF (n_elb[0] GT 0) THEN add_vsw2,aelb,Vgse_tpnm[0],/LEAVE_ALONE
IF (n_eh_[0] GT 0) THEN add_vsw2,aeh_,Vgse_tpnm[0],/LEAVE_ALONE
IF (n_ehb[0] GT 0) THEN add_vsw2,aehb,Vgse_tpnm[0],/LEAVE_ALONE
;;  Add quasi-static magnetic field [nT] to structures
IF (n_pl_[0] GT 0) THEN add_magf2,apl_,Bgse_tpnm[0],/LEAVE_ALONE
IF (n_plb[0] GT 0) THEN add_magf2,aplb,Bgse_tpnm[0],/LEAVE_ALONE
IF (n_ph_[0] GT 0) THEN add_magf2,aph_,Bgse_tpnm[0],/LEAVE_ALONE
IF (n_phb[0] GT 0) THEN add_magf2,aphb,Bgse_tpnm[0],/LEAVE_ALONE
IF (n_el_[0] GT 0) THEN add_magf2,ael_,Bgse_tpnm[0],/LEAVE_ALONE
IF (n_elb[0] GT 0) THEN add_magf2,aelb,Bgse_tpnm[0],/LEAVE_ALONE
IF (n_eh_[0] GT 0) THEN add_magf2,aeh_,Bgse_tpnm[0],/LEAVE_ALONE
IF (n_ehb[0] GT 0) THEN add_magf2,aehb,Bgse_tpnm[0],/LEAVE_ALONE
;;  Add spacecraft potential [eV] to structures
IF (n_pl_[0] GT 0) THEN add_scpot,apl_,scp_tpn[0],/LEAVE_ALONE
IF (n_plb[0] GT 0) THEN add_scpot,aplb,scp_tpn[0],/LEAVE_ALONE
IF (n_ph_[0] GT 0) THEN add_scpot,aph_,scp_tpn[0],/LEAVE_ALONE
IF (n_phb[0] GT 0) THEN add_scpot,aphb,scp_tpn[0],/LEAVE_ALONE
IF (n_el_[0] GT 0) THEN add_scpot,ael_,scp_tpn[0],/LEAVE_ALONE
IF (n_elb[0] GT 0) THEN add_scpot,aelb,scp_tpn[0],/LEAVE_ALONE
IF (n_eh_[0] GT 0) THEN add_scpot,aeh_,scp_tpn[0],/LEAVE_ALONE
IF (n_ehb[0] GT 0) THEN add_scpot,aehb,scp_tpn[0],/LEAVE_ALONE
;;----------------------------------------------------------------------------------------
;;  Open window and plot VDF data
;;----------------------------------------------------------------------------------------
DEVICE,GET_SCREEN_SIZE=s_size
wsz            = MIN(s_size*7d-1)
win_ttl        = 'Wind 3DP EESA and PESA Low'
win_str        = {RETAIN:2,XSIZE:wsz[0],YSIZE:LONG(wsz[0]*1.375d0),TITLE:win_ttl[0],XPOS:10,YPOS:10}
lbw_window,WIND_N=1,_EXTRA=win_str
;win_ttl        = 'Wind 3DP EESA Low'
;win_str        = {RETAIN:2,XSIZE:wsz[0],YSIZE:LONG(wsz[0]*1.375d0),TITLE:win_ttl[0],XPOS:10,YPOS:10}
;lbw_window,WIND_N=2,_EXTRA=win_str
;;--------------------------------------------
;;  Plot title stuff
;;--------------------------------------------
strn0          = dat_3dp_str_names(aelb[0])
strn1          = dat_3dp_str_names(aplb[0])
strn2          = dat_3dp_str_names(aphb[0])
instnmmode__el = strn0.LC[0]                 ;;  e.g., 'Eesa Low Burst'
instnmmode__pl = strn1.LC[0]                 ;;  e.g., 'Eesa High Burst'
instnmmode__ph = strn2.LC[0]                 ;;  e.g., 'SST Foil Burst'
data_str__el   = strn0.SN[0]                 ;;  e.g., 'el' for Wind EESA Low or 'peeb' for THEMIS EESA
data_str__pl   = strn1.SN[0]                 ;;  e.g., 'eh' for Wind EESA High or 'peeb' for THEMIS EESA
data_str__ph   = strn2.SN[0]                 ;;  e.g., 'sf' for Wind SST Foil or 'pseb' for THEMIS SST Foil
tran_el        = [[aelb.TIME],[aelb.END_TIME]]
tran_pl        = [[aplb.TIME],[aplb.END_TIME]]
tran_ph        = [[aphb.TIME],[aphb.END_TIME]]
fnm__el        = file_name_times(tran_el[*,0],PREC=3)
fnm__pl        = file_name_times(tran_pl[*,0],PREC=3)
fnm__ph        = file_name_times(tran_ph[*,0],PREC=3)
ft__el         = fnm__el[0].F_TIME           ;;  e.g., '1998-08-09_0801x09.494'
ft__pl         = STRMID(fnm__pl[0].F_TIME,11)
ft__ph         = STRMID(fnm__ph[0].F_TIME,11)

fname_mid_el   = data_str__el[0]+'-'+ft__el
fname_mid_pl   = data_str__pl[0]+'-'+ft__pl
fname_mid_ph   = data_str__ph[0]+'-'+ft__ph
